//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONTokener.java
//

#ifndef _ImActorRuntimeJsonJSONTokener_H_
#define _ImActorRuntimeJsonJSONTokener_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class ARDataInput;
@class ARJSONException;

/*!
 @brief A JSONTokener takes a source string and extracts characters and tokens from
 it.
 It is used by the JSONObject and JSONArray constructors to parse
 JSON source strings.
 @author JSON.org
 @version 2014-05-03
 */
@interface ARJSONTokener : NSObject

#pragma mark Public

/*!
 @brief Construct a JSONTokener from a Reader.
 @param reader A reader.
 */
- (instancetype)initWithARDataInput:(ARDataInput *)reader;

/*!
 @brief Construct a JSONTokener from a string.
 @param s A source string.
 */
- (instancetype)initWithNSString:(NSString *)s;

/*!
 @brief Back up one character.
 This provides a sort of lookahead capability,
 so that you can test for a digit or letter before attempting to parse
 the next number or identifier.
 */
- (void)back;

/*!
 @brief Get the hex value of a character (base16).
 @param c A character between '0' and '9' or between 'A' and 'F' or
 between 'a' and 'f'.
 @return An int between 0 and 15, or -1 if c was not a hex digit.
 */
+ (jint)dehexcharWithChar:(jchar)c;

- (jboolean)end;

/*!
 @brief Determine if the source string still contains characters that next()
 can consume.
 @return true if not yet at the end of the source.
 */
- (jboolean)more;

/*!
 @brief Get the next character in the source string.
 @return The next character, or 0 if past the end of the source string.
 */
- (jchar)next;

/*!
 @brief Consume the next character, and check that it matches a specified
 character.
 @param c The character to match.
 @return The character.
 @throws JSONException if the character does not match.
 */
- (jchar)nextWithChar:(jchar)c;

/*!
 @brief Get the next n characters.
 @param n The number of characters to take.
 @return A string of n characters.
 @throws JSONException Substring bounds error if there are not
 n characters remaining in the source string.
 */
- (NSString *)nextWithInt:(jint)n;

/*!
 @brief Get the next char in the string, skipping whitespace.
 @return A character, or 0 if there are no more characters.
 @throws JSONException
 */
- (jchar)nextClean;

/*!
 @brief Return the characters up to the next close quote character.
 Backslash processing is done. The formal JSON format does not
 allow strings in single quotes, but an implementation is allowed to
 accept them.
 @param quote The quoting character, either
 <code>"</code>&nbsp;<small>(double quote)</small> or
 <code>'</code>&nbsp;<small>(single quote)</small>.
 @return A String.
 @throws JSONException Unterminated string.
 */
- (NSString *)nextStringWithChar:(jchar)quote;

/*!
 @brief Get the text up but not including the specified character or the
 end of line, whichever comes first.
 @param delimiter A delimiter character.
 @return A string.
 */
- (NSString *)nextToWithChar:(jchar)delimiter;

/*!
 @brief Get the text up but not including one of the specified delimiter
 characters or the end of line, whichever comes first.
 @param delimiters A set of delimiter characters.
 @return A string, trimmed.
 */
- (NSString *)nextToWithNSString:(NSString *)delimiters;

/*!
 @brief Get the next value.
 The value can be a Boolean, Double, Integer,
 JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.
 @return An object.
 @throws JSONException If syntax error.
 */
- (id)nextValue;

/*!
 @brief Make a JSONException to signal a syntax error.
 @param message The error message.
 @return A JSONException object, suitable for throwing
 */
- (ARJSONException *)syntaxErrorWithNSString:(NSString *)message;

/*!
 @brief Make a printable string of this JSONTokener.
 @return " at {index} [character {character} line {line}]"
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ARJSONTokener)

FOUNDATION_EXPORT void ARJSONTokener_initWithARDataInput_(ARJSONTokener *self, ARDataInput *reader);

FOUNDATION_EXPORT ARJSONTokener *new_ARJSONTokener_initWithARDataInput_(ARDataInput *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ARJSONTokener_initWithNSString_(ARJSONTokener *self, NSString *s);

FOUNDATION_EXPORT ARJSONTokener *new_ARJSONTokener_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT jint ARJSONTokener_dehexcharWithChar_(jchar c);

J2OBJC_TYPE_LITERAL_HEADER(ARJSONTokener)

@compatibility_alias ImActorRuntimeJsonJSONTokener ARJSONTokener;


#pragma clang diagnostic pop
#endif // _ImActorRuntimeJsonJSONTokener_H_
