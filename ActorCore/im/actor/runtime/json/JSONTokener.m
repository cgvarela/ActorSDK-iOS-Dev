//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONTokener.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/json/JSONArray.h"
#include "im/actor/runtime/json/JSONException.h"
#include "im/actor/runtime/json/JSONObject.h"
#include "im/actor/runtime/json/JSONTokener.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/StringBuilder.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARJSONTokener () {
 @public
  jlong character_;
  jboolean eof_;
  jlong index_;
  jlong line_;
  jchar previous_;
  ARDataInput *reader_;
  jboolean usePrevious_;
}

@end

J2OBJC_FIELD_SETTER(ARJSONTokener, reader_, ARDataInput *)

static NSString *ARJSONTokener_END_VALUES_ = @",:]}/\\\"[{;=#";
J2OBJC_STATIC_FIELD_GETTER(ARJSONTokener, END_VALUES_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONTokener.java"


#line 19
@implementation ARJSONTokener


#line 35
- (instancetype)initWithARDataInput:(ARDataInput *)reader {
  ARJSONTokener_initWithARDataInput_(self, reader);
  return self;
}


#line 50
- (instancetype)initWithNSString:(NSString *)s {
  ARJSONTokener_initWithNSString_(self, s);
  return self;
}


#line 60
- (void)back {
  if (self->usePrevious_ || self->index_ <= 0) {
    @throw new_ARJSONException_initWithNSString_(@"Stepping back two steps is not supported");
  }
  self->index_ -= 1;
  self->character_ -= 1;
  self->usePrevious_ = true;
  self->eof_ = false;
}


#line 78
+ (jint)dehexcharWithChar:(jchar)c {
  return ARJSONTokener_dehexcharWithChar_(c);
}


#line 91
- (jboolean)end {
  return self->eof_ && !self->usePrevious_;
}


#line 102
- (jboolean)more {
  [self next];
  if ([self end]) {
    return false;
  }
  [self back];
  return true;
}


#line 117
- (jchar)next {
  jint c;
  if (self->usePrevious_) {
    self->usePrevious_ = false;
    c = self->previous_;
  }
  else {
    
#line 123
    @try {
      c = [((ARDataInput *) nil_chk(self->reader_)) readByte];
    }
    @catch (
#line 125
    JavaIoIOException *exception) {
      @throw new_ARJSONException_initWithJavaLangThrowable_(exception);
    }
    
#line 129
    if (c <= 0) {
      self->eof_ = true;
      c = 0;
    }
  }
  self->index_ += 1;
  if (self->previous_ == 0x000d) {
    self->line_ += 1;
    self->character_ = c == 0x000a ? 0 : 1;
  }
  else
#line 138
  if (c == 0x000a) {
    self->line_ += 1;
    self->character_ = 0;
  }
  else {
    
#line 142
    self->character_ += 1;
  }
  self->previous_ = (jchar) c;
  return self->previous_;
}


#line 157
- (jchar)nextWithChar:(jchar)c {
  jchar n = [self next];
  if (n != c) {
    @throw [self syntaxErrorWithNSString:JreStrcat("$C$CC", @"Expected '", c, @"' and instead saw '",
#line 161
    n, '\'')];
  }
  return n;
}


#line 175
- (NSString *)nextWithInt:(jint)n {
  if (n == 0) {
    return @"";
  }
  
#line 180
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:n];
  jint pos = 0;
  
#line 183
  while (pos < n) {
    *IOSCharArray_GetRef(chars, pos) = [self next];
    if ([self end]) {
      @throw [self syntaxErrorWithNSString:@"Substring bounds error"];
    }
    pos += 1;
  }
  return [NSString stringWithCharacters:chars];
}


#line 200
- (jchar)nextClean {
  for (; ; ) {
    jchar c = [self next];
    if (c == 0 || c > ' ') {
      return c;
    }
  }
}


#line 222
- (NSString *)nextStringWithChar:(jchar)quote {
  jchar c;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    c = [self next];
    switch (c) {
      case 0:
      case 0x000a:
      case 0x000d:
      @throw [self syntaxErrorWithNSString:@"Unterminated string"];
      case '\\':
      c = [self next];
      switch (c) {
        case 'b':
        (void) [sb appendWithChar:0x0008];
        break;
        case 't':
        (void) [sb appendWithChar:0x0009];
        break;
        case 'n':
        (void) [sb appendWithChar:0x000a];
        break;
        case 'f':
        (void) [sb appendWithChar:0x000c];
        break;
        case 'r':
        (void) [sb appendWithChar:0x000d];
        break;
        case 'u':
        (void) [sb appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_([self nextWithInt:4], 16)];
        break;
        case '"':
        case '\'':
        case '\\':
        case '/':
        (void) [sb appendWithChar:c];
        break;
        default:
        @throw [self syntaxErrorWithNSString:@"Illegal escape."];
      }
      break;
      default:
      if (c == quote) {
        return [sb description];
      }
      (void) [sb appendWithChar:c];
    }
  }
}


#line 280
- (NSString *)nextToWithChar:(jchar)delimiter {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    jchar c = [self next];
    if (c == delimiter || c == 0 || c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}


#line 302
- (NSString *)nextToWithNSString:(NSString *)delimiters {
  jchar c;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    c = [self next];
    if ([((NSString *) nil_chk(delimiters)) contains:JreStrcat("C", c)] || c == 0 ||
#line 308
    c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}


#line 328
- (id)nextValue {
  jchar c = [self nextClean];
  NSString *string;
  
#line 332
  switch (c) {
    case '"':
    case '\'':
    return [self nextStringWithChar:c];
    case '{':
    [self back];
    return new_ARJSONObject_initWithARJSONTokener_(self);
    case '[':
    [self back];
    return new_ARJSONArray_initWithARJSONTokener_(self);
  }
  
#line 353
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  
#line 355
  while (c >= ' ' && ![((NSString *) nil_chk(ARJSONTokener_END_VALUES_)) contains:JreStrcat("C", c)]) {
    (void) [sb appendWithChar:c];
    c = [self next];
  }
  [self back];
  
#line 361
  string = [((NSString *) nil_chk([sb description])) trim];
  if ([@"" isEqual:string]) {
    @throw [self syntaxErrorWithNSString:@"Missing value"];
  }
  return ARJSONObject_stringToValueWithNSString_(string);
}


#line 374
- (ARJSONException *)syntaxErrorWithNSString:(NSString *)message {
  return new_ARJSONException_initWithNSString_(JreStrcat("$$", message, [self description]));
}


#line 384
- (NSString *)description {
  return JreStrcat("$J$J$JC", @" at ", self->index_, @" [character ", self->character_, @" line ",
#line 386
  self->line_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARDataInput:", "JSONTokener", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "JSONTokener", NULL, 0x1, NULL, NULL },
    { "back", NULL, "V", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "dehexcharWithChar:", "dehexchar", "I", 0x9, NULL, NULL },
    { "end", NULL, "Z", 0x1, NULL, NULL },
    { "more", NULL, "Z", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "next", NULL, "C", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextWithChar:", "next", "C", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextWithInt:", "next", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextClean", NULL, "C", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextStringWithChar:", "nextString", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextToWithChar:", "nextTo", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextToWithNSString:", "nextTo", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "nextValue", NULL, "Ljava.lang.Object;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "syntaxErrorWithNSString:", "syntaxError", "Lim.actor.runtime.json.JSONException;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "character_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "eof_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "line_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "previous_", NULL, 0x2, "C", NULL, NULL, .constantValue.asLong = 0 },
    { "reader_", NULL, 0x2, "Lim.actor.runtime.bser.DataInput;", NULL, NULL, .constantValue.asLong = 0 },
    { "usePrevious_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "END_VALUES_", NULL, 0x1a, "Ljava.lang.String;", &ARJSONTokener_END_VALUES_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARJSONTokener = { 2, "JSONTokener", "im.actor.runtime.json", NULL, 0x1, 16, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARJSONTokener;
}

@end


#line 35
void ARJSONTokener_initWithARDataInput_(ARJSONTokener *self, ARDataInput *reader) {
  (void) NSObject_init(self);
  
#line 36
  self->reader_ = reader;
  self->eof_ = false;
  self->usePrevious_ = false;
  self->previous_ = 0;
  self->index_ = 0;
  self->character_ = 1;
  self->line_ = 1;
}


#line 35
ARJSONTokener *new_ARJSONTokener_initWithARDataInput_(ARDataInput *reader) {
  ARJSONTokener *self = [ARJSONTokener alloc];
  ARJSONTokener_initWithARDataInput_(self, reader);
  return self;
}


#line 50
void ARJSONTokener_initWithNSString_(ARJSONTokener *self, NSString *s) {
  (void) ARJSONTokener_initWithARDataInput_(self, new_ARDataInput_initWithByteArray_([((NSString *) nil_chk(s)) getBytes]));
}


#line 50
ARJSONTokener *new_ARJSONTokener_initWithNSString_(NSString *s) {
  ARJSONTokener *self = [ARJSONTokener alloc];
  ARJSONTokener_initWithNSString_(self, s);
  return self;
}


#line 78
jint ARJSONTokener_dehexcharWithChar_(jchar c) {
  ARJSONTokener_initialize();
  
#line 79
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
  if (c >= 'A' && c <= 'F') {
    return c - ('A' - 10);
  }
  if (c >= 'a' && c <= 'f') {
    return c - ('a' - 10);
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARJSONTokener)

#pragma clang diagnostic pop
