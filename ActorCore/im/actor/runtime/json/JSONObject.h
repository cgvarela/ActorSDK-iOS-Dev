//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONObject.java
//

#ifndef _ImActorRuntimeJsonJSONObject_H_
#define _ImActorRuntimeJsonJSONObject_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class ARJSONArray;
@class ARJSONTokener;
@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief A JSONObject is an unordered collection of name/value pairs.
 Its external
 form is a string wrapped in curly braces with colons between the names and
 values, and commas between the values and names. The internal form is an
 object having <code>get</code> and <code>opt</code> methods for accessing
 the values by name, and <code>put</code> methods for adding or replacing
 values by name. The values can be any of these types: <code>Boolean</code>,
 <code>JSONArray</code>, <code>JSONObject</code>, <code>Number</code>,
 <code>String</code>, or the <code>JSONObject.NULL</code> object. A
 JSONObject constructor can be used to convert an external form JSON text
 into an internal form whose values can be retrieved with the
 <code>get</code> and <code>opt</code> methods, or to convert values into a
 JSON text using the <code>put</code> and <code>toString</code> methods. A
 <code>get</code> method returns a value if one can be found, and throws an
 exception if one cannot be found. An <code>opt</code> method returns a
 default value instead of throwing an exception, and so is useful for
 obtaining optional values.
 <p>
 The generic <code>get()</code> and <code>opt()</code> methods return an
 object, which you can cast or query for type. There are also typed
 <code>get</code> and <code>opt</code> methods that do type checking and type
 coercion for you. The opt methods differ from the get methods in that they
 do not throw. Instead, they return a specified value, such as null.
 <p>
 The <code>put</code> methods add or replace values in an object. For
 example,
 @code

  myString = new JSONObject()
         .put(&quot;JSON&quot;, &quot;Hello, World!&quot;).toString();
  
@endcode
 produces the string <code>{"JSON": "Hello, World"}</code>.
 <p>
 The texts produced by the <code>toString</code> methods strictly conform to
 the JSON syntax rules. The constructors are more forgiving in the texts they
 will accept:
 <ul>
 <li>An extra <code>,</code>&nbsp;<small>(comma)</small> may appear just
 before the closing brace.</li>
 <li>Strings may be quoted with <code>'</code>&nbsp;<small>(single
 quote)</small>.</li>
 <li>Strings do not need to be quoted at all if they do not begin with a
 quote or single quote, and if they do not contain leading or trailing
 spaces, and if they do not contain any of these characters:
 <code>{ } [ ] / \ : , #</code> and if they do not look like numbers and
 if they are not the reserved words <code>true</code>, <code>false</code>,
 or <code>null</code>.</li>
 </ul>
 @author JSON.org
 @version 2015-05-05
 */
@interface ARJSONObject : NSObject

+ (id)NULL_;

#pragma mark Public

/*!
 @brief Construct an empty JSONObject.
 */
- (instancetype)init;

/*!
 @brief Construct a JSONObject from a subset of another JSONObject.
 An array of
 strings is used to identify the keys that should be copied. Missing keys
 are ignored.
 @param jo
 A JSONObject.
 @param names
 An array of strings.
 @throws JSONException
 @exception JSONException
 If a value is a non-finite number or if a name is
 duplicated.
 */
- (instancetype)initWithARJSONObject:(ARJSONObject *)jo
                   withNSStringArray:(IOSObjectArray *)names;

/*!
 @brief Construct a JSONObject from a JSONTokener.
 @param x
 A JSONTokener object containing the source string.
 @throws JSONException
 If there is a syntax error in the source string or a
 duplicated key.
 */
- (instancetype)initWithARJSONTokener:(ARJSONTokener *)x;

/*!
 @brief Construct a JSONObject from a Map.
 @param map
 A map object that can be used to initialize the contents of
 the JSONObject.
 @throws JSONException
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Construct a JSONObject from a source JSON text string.
 This is the most
 commonly used JSONObject constructor.
 @param source
 A string beginning with <code>{</code>&nbsp;<small>(left
 brace)</small> and ending with <code>}</code>
 &nbsp;<small>(right brace)</small>.
 @exception JSONException
 If there is a syntax error in the source string or a
 duplicated key.
 */
- (instancetype)initWithNSString:(NSString *)source;

/*!
 @brief Accumulate values under a key.
 It is similar to the put method except
 that if there is already an object stored under the key then a JSONArray
 is stored under the key to hold all of the accumulated values. If there
 is already a JSONArray, then the new value is appended to it. In
 contrast, the put method replaces the previous value.
 If only one value is accumulated that is not a JSONArray, then the result
 will be the same as using put. But if multiple values are accumulated,
 then the result will be like append.
 @param key
 A key string.
 @param value
 An object to be accumulated under the key.
 @return this.
 @throws JSONException
 If the value is an invalid number or if the key is null.
 */
- (ARJSONObject *)accumulateWithNSString:(NSString *)key
                                  withId:(id)value;

/*!
 @brief Append values to the array under a key.
 If the key does not exist in the
 JSONObject, then the key is put in the JSONObject with its value being a
 JSONArray containing the value parameter. If the key was already
 associated with a JSONArray, then the value parameter is appended to it.
 @param key
 A key string.
 @param value
 An object to be accumulated under the key.
 @return this.
 @throws JSONException
 If the key is null or if the current value associated with
 the key is not a JSONArray.
 */
- (ARJSONObject *)appendWithNSString:(NSString *)key
                              withId:(id)value;

/*!
 @brief Produce a string from a double.
 The string "null" will be returned if the
 number is not finite.
 @param d
 A double.
 @return A String.
 */
+ (NSString *)doubleToStringWithDouble:(jdouble)d;

/*!
 @brief Get the value object associated with a key.
 @param key
 A key string.
 @return The object associated with the key.
 @throws JSONException
 if the key is not found.
 */
- (id)getWithNSString:(NSString *)key;

/*!
 @brief Get the boolean value associated with a key.
 @param key
 A key string.
 @return The truth.
 @throws JSONException
 if the value is not a Boolean or the String "true" or
 "false".
 */
- (jboolean)getBooleanWithNSString:(NSString *)key;

/*!
 @brief Get the double value associated with a key.
 @param key
 A key string.
 @return The numeric value.
 @throws JSONException
 if the key is not found or if the value is not a Number
 object and cannot be converted to a number.
 */
- (jdouble)getDoubleWithNSString:(NSString *)key;

/*!
 @brief Get the int value associated with a key.
 @param key
 A key string.
 @return The integer value.
 @throws JSONException
 if the key is not found or if the value cannot be converted
 to an integer.
 */
- (jint)getIntWithNSString:(NSString *)key;

/*!
 @brief Get the JSONArray value associated with a key.
 @param key
 A key string.
 @return A JSONArray which is the value.
 @throws JSONException
 if the key is not found or if the value is not a JSONArray.
 */
- (ARJSONArray *)getJSONArrayWithNSString:(NSString *)key;

/*!
 @brief Get the JSONObject value associated with a key.
 @param key
 A key string.
 @return A JSONObject which is the value.
 @throws JSONException
 if the key is not found or if the value is not a JSONObject.
 */
- (ARJSONObject *)getJSONObjectWithNSString:(NSString *)key;

/*!
 @brief Get the long value associated with a key.
 @param key
 A key string.
 @return The long value.
 @throws JSONException
 if the key is not found or if the value cannot be converted
 to a long.
 */
- (jlong)getLongWithNSString:(NSString *)key;

/*!
 @brief Get an array of field names from a JSONObject.
 @return An array of field names, or null if there are no names.
 */
+ (IOSObjectArray *)getNamesWithARJSONObject:(ARJSONObject *)jo;

/*!
 @brief Get the string associated with a key.
 @param key
 A key string.
 @return A string which is the value.
 @throws JSONException
 if there is no string value for the key.
 */
- (NSString *)getStringWithNSString:(NSString *)key;

/*!
 @brief Determine if the JSONObject contains a specific key.
 @param key
 A key string.
 @return true if the key exists in the JSONObject.
 */
- (jboolean)hasWithNSString:(NSString *)key;

/*!
 @brief Increment a property of a JSONObject.
 If there is no such property,
 create one with a value of 1. If there is such a property, and if it is
 an Integer, Long, Double, or Float, then add one to it.
 @param key
 A key string.
 @return this.
 @throws JSONException
 If there is already a property with this name that is not an
 Integer, Long, Double, or Float.
 */
- (ARJSONObject *)incrementWithNSString:(NSString *)key;

/*!
 @brief Determine if the value associated with the key is null or if there is no
 value.
 @param key
 A key string.
 @return true if there is no value associated with the key or if the value
 is the JSONObject.NULL object.
 */
- (jboolean)isNullWithNSString:(NSString *)key;

/*!
 @brief Get an enumeration of the keys of the JSONObject.
 @return An iterator of the keys.
 */
- (id<JavaUtilIterator>)keys;

/*!
 @brief Get a set of keys of the JSONObject.
 @return A keySet.
 */
- (id<JavaUtilSet>)keySet;

/*!
 @brief Get the number of keys stored in the JSONObject.
 @return The number of keys in the JSONObject.
 */
- (jint)length;

/*!
 @brief Produce a JSONArray containing the names of the elements of this
 JSONObject.
 @return A JSONArray containing the key strings, or null if the JSONObject
 is empty.
 */
- (ARJSONArray *)names;

/*!
 @brief Produce a string from a Number.
 @param number
 A Number
 @return A String.
 @throws JSONException
 If n is a non-finite number.
 */
+ (NSString *)numberToStringWithNSNumber:(NSNumber *)number;

/*!
 @brief Get an optional value associated with a key.
 @param key
 A key string.
 @return An object which is the value, or null if there is no value.
 */
- (id)optWithNSString:(NSString *)key;

/*!
 @brief Get an optional boolean associated with a key.
 It returns false if there
 is no such key, or if the value is not Boolean.TRUE or the String "true".
 @param key
 A key string.
 @return The truth.
 */
- (jboolean)optBooleanWithNSString:(NSString *)key;

/*!
 @brief Get an optional boolean associated with a key.
 It returns the
 defaultValue if there is no such key, or if it is not a Boolean or the
 String "true" or "false" (case insensitive).
 @param key
 A key string.
 @param defaultValue
 The default.
 @return The truth.
 */
- (jboolean)optBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue;

/*!
 @brief Get an optional double associated with a key, or NaN if there is no such
 key or if its value is not a number.
 If the value is a string, an attempt
 will be made to evaluate it as a number.
 @param key
 A string which is the key.
 @return An object which is the value.
 */
- (jdouble)optDoubleWithNSString:(NSString *)key;

/*!
 @brief Get an optional double associated with a key, or the defaultValue if
 there is no such key or if its value is not a number.
 If the value is a
 string, an attempt will be made to evaluate it as a number.
 @param key
 A key string.
 @param defaultValue
 The default.
 @return An object which is the value.
 */
- (jdouble)optDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue;

/*!
 @brief Get an optional int value associated with a key, or zero if there is no
 such key or if the value is not a number.
 If the value is a string, an
 attempt will be made to evaluate it as a number.
 @param key
 A key string.
 @return An object which is the value.
 */
- (jint)optIntWithNSString:(NSString *)key;

/*!
 @brief Get an optional int value associated with a key, or the default if there
 is no such key or if the value is not a number.
 If the value is a string,
 an attempt will be made to evaluate it as a number.
 @param key
 A key string.
 @param defaultValue
 The default.
 @return An object which is the value.
 */
- (jint)optIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue;

/*!
 @brief Get an optional JSONArray associated with a key.
 It returns null if there
 is no such key, or if its value is not a JSONArray.
 @param key
 A key string.
 @return A JSONArray which is the value.
 */
- (ARJSONArray *)optJSONArrayWithNSString:(NSString *)key;

/*!
 @brief Get an optional JSONObject associated with a key.
 It returns null if
 there is no such key, or if its value is not a JSONObject.
 @param key
 A key string.
 @return A JSONObject which is the value.
 */
- (ARJSONObject *)optJSONObjectWithNSString:(NSString *)key;

/*!
 @brief Get an optional long value associated with a key, or zero if there is no
 such key or if the value is not a number.
 If the value is a string, an
 attempt will be made to evaluate it as a number.
 @param key
 A key string.
 @return An object which is the value.
 */
- (jlong)optLongWithNSString:(NSString *)key;

/*!
 @brief Get an optional long value associated with a key, or the default if there
 is no such key or if the value is not a number.
 If the value is a string,
 an attempt will be made to evaluate it as a number.
 @param key
 A key string.
 @param defaultValue
 The default.
 @return An object which is the value.
 */
- (jlong)optLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue;

/*!
 @brief Get an optional string associated with a key.
 It returns an empty string
 if there is no such key. If the value is not a string and is not null,
 then it is converted to a string.
 @param key
 A key string.
 @return A string which is the value.
 */
- (NSString *)optStringWithNSString:(NSString *)key;

/*!
 @brief Get an optional string associated with a key.
 It returns the defaultValue
 if there is no such key.
 @param key
 A key string.
 @param defaultValue
 The default.
 @return A string which is the value.
 */
- (NSString *)optStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue;

/*!
 @brief Put a key/boolean pair in the JSONObject.
 @param key
 A key string.
 @param value
 A boolean which is the value.
 @return this.
 @throws JSONException
 If the key is null.
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                      withBoolean:(jboolean)value;

/*!
 @brief Put a key/value pair in the JSONObject, where the value will be a
 JSONArray which is produced from a Collection.
 @param key
 A key string.
 @param value
 A Collection value.
 @return this.
 @throws JSONException
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
           withJavaUtilCollection:(id<JavaUtilCollection>)value;

/*!
 @brief Put a key/double pair in the JSONObject.
 @param key
 A key string.
 @param value
 A double which is the value.
 @return this.
 @throws JSONException
 If the key is null or if the number is invalid.
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                       withDouble:(jdouble)value;

/*!
 @brief Put a key/int pair in the JSONObject.
 @param key
 A key string.
 @param value
 An int which is the value.
 @return this.
 @throws JSONException
 If the key is null.
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                          withInt:(jint)value;

/*!
 @brief Put a key/long pair in the JSONObject.
 @param key
 A key string.
 @param value
 A long which is the value.
 @return this.
 @throws JSONException
 If the key is null.
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                         withLong:(jlong)value;

/*!
 @brief Put a key/value pair in the JSONObject, where the value will be a
 JSONObject which is produced from a Map.
 @param key
 A key string.
 @param value
 A Map value.
 @return this.
 @throws JSONException
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)value;

/*!
 @brief Put a key/value pair in the JSONObject.
 If the value is null, then the
 key will be removed from the JSONObject if it is present.
 @param key
 A key string.
 @param value
 An object which is the value. It should be of one of these
 types: Boolean, Double, Integer, JSONArray, JSONObject, Long,
 String, or the JSONObject.NULL object.
 @return this.
 @throws JSONException
 If the value is non-finite number or if the key is null.
 */
- (ARJSONObject *)putWithNSString:(NSString *)key
                           withId:(id)value;

/*!
 @brief Put a key/value pair in the JSONObject, but only if the key and the value
 are both non-null, and only if there is not already a member with that
 name.
 @param key string
 @param value object
 @return this.
 @throws JSONException
 if the key is a duplicate
 */
- (ARJSONObject *)putOnceWithNSString:(NSString *)key
                               withId:(id)value;

/*!
 @brief Put a key/value pair in the JSONObject, but only if the key and the value
 are both non-null.
 @param key
 A key string.
 @param value
 An object which is the value. It should be of one of these
 types: Boolean, Double, Integer, JSONArray, JSONObject, Long,
 String, or the JSONObject.NULL object.
 @return this.
 @throws JSONException
 If the value is a non-finite number.
 */
- (ARJSONObject *)putOptWithNSString:(NSString *)key
                              withId:(id)value;

/*!
 @brief Remove a name and its value, if present.
 @param key
 The name to be removed.
 @return The value that was associated with the name, or null if there was
 no value.
 */
- (id)removeWithNSString:(NSString *)key;

/*!
 @brief Determine if two JSONObjects are similar.
 They must contain the same set of names which must be associated with
 similar values.
 @param other The other JSONObject
 @return true if they are equal
 */
- (jboolean)similarWithId:(id)other;

/*!
 @brief Try to convert a string into a number, boolean, or null.
 If the string
 can't be converted, return the string.
 @param string
 A String.
 @return A simple JSON value.
 */
+ (id)stringToValueWithNSString:(NSString *)string;

/*!
 @brief Throw an exception if the object is a NaN or infinite number.
 @param o
 The object to test.
 @throws JSONException
 If o is a non-finite number.
 */
+ (void)testValidityWithId:(id)o;

/*!
 @brief Produce a JSONArray containing the values of the members of this
 JSONObject.
 @param names
 A JSONArray containing a list of key strings. This determines
 the sequence of the values in the result.
 @return A JSONArray of values.
 @throws JSONException
 If any of the values are non-finite numbers.
 */
- (ARJSONArray *)toJSONArrayWithARJSONArray:(ARJSONArray *)names;

@end

J2OBJC_STATIC_INIT(ARJSONObject)

FOUNDATION_EXPORT id ARJSONObject_NULL__;
J2OBJC_STATIC_FIELD_GETTER(ARJSONObject, NULL__, id)

FOUNDATION_EXPORT void ARJSONObject_init(ARJSONObject *self);

FOUNDATION_EXPORT ARJSONObject *new_ARJSONObject_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ARJSONObject_initWithARJSONObject_withNSStringArray_(ARJSONObject *self, ARJSONObject *jo, IOSObjectArray *names);

FOUNDATION_EXPORT ARJSONObject *new_ARJSONObject_initWithARJSONObject_withNSStringArray_(ARJSONObject *jo, IOSObjectArray *names) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ARJSONObject_initWithARJSONTokener_(ARJSONObject *self, ARJSONTokener *x);

FOUNDATION_EXPORT ARJSONObject *new_ARJSONObject_initWithARJSONTokener_(ARJSONTokener *x) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ARJSONObject_initWithJavaUtilMap_(ARJSONObject *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT ARJSONObject *new_ARJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ARJSONObject_initWithNSString_(ARJSONObject *self, NSString *source);

FOUNDATION_EXPORT ARJSONObject *new_ARJSONObject_initWithNSString_(NSString *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NSString *ARJSONObject_doubleToStringWithDouble_(jdouble d);

FOUNDATION_EXPORT IOSObjectArray *ARJSONObject_getNamesWithARJSONObject_(ARJSONObject *jo);

FOUNDATION_EXPORT NSString *ARJSONObject_numberToStringWithNSNumber_(NSNumber *number);

FOUNDATION_EXPORT id ARJSONObject_stringToValueWithNSString_(NSString *string);

FOUNDATION_EXPORT void ARJSONObject_testValidityWithId_(id o);

J2OBJC_TYPE_LITERAL_HEADER(ARJSONObject)

@compatibility_alias ImActorRuntimeJsonJSONObject ARJSONObject;


#pragma clang diagnostic pop
#endif // _ImActorRuntimeJsonJSONObject_H_
