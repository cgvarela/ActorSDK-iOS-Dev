//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONObject.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/json/JSONArray.h"
#include "im/actor/runtime/json/JSONException.h"
#include "im/actor/runtime/json/JSONObject.h"
#include "im/actor/runtime/json/JSONTokener.h"
#include <j2objc/java/lang/Boolean.h>
#include <j2objc/java/lang/Double.h>
#include <j2objc/java/lang/Exception.h>
#include <j2objc/java/lang/Float.h>
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/lang/NullPointerException.h>
#include <j2objc/java/lang/Throwable.h>
#include <j2objc/java/util/Collection.h>
#include <j2objc/java/util/HashMap.h>
#include <j2objc/java/util/Iterator.h>
#include <j2objc/java/util/Map.h>
#include <j2objc/java/util/Set.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARJSONObject () {
 @public
  /*!
   @brief The map where the JSONObject's properties are kept.
   */
  id<JavaUtilMap> map_;
}

@end

J2OBJC_FIELD_SETTER(ARJSONObject, map_, id<JavaUtilMap>)

/*!
 @brief JSONObject.NULL is equivalent to the value that JavaScript calls null,
 whilst Java's null is equivalent to the value that JavaScript calls
 undefined.
 */
@interface ARJSONObject_Null : NSObject

/*!
 @brief A Null object is equal to the null value and to itself.
 @param object
 An object to test for nullness.
 @return true if the object parameter is the JSONObject.NULL object or
 null.
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Get the "null" string value.
 @return The string "null".
 */
- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ARJSONObject_Null)

__attribute__((unused)) static void ARJSONObject_Null_init(ARJSONObject_Null *self);

__attribute__((unused)) static ARJSONObject_Null *new_ARJSONObject_Null_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARJSONObject_Null)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONObject.java"

J2OBJC_INITIALIZED_DEFN(ARJSONObject)

id ARJSONObject_NULL__;


#line 67
@implementation ARJSONObject

+ (id)NULL_ {
  return ARJSONObject_NULL__;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 114
- (instancetype)init {
  ARJSONObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 132
- (instancetype)initWithARJSONObject:(ARJSONObject *)jo
                   withNSStringArray:(IOSObjectArray *)names {
  ARJSONObject_initWithARJSONObject_withNSStringArray_(self, jo, names);
  return self;
}


#line 151
- (instancetype)initWithARJSONTokener:(ARJSONTokener *)x {
  ARJSONObject_initWithARJSONTokener_(self, x);
  return self;
}


#line 205
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  ARJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}


#line 231
- (instancetype)initWithNSString:(NSString *)source {
  ARJSONObject_initWithNSString_(self, source);
  return self;
}


#line 254
- (ARJSONObject *)accumulateWithNSString:(NSString *)key
                                  withId:(id)value {
  ARJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    (void) [self putWithNSString:key withId:
#line 259
    [value isKindOfClass:[ARJSONArray class]] ? [new_ARJSONArray_init() putWithId:value] :
#line 260
    value];
  }
  else
#line 261
  if ([object isKindOfClass:[ARJSONArray class]]) {
    (void) [((ARJSONArray *) check_class_cast(object, [ARJSONArray class])) putWithId:value];
  }
  else {
    
#line 264
    (void) [self putWithNSString:key withId:[((ARJSONArray *) nil_chk([new_ARJSONArray_init() putWithId:object])) putWithId:value]];
  }
  return self;
}


#line 284
- (ARJSONObject *)appendWithNSString:(NSString *)key
                              withId:(id)value {
  ARJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    (void) [self putWithNSString:key withId:[new_ARJSONArray_init() putWithId:value]];
  }
  else
#line 289
  if ([object isKindOfClass:[ARJSONArray class]]) {
    (void) [self putWithNSString:key withId:[((ARJSONArray *) check_class_cast(object, [ARJSONArray class])) putWithId:value]];
  }
  else {
    
#line 292
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a JSONArray."));
  }
  
#line 295
  return self;
}

+ (NSString *)doubleToStringWithDouble:(jdouble)d {
  return ARJSONObject_doubleToStringWithDouble_(d);
}


#line 335
- (id)getWithNSString:(NSString *)key {
  if (key == nil) {
    @throw new_ARJSONException_initWithNSString_(@"Null key.");
  }
  id object = [self optWithNSString:key];
  if (object == nil) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] not found."));
  }
  return object;
}


#line 356
- (jboolean)getBooleanWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([nil_chk(object) isEqual:JreLoadStatic(JavaLangBoolean, FALSE__)] ||
#line 359
  ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:
#line 360
  @"false"])) {
    return false;
  }
  else
#line 362
  if ([object isEqual:JreLoadStatic(JavaLangBoolean, TRUE__)] ||
#line 363
  ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:
#line 364
  @"true"])) {
    return true;
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a Boolean."));
}


#line 381
- (jdouble)getDoubleWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_(
#line 385
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 386
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a number."));
  }
}


#line 402
- (jint)getIntWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_(
#line 406
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 407
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not an int."));
  }
}


#line 422
- (ARJSONArray *)getJSONArrayWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[ARJSONArray class]]) {
    return (ARJSONArray *) check_class_cast(object, [ARJSONArray class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a JSONArray."));
}


#line 440
- (ARJSONObject *)getJSONObjectWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[ARJSONObject class]]) {
    return (ARJSONObject *) check_class_cast(object, [ARJSONObject class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a JSONObject."));
}


#line 459
- (jlong)getLongWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_(
#line 463
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 464
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a long."));
  }
}


#line 475
+ (IOSObjectArray *)getNamesWithARJSONObject:(ARJSONObject *)jo {
  return ARJSONObject_getNamesWithARJSONObject_(jo);
}


#line 499
- (NSString *)getStringWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(object, [NSString class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] not a string."));
}


#line 514
- (jboolean)hasWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) containsKeyWithId:key];
}


#line 530
- (ARJSONObject *)incrementWithNSString:(NSString *)key {
  id value = [self optWithNSString:key];
  if (value == nil) {
    (void) [self putWithNSString:key withInt:1];
  }
  else
#line 534
  if ([value isKindOfClass:[JavaLangInteger class]]) {
    (void) [self putWithNSString:key withInt:[(JavaLangInteger *) check_class_cast(value, [JavaLangInteger class]) intValue] + 1];
  }
  else
#line 536
  if ([value isKindOfClass:[JavaLangLong class]]) {
    (void) [self putWithNSString:key withLong:[(JavaLangLong *) check_class_cast(value, [JavaLangLong class]) longLongValue] + 1];
  }
  else
#line 538
  if ([value isKindOfClass:[JavaLangDouble class]]) {
    (void) [self putWithNSString:key withDouble:[(JavaLangDouble *) check_class_cast(value, [JavaLangDouble class]) doubleValue] + 1];
  }
  else
#line 540
  if ([value isKindOfClass:[JavaLangFloat class]]) {
    (void) [self putWithNSString:key withDouble:[(JavaLangFloat *) check_class_cast(value, [JavaLangFloat class]) floatValue] + 1];
  }
  else {
    
#line 543
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$$$", @"Unable to increment [", key, @"]."));
  }
  return self;
}


#line 557
- (jboolean)isNullWithNSString:(NSString *)key {
  return [nil_chk(ARJSONObject_NULL__) isEqual:[self optWithNSString:key]];
}


#line 566
- (id<JavaUtilIterator>)keys {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}


#line 575
- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
}


#line 584
- (jint)length {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) size];
}


#line 595
- (ARJSONArray *)names {
  ARJSONArray *ja = new_ARJSONArray_init();
  id<JavaUtilIterator> keys = [self keys];
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    (void) [ja putWithId:[keys next]];
  }
  return [ja length] == 0 ? nil : ja;
}


#line 613
+ (NSString *)numberToStringWithNSNumber:(NSNumber *)number {
  return ARJSONObject_numberToStringWithNSNumber_(number);
}


#line 641
- (id)optWithNSString:(NSString *)key {
  return key == nil ? nil : [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key];
}


#line 653
- (jboolean)optBooleanWithNSString:(NSString *)key {
  return [self optBooleanWithNSString:key withBoolean:false];
}


#line 668
- (jboolean)optBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithNSString:key];
  }
  @catch (
#line 671
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 685
- (jdouble)optDoubleWithNSString:(NSString *)key {
  return [self optDoubleWithNSString:key withDouble:JavaLangDouble_NaN];
}


#line 700
- (jdouble)optDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithNSString:key];
  }
  @catch (
#line 703
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 717
- (jint)optIntWithNSString:(NSString *)key {
  return [self optIntWithNSString:key withInt:0];
}


#line 732
- (jint)optIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  @try {
    return [self getIntWithNSString:key];
  }
  @catch (
#line 735
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 748
- (ARJSONArray *)optJSONArrayWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  return [o isKindOfClass:[ARJSONArray class]] ? (ARJSONArray *) check_class_cast(o, [ARJSONArray class]) : nil;
}


#line 761
- (ARJSONObject *)optJSONObjectWithNSString:(NSString *)key {
  id object = [self optWithNSString:key];
  return [object isKindOfClass:[ARJSONObject class]] ? (ARJSONObject *) check_class_cast(object, [ARJSONObject class]) : nil;
}


#line 775
- (jlong)optLongWithNSString:(NSString *)key {
  return [self optLongWithNSString:key withLong:0];
}


#line 790
- (jlong)optLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithNSString:key];
  }
  @catch (
#line 793
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 807
- (NSString *)optStringWithNSString:(NSString *)key {
  return [self optStringWithNSString:key withNSString:@""];
}


#line 821
- (NSString *)optStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id object = [self optWithNSString:key];
  return [nil_chk(ARJSONObject_NULL__) isEqual:object] ? defaultValue : [nil_chk(object) description];
}


#line 837
- (ARJSONObject *)putWithNSString:(NSString *)key
                      withBoolean:(jboolean)value {
  (void) [self putWithNSString:key withId:value ? JreLoadStatic(JavaLangBoolean, TRUE__) : JreLoadStatic(JavaLangBoolean, FALSE__)];
  return self;
}


#line 853
- (ARJSONObject *)putWithNSString:(NSString *)key
           withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithNSString:key withId:new_ARJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}


#line 869
- (ARJSONObject *)putWithNSString:(NSString *)key
                       withDouble:(jdouble)value {
  (void) [self putWithNSString:key withId:new_JavaLangDouble_initWithDouble_(value)];
  return self;
}


#line 885
- (ARJSONObject *)putWithNSString:(NSString *)key
                          withInt:(jint)value {
  (void) [self putWithNSString:key withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}


#line 901
- (ARJSONObject *)putWithNSString:(NSString *)key
                         withLong:(jlong)value {
  (void) [self putWithNSString:key withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}


#line 917
- (ARJSONObject *)putWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithNSString:key withId:new_ARJSONObject_initWithJavaUtilMap_(value)];
  return self;
}


#line 936
- (ARJSONObject *)putWithNSString:(NSString *)key
                           withId:(id)value {
  if (key == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Null key.");
  }
  if (value != nil) {
    ARJSONObject_testValidityWithId_(value);
    (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:value];
  }
  else {
    
#line 944
    (void) [self removeWithNSString:key];
  }
  return self;
}


#line 960
- (ARJSONObject *)putOnceWithNSString:(NSString *)key
                               withId:(id)value {
  if (key != nil && value != nil) {
    if ([self optWithNSString:key] != nil) {
      @throw new_ARJSONException_initWithNSString_(JreStrcat("$$C", @"Duplicate key \"", key, '"'));
    }
    (void) [self putWithNSString:key withId:value];
  }
  return self;
}


#line 984
- (ARJSONObject *)putOptWithNSString:(NSString *)key
                              withId:(id)value {
  if (key != nil && value != nil) {
    (void) [self putWithNSString:key withId:value];
  }
  return self;
}


#line 999
- (id)removeWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:key];
}


#line 1011
- (jboolean)similarWithId:(id)other {
  @try {
    if (!([other isKindOfClass:[ARJSONObject class]])) {
      return false;
    }
    id<JavaUtilSet> set = [self keySet];
    if (![((id<JavaUtilSet>) nil_chk(set)) isEqual:[((ARJSONObject *) nil_chk(((ARJSONObject *) check_class_cast(other, [ARJSONObject class])))) keySet]]) {
      return false;
    }
    id<JavaUtilIterator> iterator = [set iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      NSString *name = [iterator next];
      id valueThis = [self getWithNSString:name];
      id valueOther = [((ARJSONObject *) nil_chk(((ARJSONObject *) check_class_cast(other, [ARJSONObject class])))) getWithNSString:name];
      if ([valueThis isKindOfClass:[ARJSONObject class]]) {
        if (![((ARJSONObject *) nil_chk(((ARJSONObject *) check_class_cast(valueThis, [ARJSONObject class])))) similarWithId:valueOther]) {
          return false;
        }
      }
      else
#line 1029
      if ([valueThis isKindOfClass:[ARJSONArray class]]) {
        if (![((ARJSONArray *) nil_chk(((ARJSONArray *) check_class_cast(valueThis, [ARJSONArray class])))) similarWithId:valueOther]) {
          return false;
        }
      }
      else
#line 1033
      if (![nil_chk(valueThis) isEqual:valueOther]) {
        return false;
      }
    }
    return true;
  }
  @catch (
#line 1038
  JavaLangThrowable *exception) {
    return false;
  }
}


#line 1051
+ (id)stringToValueWithNSString:(NSString *)string {
  return ARJSONObject_stringToValueWithNSString_(string);
}


#line 1104
+ (void)testValidityWithId:(id)o {
  ARJSONObject_testValidityWithId_(o);
}


#line 1131
- (ARJSONArray *)toJSONArrayWithARJSONArray:(ARJSONArray *)names {
  if (names == nil || [names length] == 0) {
    return nil;
  }
  ARJSONArray *ja = new_ARJSONArray_init();
  for (jint i = 0; i < [((ARJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [ja putWithId:[self optWithNSString:[names getStringWithInt:i]]];
  }
  return ja;
}

+ (void)initialize {
  if (self == [ARJSONObject class]) {
    ARJSONObject_NULL__ = new_ARJSONObject_Null_init();
    J2OBJC_SET_INITIALIZED(ARJSONObject)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithARJSONObject:withNSStringArray:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithARJSONTokener:", "JSONObject", NULL, 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "initWithJavaUtilMap:", "JSONObject", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "JSONObject", NULL, 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "accumulateWithNSString:withId:", "accumulate", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "appendWithNSString:withId:", "append", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "doubleToStringWithDouble:", "doubleToString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getWithNSString:", "get", "Ljava.lang.Object;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getBooleanWithNSString:", "getBoolean", "Z", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getDoubleWithNSString:", "getDouble", "D", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getJSONArrayWithNSString:", "getJSONArray", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getJSONObjectWithNSString:", "getJSONObject", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getLongWithNSString:", "getLong", "J", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getNamesWithARJSONObject:", "getNames", "[Ljava.lang.String;", 0x9, NULL, NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "hasWithNSString:", "has", "Z", 0x1, NULL, NULL },
    { "incrementWithNSString:", "increment", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "isNullWithNSString:", "isNull", "Z", 0x1, NULL, NULL },
    { "keys", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "names", NULL, "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "numberToStringWithNSNumber:", "numberToString", "Ljava.lang.String;", 0x9, "Lim.actor.runtime.json.JSONException;", NULL },
    { "optWithNSString:", "opt", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "optBooleanWithNSString:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optBooleanWithNSString:withBoolean:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optDoubleWithNSString:", "optDouble", "D", 0x1, NULL, NULL },
    { "optDoubleWithNSString:withDouble:", "optDouble", "D", 0x1, NULL, NULL },
    { "optIntWithNSString:", "optInt", "I", 0x1, NULL, NULL },
    { "optIntWithNSString:withInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optJSONArrayWithNSString:", "optJSONArray", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "optJSONObjectWithNSString:", "optJSONObject", "Lim.actor.runtime.json.JSONObject;", 0x1, NULL, NULL },
    { "optLongWithNSString:", "optLong", "J", 0x1, NULL, NULL },
    { "optLongWithNSString:withLong:", "optLong", "J", 0x1, NULL, NULL },
    { "optStringWithNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "optStringWithNSString:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "putWithNSString:withBoolean:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withJavaUtilCollection:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withDouble:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withInt:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withLong:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withJavaUtilMap:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithNSString:withId:", "put", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putOnceWithNSString:withId:", "putOnce", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putOptWithNSString:withId:", "putOpt", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "removeWithNSString:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "similarWithId:", "similar", "Z", 0x1, NULL, NULL },
    { "stringToValueWithNSString:", "stringToValue", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "testValidityWithId:", "testValidity", "V", 0x9, "Lim.actor.runtime.json.JSONException;", NULL },
    { "toJSONArrayWithARJSONArray:", "toJSONArray", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "map_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "NULL__", "NULL", 0x19, "Ljava.lang.Object;", &ARJSONObject_NULL__, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.json.JSONObject$Null;"};
  static const J2ObjcClassInfo _ARJSONObject = { 2, "JSONObject", "im.actor.runtime.json", NULL, 0x1, 52, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ARJSONObject;
}

@end


#line 114
void ARJSONObject_init(ARJSONObject *self) {
  (void) NSObject_init(self);
  
#line 115
  self->map_ = new_JavaUtilHashMap_init();
}


#line 114
ARJSONObject *new_ARJSONObject_init() {
  ARJSONObject *self = [ARJSONObject alloc];
  ARJSONObject_init(self);
  return self;
}


#line 132
void ARJSONObject_initWithARJSONObject_withNSStringArray_(ARJSONObject *self, ARJSONObject *jo, IOSObjectArray *names) {
  (void) ARJSONObject_init(self);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i += 1) {
    @try {
      (void) [self putOnceWithNSString:IOSObjectArray_Get(names, i) withId:[((ARJSONObject *) nil_chk(jo)) optWithNSString:IOSObjectArray_Get(names, i)]];
    }
    @catch (
#line 137
    JavaLangException *ignore) {
    }
  }
}


#line 132
ARJSONObject *new_ARJSONObject_initWithARJSONObject_withNSStringArray_(ARJSONObject *jo, IOSObjectArray *names) {
  ARJSONObject *self = [ARJSONObject alloc];
  ARJSONObject_initWithARJSONObject_withNSStringArray_(self, jo, names);
  return self;
}


#line 151
void ARJSONObject_initWithARJSONTokener_(ARJSONObject *self, ARJSONTokener *x) {
  (void) ARJSONObject_init(self);
  jchar c;
  NSString *key;
  
#line 156
  if ([((ARJSONTokener *) nil_chk(x)) nextClean] != '{') {
    @throw [x syntaxErrorWithNSString:@"A JSONObject text must begin with '{'"];
  }
  for (; ; ) {
    c = [x nextClean];
    switch (c) {
      case 0:
      @throw [x syntaxErrorWithNSString:@"A JSONObject text must end with '}'"];
      case '}':
      return;
      default:
      [x back];
      key = [nil_chk([x nextValue]) description];
    }
    
#line 173
    c = [x nextClean];
    if (c != ':') {
      @throw [x syntaxErrorWithNSString:@"Expected a ':' after a key"];
    }
    (void) [self putOnceWithNSString:key withId:[x nextValue]];
    
#line 181
    switch ([x nextClean]) {
      case ';':
      case ',':
      if ([x nextClean] == '}') {
        return;
      }
      [x back];
      break;
      case '}':
      return;
      default:
      @throw [x syntaxErrorWithNSString:@"Expected a ',' or '}'"];
    }
  }
}


#line 151
ARJSONObject *new_ARJSONObject_initWithARJSONTokener_(ARJSONTokener *x) {
  ARJSONObject *self = [ARJSONObject alloc];
  ARJSONObject_initWithARJSONTokener_(self, x);
  return self;
}


#line 205
void ARJSONObject_initWithJavaUtilMap_(ARJSONObject *self, id<JavaUtilMap> map) {
  (void) NSObject_init(self);
  
#line 206
  self->map_ = new_JavaUtilHashMap_init();
  if (map != nil) {
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = [i next];
      id value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if (value != nil) {
        (void) [self->map_ putWithId:[entry_ getKey] withId:value];
      }
    }
  }
}


#line 205
ARJSONObject *new_ARJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  ARJSONObject *self = [ARJSONObject alloc];
  ARJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}


#line 231
void ARJSONObject_initWithNSString_(ARJSONObject *self, NSString *source) {
  (void) ARJSONObject_initWithARJSONTokener_(self, new_ARJSONTokener_initWithNSString_(source));
}


#line 231
ARJSONObject *new_ARJSONObject_initWithNSString_(NSString *source) {
  ARJSONObject *self = [ARJSONObject alloc];
  ARJSONObject_initWithNSString_(self, source);
  return self;
}


#line 306
NSString *ARJSONObject_doubleToStringWithDouble_(jdouble d) {
  ARJSONObject_initialize();
  
#line 307
  if (JavaLangDouble_isInfiniteWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(d)) {
    return @"null";
  }
  
#line 313
  NSString *string = JavaLangDouble_toStringWithDouble_(d);
  if ([((NSString *) nil_chk(string)) contains:@""] && ![string contains:@"e"] &&
#line 315
  ![string contains:@"E"]) {
    while ([string hasSuffix:@"0"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([((NSString *) nil_chk(string)) hasSuffix:@""]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}


#line 475
IOSObjectArray *ARJSONObject_getNamesWithARJSONObject_(ARJSONObject *jo) {
  ARJSONObject_initialize();
  
#line 476
  jint length = [((ARJSONObject *) nil_chk(jo)) length];
  if (length == 0) {
    return nil;
  }
  id<JavaUtilIterator> iterator = [jo keys];
  IOSObjectArray *names = [IOSObjectArray newArrayWithLength:length type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    (void) IOSObjectArray_Set(names, i, [iterator next]);
    i += 1;
  }
  return names;
}


#line 613
NSString *ARJSONObject_numberToStringWithNSNumber_(NSNumber *number) {
  ARJSONObject_initialize();
  
#line 614
  if (number == nil) {
    @throw new_ARJSONException_initWithNSString_(@"Null pointer");
  }
  ARJSONObject_testValidityWithId_(number);
  
#line 621
  NSString *string = [((NSNumber *) nil_chk(number)) description];
  if ([((NSString *) nil_chk(string)) contains:@""] && ![string contains:@"e"] &&
#line 623
  ![string contains:@"E"]) {
    while ([string hasSuffix:@"0"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([((NSString *) nil_chk(string)) hasSuffix:@""]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}


#line 1051
id ARJSONObject_stringToValueWithNSString_(NSString *string) {
  ARJSONObject_initialize();
  
#line 1052
  JavaLangDouble *d;
  if ([((NSString *) nil_chk(string)) isEqual:@""]) {
    return string;
  }
  if ([string equalsIgnoreCase:@"true"]) {
    return JreLoadStatic(JavaLangBoolean, TRUE__);
  }
  if ([string equalsIgnoreCase:@"false"]) {
    return JreLoadStatic(JavaLangBoolean, FALSE__);
  }
  if ([string equalsIgnoreCase:@"null"]) {
    return ARJSONObject_NULL__;
  }
  
#line 1071
  jchar b = [string charAtWithInt:0];
  if ((b >= '0' && b <= '9') || b == '-') {
    @try {
      if ([string contains:@"."] || [string contains:@"e"] ||
#line 1075
      [string contains:@"E"]) {
        d = JavaLangDouble_valueOfWithNSString_(string);
        if (![d isInfinite] && ![d isNaN]) {
          return d;
        }
      }
      else {
        
#line 1081
        JavaLangLong *myLong = new_JavaLangLong_initWithNSString_(string);
        if ([string isEqual:[myLong description]]) {
          if ([myLong longLongValue] == [myLong intValue]) {
            return JavaLangInteger_valueOfWithInt_([myLong intValue]);
          }
          else {
            
#line 1086
            return myLong;
          }
        }
      }
    }
    @catch (
#line 1090
    JavaLangException *ignore) {
    }
  }
  return string;
}


#line 1104
void ARJSONObject_testValidityWithId_(id o) {
  ARJSONObject_initialize();
  
#line 1105
  if (o != nil) {
    if ([o isKindOfClass:[JavaLangDouble class]]) {
      if ([((JavaLangDouble *) check_class_cast(o, [JavaLangDouble class])) isInfinite] || [((JavaLangDouble *) check_class_cast(o, [JavaLangDouble class])) isNaN]) {
        @throw new_ARJSONException_initWithNSString_(
#line 1109
        @"JSON does not allow non-finite numbers.");
      }
    }
    else
#line 1111
    if ([o isKindOfClass:[JavaLangFloat class]]) {
      if ([((JavaLangFloat *) check_class_cast(o, [JavaLangFloat class])) isInfinite] || [((JavaLangFloat *) check_class_cast(o, [JavaLangFloat class])) isNaN]) {
        @throw new_ARJSONException_initWithNSString_(
#line 1114
        @"JSON does not allow non-finite numbers.");
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARJSONObject)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONObject.java"


#line 73
@implementation ARJSONObject_Null


#line 84
- (jboolean)isEqual:(id)object {
  return object == nil || object == self;
}


#line 93
- (NSString *)description {
  return @"null";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARJSONObject_Null_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ARJSONObject_Null = { 2, "Null", "im.actor.runtime.json", "JSONObject", 0x1a, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARJSONObject_Null;
}

@end

void ARJSONObject_Null_init(ARJSONObject_Null *self) {
  (void) NSObject_init(self);
}

ARJSONObject_Null *new_ARJSONObject_Null_init() {
  ARJSONObject_Null *self = [ARJSONObject_Null alloc];
  ARJSONObject_Null_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARJSONObject_Null)

#pragma clang diagnostic pop
