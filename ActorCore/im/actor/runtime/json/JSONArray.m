//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONArray.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/json/JSONArray.h"
#include "im/actor/runtime/json/JSONException.h"
#include "im/actor/runtime/json/JSONObject.h"
#include "im/actor/runtime/json/JSONTokener.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARJSONArray () {
 @public
  /*!
   @brief The arrayList where the JSONArray's properties are kept.
   */
  JavaUtilArrayList *myArrayList_;
}

@end

J2OBJC_FIELD_SETTER(ARJSONArray, myArrayList_, JavaUtilArrayList *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/json/JSONArray.java"


#line 56
@implementation ARJSONArray

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 66
- (instancetype)init {
  ARJSONArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 78
- (instancetype)initWithARJSONTokener:(ARJSONTokener *)x {
  ARJSONArray_initWithARJSONTokener_(self, x);
  return self;
}


#line 119
- (instancetype)initWithNSString:(NSString *)source {
  ARJSONArray_initWithNSString_(self, source);
  return self;
}


#line 129
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  ARJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}


#line 148
- (id)getWithInt:(jint)index {
  id object = [self optWithInt:index];
  if (object == nil) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  return object;
}


#line 167
- (jboolean)getBooleanWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([nil_chk(object) isEqual:JreLoadStatic(JavaLangBoolean, FALSE__)] ||
#line 170
  ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:
#line 171
  @"false"])) {
    return false;
  }
  else
#line 173
  if ([object isEqual:JreLoadStatic(JavaLangBoolean, TRUE__)] ||
#line 174
  ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:
#line 175
  @"true"])) {
    return true;
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a boolean."));
}


#line 191
- (jdouble)getDoubleWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_(
#line 195
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 196
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}


#line 210
- (jint)getIntWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_(
#line 214
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 215
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}


#line 230
- (ARJSONArray *)getJSONArrayWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[ARJSONArray class]]) {
    return (ARJSONArray *) check_class_cast(object, [ARJSONArray class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONArray."));
}


#line 248
- (ARJSONObject *)getJSONObjectWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[ARJSONObject class]]) {
    return (ARJSONObject *) check_class_cast(object, [ARJSONObject class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONObject."));
}


#line 266
- (jlong)getLongWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_(
#line 270
    (NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (
#line 271
  JavaLangException *e) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}


#line 285
- (NSString *)getStringWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(object, [NSString class]);
  }
  @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not a string."));
}


#line 300
- (jboolean)isNullWithInt:(jint)index {
  return [nil_chk(JreLoadStatic(ARJSONObject, NULL__)) isEqual:[self optWithInt:index]];
}


#line 309
- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}


#line 320
- (id)optWithInt:(jint)index {
  return (index < 0 || index >= [self length]) ? nil : [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:
#line 322
  index];
}


#line 334
- (jboolean)optBooleanWithInt:(jint)index {
  return [self optBooleanWithInt:index withBoolean:false];
}


#line 349
- (jboolean)optBooleanWithInt:(jint)index
                  withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (
#line 352
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 366
- (jdouble)optDoubleWithInt:(jint)index {
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}


#line 381
- (jdouble)optDoubleWithInt:(jint)index
                 withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithInt:index];
  }
  @catch (
#line 384
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 398
- (jint)optIntWithInt:(jint)index {
  return [self optIntWithInt:index withInt:0];
}


#line 413
- (jint)optIntWithInt:(jint)index
              withInt:(jint)defaultValue {
  @try {
    return [self getIntWithInt:index];
  }
  @catch (
#line 416
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 429
- (ARJSONArray *)optJSONArrayWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[ARJSONArray class]] ? (ARJSONArray *) check_class_cast(o, [ARJSONArray class]) : nil;
}


#line 443
- (ARJSONObject *)optJSONObjectWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[ARJSONObject class]] ? (ARJSONObject *) check_class_cast(o, [ARJSONObject class]) : nil;
}


#line 457
- (jlong)optLongWithInt:(jint)index {
  return [self optLongWithInt:index withLong:0];
}


#line 472
- (jlong)optLongWithInt:(jint)index
               withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithInt:index];
  }
  @catch (
#line 475
  JavaLangException *e) {
    return defaultValue;
  }
}


#line 489
- (NSString *)optStringWithInt:(jint)index {
  return [self optStringWithInt:index withNSString:@""];
}


#line 503
- (NSString *)optStringWithInt:(jint)index
                  withNSString:(NSString *)defaultValue {
  id object = [self optWithInt:index];
  return [nil_chk(JreLoadStatic(ARJSONObject, NULL__)) isEqual:object] ? defaultValue : [nil_chk(object) description];
}


#line 516
- (ARJSONArray *)putWithBoolean:(jboolean)value {
  (void) [self putWithId:value ? JreLoadStatic(JavaLangBoolean, TRUE__) : JreLoadStatic(JavaLangBoolean, FALSE__)];
  return self;
}


#line 529
- (ARJSONArray *)putWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithId:new_ARJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}


#line 543
- (ARJSONArray *)putWithDouble:(jdouble)value {
  JavaLangDouble *d = new_JavaLangDouble_initWithDouble_(value);
  ARJSONObject_testValidityWithId_(d);
  (void) [self putWithId:d];
  return self;
}


#line 557
- (ARJSONArray *)putWithInt:(jint)value {
  (void) [self putWithId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}


#line 569
- (ARJSONArray *)putWithLong:(jlong)value {
  (void) [self putWithId:new_JavaLangLong_initWithLong_(value)];
  return self;
}


#line 582
- (ARJSONArray *)putWithJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithId:new_ARJSONObject_initWithJavaUtilMap_(value)];
  return self;
}


#line 596
- (ARJSONArray *)putWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}


#line 614
- (ARJSONArray *)putWithInt:(jint)index
                withBoolean:(jboolean)value {
  (void) [self putWithInt:index withId:value ? JreLoadStatic(JavaLangBoolean, TRUE__) : JreLoadStatic(JavaLangBoolean, FALSE__)];
  return self;
}


#line 631
- (ARJSONArray *)putWithInt:(jint)index
     withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithInt:index withId:new_ARJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}


#line 649
- (ARJSONArray *)putWithInt:(jint)index
                 withDouble:(jdouble)value {
  (void) [self putWithInt:index withId:new_JavaLangDouble_initWithDouble_(value)];
  return self;
}


#line 667
- (ARJSONArray *)putWithInt:(jint)index
                    withInt:(jint)value {
  (void) [self putWithInt:index withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}


#line 685
- (ARJSONArray *)putWithInt:(jint)index
                   withLong:(jlong)value {
  (void) [self putWithInt:index withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}


#line 703
- (ARJSONArray *)putWithInt:(jint)index
            withJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithInt:index withId:new_ARJSONObject_initWithJavaUtilMap_(value)];
  return self;
}


#line 724
- (ARJSONArray *)putWithInt:(jint)index
                     withId:(id)value {
  ARJSONObject_testValidityWithId_(value);
  if (index < 0) {
    @throw new_ARJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    
#line 732
    while (index != [self length]) {
      (void) [self putWithId:JreLoadStatic(ARJSONObject, NULL__)];
    }
    (void) [self putWithId:value];
  }
  return self;
}


#line 748
- (id)removeWithInt:(jint)index {
  return index >= 0 && index < [self length] ?
#line 750
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) removeWithInt:index] :
#line 751
  nil;
}


#line 761
- (jboolean)similarWithId:(id)other {
  if (!([other isKindOfClass:[ARJSONArray class]])) {
    return false;
  }
  jint len = [self length];
  if (len != [((ARJSONArray *) nil_chk(((ARJSONArray *) check_class_cast(other, [ARJSONArray class])))) length]) {
    return false;
  }
  for (jint i = 0; i < len; i += 1) {
    id valueThis = [self getWithInt:i];
    id valueOther = [((ARJSONArray *) nil_chk(((ARJSONArray *) check_class_cast(other, [ARJSONArray class])))) getWithInt:i];
    if ([valueThis isKindOfClass:[ARJSONObject class]]) {
      if (![((ARJSONObject *) nil_chk(((ARJSONObject *) check_class_cast(valueThis, [ARJSONObject class])))) similarWithId:valueOther]) {
        return false;
      }
    }
    else
#line 776
    if ([valueThis isKindOfClass:[ARJSONArray class]]) {
      if (![((ARJSONArray *) nil_chk(((ARJSONArray *) check_class_cast(valueThis, [ARJSONArray class])))) similarWithId:valueOther]) {
        return false;
      }
    }
    else
#line 780
    if (![nil_chk(valueThis) isEqual:valueOther]) {
      return false;
    }
  }
  return true;
}


#line 799
- (ARJSONObject *)toJSONObjectWithARJSONArray:(ARJSONArray *)names {
  if (names == nil || [names length] == 0 || [self length] == 0) {
    return nil;
  }
  ARJSONObject *jo = new_ARJSONObject_init();
  for (jint i = 0; i < [((ARJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONArray", NULL, 0x1, NULL, NULL },
    { "initWithARJSONTokener:", "JSONArray", NULL, 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "initWithNSString:", "JSONArray", NULL, 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "initWithJavaUtilCollection:", "JSONArray", NULL, 0x1, NULL, NULL },
    { "getWithInt:", "get", "Ljava.lang.Object;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getBooleanWithInt:", "getBoolean", "Z", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getDoubleWithInt:", "getDouble", "D", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getIntWithInt:", "getInt", "I", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getJSONArrayWithInt:", "getJSONArray", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getJSONObjectWithInt:", "getJSONObject", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getLongWithInt:", "getLong", "J", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "isNullWithInt:", "isNull", "Z", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "optWithInt:", "opt", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "optBooleanWithInt:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optBooleanWithInt:withBoolean:", "optBoolean", "Z", 0x1, NULL, NULL },
    { "optDoubleWithInt:", "optDouble", "D", 0x1, NULL, NULL },
    { "optDoubleWithInt:withDouble:", "optDouble", "D", 0x1, NULL, NULL },
    { "optIntWithInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optIntWithInt:withInt:", "optInt", "I", 0x1, NULL, NULL },
    { "optJSONArrayWithInt:", "optJSONArray", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "optJSONObjectWithInt:", "optJSONObject", "Lim.actor.runtime.json.JSONObject;", 0x1, NULL, NULL },
    { "optLongWithInt:", "optLong", "J", 0x1, NULL, NULL },
    { "optLongWithInt:withLong:", "optLong", "J", 0x1, NULL, NULL },
    { "optStringWithInt:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "optStringWithInt:withNSString:", "optString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "putWithBoolean:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithJavaUtilCollection:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithDouble:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithLong:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithJavaUtilMap:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithId:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, NULL, NULL },
    { "putWithInt:withBoolean:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withJavaUtilCollection:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withDouble:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withInt:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withLong:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withJavaUtilMap:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "putWithInt:withId:", "put", "Lim.actor.runtime.json.JSONArray;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
    { "removeWithInt:", "remove", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "similarWithId:", "similar", "Z", 0x1, NULL, NULL },
    { "toJSONObjectWithARJSONArray:", "toJSONObject", "Lim.actor.runtime.json.JSONObject;", 0x1, "Lim.actor.runtime.json.JSONException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "myArrayList_", NULL, 0x12, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARJSONArray = { 2, "JSONArray", "im.actor.runtime.json", NULL, 0x1, 44, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARJSONArray;
}

@end


#line 66
void ARJSONArray_init(ARJSONArray *self) {
  (void) NSObject_init(self);
  
#line 67
  self->myArrayList_ = new_JavaUtilArrayList_init();
}


#line 66
ARJSONArray *new_ARJSONArray_init() {
  ARJSONArray *self = [ARJSONArray alloc];
  ARJSONArray_init(self);
  return self;
}


#line 78
void ARJSONArray_initWithARJSONTokener_(ARJSONArray *self, ARJSONTokener *x) {
  (void) ARJSONArray_init(self);
  if ([((ARJSONTokener *) nil_chk(x)) nextClean] != '[') {
    @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
  }
  if ([x nextClean] != ']') {
    [x back];
    for (; ; ) {
      if ([x nextClean] == ',') {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:JreLoadStatic(ARJSONObject, NULL__)];
      }
      else {
        
#line 90
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:[x nextValue]];
      }
      switch ([x nextClean]) {
        case ',':
        if ([x nextClean] == ']') {
          return;
        }
        [x back];
        break;
        case ']':
        return;
        default:
        @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
      }
    }
  }
}


#line 78
ARJSONArray *new_ARJSONArray_initWithARJSONTokener_(ARJSONTokener *x) {
  ARJSONArray *self = [ARJSONArray alloc];
  ARJSONArray_initWithARJSONTokener_(self, x);
  return self;
}


#line 119
void ARJSONArray_initWithNSString_(ARJSONArray *self, NSString *source) {
  (void) ARJSONArray_initWithARJSONTokener_(self, new_ARJSONTokener_initWithNSString_(source));
}


#line 119
ARJSONArray *new_ARJSONArray_initWithNSString_(NSString *source) {
  ARJSONArray *self = [ARJSONArray alloc];
  ARJSONArray_initWithNSString_(self, source);
  return self;
}


#line 129
void ARJSONArray_initWithJavaUtilCollection_(ARJSONArray *self, id<JavaUtilCollection> collection) {
  (void) NSObject_init(self);
  
#line 130
  self->myArrayList_ = new_JavaUtilArrayList_init();
  if (collection != nil) {
    id<JavaUtilIterator> iter = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      [self->myArrayList_ addWithId:[iter next]];
    }
  }
}


#line 129
ARJSONArray *new_ARJSONArray_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  ARJSONArray *self = [ARJSONArray alloc];
  ARJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARJSONArray)

#pragma clang diagnostic pop
