//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/network/AsyncTcpConnection.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/generic/network/AsyncTcpConnection.h"
#include "im/actor/runtime/mtproto/AsyncConnection.h"
#include "im/actor/runtime/mtproto/AsyncConnectionInterface.h"
#include "im/actor/runtime/mtproto/ConnectionEndpoint.h"
#include "im/actor/runtime/mtproto/ManagedConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/SSLSocketFactory.h"

@class ARAsyncTcpConnection_ReaderThread;
@class ARAsyncTcpConnection_WriterThread;

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARAsyncTcpConnection () {
 @public
  id<JavaUtilConcurrentExecutorService> connectExecutor_;
  NSString *TAG_;
  JavaNetSocket *socket_;
  JavaIoInputStream *inputStream_;
  JavaIoOutputStream *outputStream_;
  ARAsyncTcpConnection_WriterThread *writerThread_;
  ARAsyncTcpConnection_ReaderThread *readerThread_;
  jboolean isConnected_;
  jboolean isClosed_;
}

- (void)onSocketCreatedWithJavaNetSocket:(JavaNetSocket *)socket;

- (void)onRawReceivedWithByteArray:(IOSByteArray *)data;

- (void)crashConnection;

@end

J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, connectExecutor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, outputStream_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, writerThread_, ARAsyncTcpConnection_WriterThread *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection, readerThread_, ARAsyncTcpConnection_ReaderThread *)

__attribute__((unused)) static void ARAsyncTcpConnection_onSocketCreatedWithJavaNetSocket_(ARAsyncTcpConnection *self, JavaNetSocket *socket);

__attribute__((unused)) static void ARAsyncTcpConnection_onRawReceivedWithByteArray_(ARAsyncTcpConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARAsyncTcpConnection_crashConnection(ARAsyncTcpConnection *self);

@interface ARAsyncTcpConnection_WriterThread : JavaLangThread {
 @public
  ARAsyncTcpConnection *this$0_;
  JavaUtilConcurrentConcurrentLinkedQueue *packages_;
}

- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$;

/*!
 @brief Send package to connection
 @param p package
 */
- (void)pushPackageWithByteArray:(IOSByteArray *)p;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ARAsyncTcpConnection_WriterThread)

J2OBJC_FIELD_SETTER(ARAsyncTcpConnection_WriterThread, this$0_, ARAsyncTcpConnection *)
J2OBJC_FIELD_SETTER(ARAsyncTcpConnection_WriterThread, packages_, JavaUtilConcurrentConcurrentLinkedQueue *)

__attribute__((unused)) static void ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_WriterThread *self, ARAsyncTcpConnection *outer$);

__attribute__((unused)) static ARAsyncTcpConnection_WriterThread *new_ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARAsyncTcpConnection_WriterThread)

@interface ARAsyncTcpConnection_ReaderThread : JavaLangThread {
 @public
  ARAsyncTcpConnection *this$0_;
}

- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$;

- (void)run;

- (IOSByteArray *)readBytesWithInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(ARAsyncTcpConnection_ReaderThread)

J2OBJC_FIELD_SETTER(ARAsyncTcpConnection_ReaderThread, this$0_, ARAsyncTcpConnection *)

__attribute__((unused)) static void ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_ReaderThread *self, ARAsyncTcpConnection *outer$);

__attribute__((unused)) static ARAsyncTcpConnection_ReaderThread *new_ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSByteArray *ARAsyncTcpConnection_ReaderThread_readBytesWithInt_(ARAsyncTcpConnection_ReaderThread *self, jint count);

J2OBJC_TYPE_LITERAL_HEADER(ARAsyncTcpConnection_ReaderThread)

@interface ARAsyncTcpConnection_$1 : NSObject < JavaLangRunnable > {
 @public
  ARAsyncTcpConnection *this$0_;
}

- (void)run;

- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ARAsyncTcpConnection_$1)

J2OBJC_FIELD_SETTER(ARAsyncTcpConnection_$1, this$0_, ARAsyncTcpConnection *)

__attribute__((unused)) static void ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_$1 *self, ARAsyncTcpConnection *outer$);

__attribute__((unused)) static ARAsyncTcpConnection_$1 *new_ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARAsyncTcpConnection_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/network/AsyncTcpConnection.java"


#line 26
@implementation ARAsyncTcpConnection


#line 41
- (instancetype)initWithInt:(jint)id_
   withARConnectionEndpoint:(ARConnectionEndpoint *)endpoint
withARAsyncConnectionInterface:(id<ARAsyncConnectionInterface>)connection {
  ARAsyncTcpConnection_initWithInt_withARConnectionEndpoint_withARAsyncConnectionInterface_(self, id_, endpoint, connection);
  return self;
}

- (void)doConnect {
  (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(connectExecutor_)) submitWithJavaLangRunnable:new_ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(self)];
}


#line 85
- (void)doSend:(IOSByteArray *)data {
  [((ARAsyncTcpConnection_WriterThread *) nil_chk(writerThread_)) pushPackageWithByteArray:data];
}


#line 90
- (void)doClose {
  ARAsyncTcpConnection_crashConnection(self);
}


#line 95
- (void)onSocketCreatedWithJavaNetSocket:(JavaNetSocket *)socket {
  ARAsyncTcpConnection_onSocketCreatedWithJavaNetSocket_(self, socket);
}


#line 117
- (void)onRawReceivedWithByteArray:(IOSByteArray *)data {
  ARAsyncTcpConnection_onRawReceivedWithByteArray_(self, data);
}


#line 126
- (void)crashConnection {
  ARAsyncTcpConnection_crashConnection(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withARConnectionEndpoint:withARAsyncConnectionInterface:", "AsyncTcpConnection", NULL, 0x1, NULL, NULL },
    { "doConnect", NULL, "V", 0x1, NULL, NULL },
    { "doSend:", "doSend", "V", 0x1, NULL, NULL },
    { "doClose", NULL, "V", 0x1, NULL, NULL },
    { "onSocketCreatedWithJavaNetSocket:", "onSocketCreated", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onRawReceivedWithByteArray:", "onRawReceived", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "crashConnection", NULL, "V", 0x22, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "connectExecutor_", NULL, 0x12, "Ljava.util.concurrent.ExecutorService;", NULL, NULL, .constantValue.asLong = 0 },
    { "TAG_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "socket_", NULL, 0x2, "Ljava.net.Socket;", NULL, NULL, .constantValue.asLong = 0 },
    { "inputStream_", NULL, 0x2, "Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "outputStream_", NULL, 0x2, "Ljava.io.OutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "writerThread_", NULL, 0x2, "Lim.actor.runtime.generic.network.AsyncTcpConnection$WriterThread;", NULL, NULL, .constantValue.asLong = 0 },
    { "readerThread_", NULL, 0x2, "Lim.actor.runtime.generic.network.AsyncTcpConnection$ReaderThread;", NULL, NULL, .constantValue.asLong = 0 },
    { "isConnected_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isClosed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.generic.network.AsyncTcpConnection$WriterThread;", "Lim.actor.runtime.generic.network.AsyncTcpConnection$ReaderThread;"};
  static const J2ObjcClassInfo _ARAsyncTcpConnection = { 2, "AsyncTcpConnection", "im.actor.runtime.generic.network", NULL, 0x1, 7, methods, 9, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_ARAsyncTcpConnection;
}

@end


#line 41
void ARAsyncTcpConnection_initWithInt_withARConnectionEndpoint_withARAsyncConnectionInterface_(ARAsyncTcpConnection *self, jint id_, ARConnectionEndpoint *endpoint, id<ARAsyncConnectionInterface> connection) {
  (void) ARAsyncConnection_initWithEndpoint_withInterface_(self, endpoint, connection);
  self->connectExecutor_ = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  self->isConnected_ =
#line 38
  false;
  self->isClosed_ = false;
  
#line 44
  self->TAG_ = JreStrcat("$I", @"ConnectionTcp#", id_);
}


#line 41
ARAsyncTcpConnection *new_ARAsyncTcpConnection_initWithInt_withARConnectionEndpoint_withARAsyncConnectionInterface_(jint id_, ARConnectionEndpoint *endpoint, id<ARAsyncConnectionInterface> connection) {
  ARAsyncTcpConnection *self = [ARAsyncTcpConnection alloc];
  ARAsyncTcpConnection_initWithInt_withARConnectionEndpoint_withARAsyncConnectionInterface_(self, id_, endpoint, connection);
  return self;
}


#line 95
void ARAsyncTcpConnection_onSocketCreatedWithJavaNetSocket_(ARAsyncTcpConnection *self, JavaNetSocket *socket) {
  @synchronized(self) {
    
#line 96
    if (self->isClosed_) {
      ARLog_wWithNSString_withNSString_(self->TAG_, @"Socket created after external close: disposing");
      @throw new_JavaIoIOException_initWithNSString_(@"Socket created after external close: disposing");
    }
    
#line 101
    self->socket_ = socket;
    self->inputStream_ = [((JavaNetSocket *) nil_chk(socket)) getInputStream];
    self->outputStream_ = [socket getOutputStream];
    
#line 105
    self->isClosed_ = false;
    self->isConnected_ = true;
    
#line 108
    self->readerThread_ = new_ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(self);
    [self->readerThread_ start];
    
#line 111
    self->writerThread_ = new_ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(self);
    [self->writerThread_ start];
    
#line 114
    [self onConnected];
  }
}


#line 117
void ARAsyncTcpConnection_onRawReceivedWithByteArray_(ARAsyncTcpConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 118
    if (!self->isConnected_) {
      ARLog_dWithNSString_withNSString_(self->TAG_, @"onRawReceived: Not connected");
      return;
    }
    
#line 123
    [self onReceived:data];
  }
}


#line 126
void ARAsyncTcpConnection_crashConnection(ARAsyncTcpConnection *self) {
  @synchronized(self) {
    
#line 127
    ARLog_dWithNSString_withNSString_(self->TAG_, @"Crashing Connection");
    
#line 129
    if (self->isClosed_) {
      return;
    }
    self->isClosed_ = true;
    self->isConnected_ = false;
    
#line 135
    if (self->writerThread_ != nil) {
      [self->writerThread_ interrupt];
    }
    if (self->readerThread_ != nil) {
      [self->readerThread_ interrupt];
    }
    self->writerThread_ = nil;
    self->readerThread_ = nil;
    
#line 144
    if (self->socket_ != nil) {
      @try {
        [self->socket_ close];
      }
      @catch (
#line 147
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
    if (self->inputStream_ != nil) {
      @try {
        [self->inputStream_ close];
      }
      @catch (
#line 154
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
    if (self->outputStream_ != nil) {
      @try {
        [self->outputStream_ close];
      }
      @catch (
#line 161
      JavaIoIOException *e) {
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
    self->socket_ = nil;
    self->inputStream_ = nil;
    self->outputStream_ = nil;
    
#line 169
    [self onClosed];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARAsyncTcpConnection)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/network/AsyncTcpConnection.java"


#line 173
@implementation ARAsyncTcpConnection_WriterThread


#line 176
- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$ {
  ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}


#line 185
- (void)pushPackageWithByteArray:(IOSByteArray *)p {
  [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(packages_)) addWithId:p];
  @synchronized(packages_) {
    [packages_ notifyAll];
  }
}


#line 193
- (void)run {
  @try {
    while (this$0_->isConnected_) {
      
#line 198
      IOSByteArray *p;
      @synchronized(packages_) {
        p = [((JavaUtilConcurrentConcurrentLinkedQueue *) nil_chk(packages_)) poll];
        if (p == nil) {
          @try {
            [packages_ wait];
          }
          @catch (
#line 204
          JavaLangInterruptedException *e) {
            return;
          }
          p = [packages_ poll];
        }
      }
      if (p == nil) {
        continue;
      }
      
#line 214
      [((JavaIoOutputStream *) nil_chk(this$0_->outputStream_)) writeWithByteArray:p];
      [this$0_->outputStream_ flush];
    }
  }
  @catch (
#line 217
  JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    ARAsyncTcpConnection_crashConnection(this$0_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARAsyncTcpConnection:", "WriterThread", NULL, 0x1, NULL, NULL },
    { "pushPackageWithByteArray:", "pushPackage", "V", 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.generic.network.AsyncTcpConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "packages_", NULL, 0x12, "Ljava.util.concurrent.ConcurrentLinkedQueue;", NULL, "Ljava/util/concurrent/ConcurrentLinkedQueue<L[B;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARAsyncTcpConnection_WriterThread = { 2, "WriterThread", "im.actor.runtime.generic.network", "AsyncTcpConnection", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARAsyncTcpConnection_WriterThread;
}

@end


#line 176
void ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_WriterThread *self, ARAsyncTcpConnection *outer$) {
  self->this$0_ = outer$;
  (void) JavaLangThread_init(self);
  self->packages_ = new_JavaUtilConcurrentConcurrentLinkedQueue_init();
  
#line 177
  [self setNameWithNSString:JreStrcat("$$", outer$->TAG_, @"#Writer")];
}


#line 176
ARAsyncTcpConnection_WriterThread *new_ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) {
  ARAsyncTcpConnection_WriterThread *self = [ARAsyncTcpConnection_WriterThread alloc];
  ARAsyncTcpConnection_WriterThread_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARAsyncTcpConnection_WriterThread)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/network/AsyncTcpConnection.java"


#line 224
@implementation ARAsyncTcpConnection_ReaderThread

- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$ {
  ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}

- (void)run {
  @try {
    while (this$0_->isConnected_) {
      
#line 235
      IOSByteArray *header = ARAsyncTcpConnection_ReaderThread_readBytesWithInt_(self, 9);
      ARDataInput *dataInput = new_ARDataInput_initWithByteArray_(header);
      jint receivedPackageIndex = [dataInput readInt];
      jint headerValue = [dataInput readByte];
      jint size = [dataInput readInt];
      
#line 241
      if (size > 1024 * 1024) {
        @throw new_JavaIoIOException_initWithNSString_(@"Incorrect size");
      }
      
#line 246
      IOSByteArray *body = ARAsyncTcpConnection_ReaderThread_readBytesWithInt_(self, size + 4);
      
#line 248
      ARDataOutput *dataOutput = new_ARDataOutput_init();
      [dataOutput writeBytesWithByteArray:header];
      [dataOutput writeBytesWithByteArray:body];
      ARAsyncTcpConnection_onRawReceivedWithByteArray_(this$0_, [dataOutput toByteArray]);
    }
  }
  @catch (
#line 253
  JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    ARAsyncTcpConnection_crashConnection(this$0_);
  }
}


#line 259
- (IOSByteArray *)readBytesWithInt:(jint)count {
  return ARAsyncTcpConnection_ReaderThread_readBytesWithInt_(self, count);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARAsyncTcpConnection:", "ReaderThread", NULL, 0x2, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "readBytesWithInt:", "readBytes", "[B", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.generic.network.AsyncTcpConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARAsyncTcpConnection_ReaderThread = { 2, "ReaderThread", "im.actor.runtime.generic.network", "AsyncTcpConnection", 0x2, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARAsyncTcpConnection_ReaderThread;
}

@end


#line 226
void ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_ReaderThread *self, ARAsyncTcpConnection *outer$) {
  self->this$0_ = outer$;
  (void) JavaLangThread_init(self);
  
#line 227
  [self setNameWithNSString:JreStrcat("$$", outer$->TAG_, @"#Reader")];
}


#line 226
ARAsyncTcpConnection_ReaderThread *new_ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) {
  ARAsyncTcpConnection_ReaderThread *self = [ARAsyncTcpConnection_ReaderThread alloc];
  ARAsyncTcpConnection_ReaderThread_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}


#line 259
IOSByteArray *ARAsyncTcpConnection_ReaderThread_readBytesWithInt_(ARAsyncTcpConnection_ReaderThread *self, jint count) {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:count];
  jint offset = 0;
  while (offset < res->size_) {
    jint readed = [((JavaIoInputStream *) nil_chk(self->this$0_->inputStream_)) readWithByteArray:res withInt:offset withInt:res->size_ - offset];
    if (readed > 0) {
      offset += readed;
    }
    else
#line 266
    if (readed < 0) {
      @throw new_JavaIoIOException_init();
    }
    else {
      
#line 269
      JavaLangThread_yield();
    }
  }
  return res;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARAsyncTcpConnection_ReaderThread)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/network/AsyncTcpConnection.java"

@implementation ARAsyncTcpConnection_$1


#line 51
- (void)run {
  @try {
    ARConnectionEndpoint *endpoint = [this$0_ getEndpoint];
    
#line 55
    JavaNetSocket *socket = new_JavaNetSocket_init();
    
#line 58
    [socket setKeepAliveWithBoolean:false];
    [socket setTcpNoDelayWithBoolean:true];
    
#line 62
    [socket connectWithJavaNetSocketAddress:new_JavaNetInetSocketAddress_initWithNSString_withInt_([((ARConnectionEndpoint *) nil_chk(endpoint)) getHost], [endpoint getPort]) withInt:ARManagedConnection_CONNECTION_TIMEOUT];
    
#line 65
    if ([endpoint getType] == JreLoadStatic(ARConnectionEndpoint_TypeEnum, TCP_TLS)) {
      JavaxNetSslSSLSocketFactory *socketFactory = (JavaxNetSslSSLSocketFactory *) check_class_cast(JavaxNetSslSSLSocketFactory_getDefault(), [JavaxNetSslSSLSocketFactory class]);
      socket = [((JavaxNetSslSSLSocketFactory *) nil_chk(socketFactory)) createSocketWithJavaNetSocket:socket withNSString:
#line 68
      [endpoint getHost] withInt:[endpoint getPort] withBoolean:true];
    }
    
#line 72
    (void) [((JavaNetSocket *) nil_chk(socket)) getInputStream];
    (void) [socket getOutputStream];
    
#line 75
    ARAsyncTcpConnection_onSocketCreatedWithJavaNetSocket_(this$0_, socket);
  }
  @catch (
#line 76
  JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    ARAsyncTcpConnection_crashConnection(this$0_);
  }
}

- (instancetype)initWithARAsyncTcpConnection:(ARAsyncTcpConnection *)outer$ {
  ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithARAsyncTcpConnection:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.generic.network.AsyncTcpConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ARAsyncTcpConnection", "doConnect" };
  static const J2ObjcClassInfo _ARAsyncTcpConnection_$1 = { 2, "", "im.actor.runtime.generic.network", "AsyncTcpConnection", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ARAsyncTcpConnection_$1;
}

@end

void ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(ARAsyncTcpConnection_$1 *self, ARAsyncTcpConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ARAsyncTcpConnection_$1 *new_ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(ARAsyncTcpConnection *outer$) {
  ARAsyncTcpConnection_$1 *self = [ARAsyncTcpConnection_$1 alloc];
  ARAsyncTcpConnection_$1_initWithARAsyncTcpConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARAsyncTcpConnection_$1)

#pragma clang diagnostic pop
