//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/regexp/GenericPattern.java
//

#include "J2ObjC_source.h"
#include "im/actor/runtime/generic/regexp/GenericMatch.h"
#include "im/actor/runtime/generic/regexp/GenericPattern.h"
#include "im/actor/runtime/regexp/MatcherCompat.h"
#include "im/actor/runtime/regexp/PatternCompat.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ImActorRuntimeGenericRegexpGenericPattern () {
 @public
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(ImActorRuntimeGenericRegexpGenericPattern, pattern_, JavaUtilRegexPattern *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/regexp/GenericPattern.java"


#line 8
@implementation ImActorRuntimeGenericRegexpGenericPattern


#line 12
- (instancetype)initWithNSString:(NSString *)pattern {
  ImActorRuntimeGenericRegexpGenericPattern_initWithNSString_(self, pattern);
  return self;
}


#line 18
- (id<ImActorRuntimeRegexpMatcherCompat>)matcherWithNSString:(NSString *)input {
  return new_ImActorRuntimeGenericRegexpGenericMatch_initWithJavaUtilRegexMatcher_withNSString_([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input], input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "GenericPattern", NULL, 0x1, NULL, NULL },
    { "matcherWithNSString:", "matcher", "Lim.actor.runtime.regexp.MatcherCompat;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", NULL, 0x2, "Ljava.util.regex.Pattern;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ImActorRuntimeGenericRegexpGenericPattern = { 2, "GenericPattern", "im.actor.runtime.generic.regexp", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ImActorRuntimeGenericRegexpGenericPattern;
}

@end


#line 12
void ImActorRuntimeGenericRegexpGenericPattern_initWithNSString_(ImActorRuntimeGenericRegexpGenericPattern *self, NSString *pattern) {
  (void) ImActorRuntimeRegexpPatternCompat_initWithNSString_(self, pattern);
  self->pattern_ = JavaUtilRegexPattern_compileWithNSString_(pattern);
}


#line 12
ImActorRuntimeGenericRegexpGenericPattern *new_ImActorRuntimeGenericRegexpGenericPattern_initWithNSString_(NSString *pattern) {
  ImActorRuntimeGenericRegexpGenericPattern *self = [ImActorRuntimeGenericRegexpGenericPattern alloc];
  ImActorRuntimeGenericRegexpGenericPattern_initWithNSString_(self, pattern);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorRuntimeGenericRegexpGenericPattern)

#pragma clang diagnostic pop
