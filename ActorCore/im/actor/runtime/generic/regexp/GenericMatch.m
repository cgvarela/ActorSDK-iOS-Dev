//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/regexp/GenericMatch.java
//

#include "J2ObjC_source.h"
#include "im/actor/runtime/generic/regexp/GenericMatch.h"
#include "java/util/regex/Matcher.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ImActorRuntimeGenericRegexpGenericMatch () {
 @public
  JavaUtilRegexMatcher *matcher_;
  NSString *input_;
}

@end

J2OBJC_FIELD_SETTER(ImActorRuntimeGenericRegexpGenericMatch, matcher_, JavaUtilRegexMatcher *)
J2OBJC_FIELD_SETTER(ImActorRuntimeGenericRegexpGenericMatch, input_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/regexp/GenericMatch.java"


#line 7
@implementation ImActorRuntimeGenericRegexpGenericMatch


#line 12
- (instancetype)initWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher
                                withNSString:(NSString *)input {
  ImActorRuntimeGenericRegexpGenericMatch_initWithJavaUtilRegexMatcher_withNSString_(self, matcher, input);
  return self;
}

- (jboolean)hasMatch {
  return [((JavaUtilRegexMatcher *) nil_chk(self->matcher_)) find];
}


#line 23
- (jboolean)matches {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) matches];
}


#line 28
- (jint)groupCount {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) groupCount];
}


#line 33
- (NSString *)group {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) group];
}


#line 38
- (NSString *)groupWithInt:(jint)index {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) groupWithInt:index];
}


#line 43
- (jint)start {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) start];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilRegexMatcher:withNSString:", "GenericMatch", NULL, 0x1, NULL, NULL },
    { "hasMatch", NULL, "Z", 0x1, NULL, NULL },
    { "matches", NULL, "Z", 0x1, NULL, NULL },
    { "groupCount", NULL, "I", 0x1, NULL, NULL },
    { "group", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "groupWithInt:", "group", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "start", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", NULL, 0x2, "Ljava.util.regex.Matcher;", NULL, NULL, .constantValue.asLong = 0 },
    { "input_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ImActorRuntimeGenericRegexpGenericMatch = { 2, "GenericMatch", "im.actor.runtime.generic.regexp", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ImActorRuntimeGenericRegexpGenericMatch;
}

@end


#line 12
void ImActorRuntimeGenericRegexpGenericMatch_initWithJavaUtilRegexMatcher_withNSString_(ImActorRuntimeGenericRegexpGenericMatch *self, JavaUtilRegexMatcher *matcher, NSString *input) {
  (void) NSObject_init(self);
  
#line 13
  self->matcher_ = matcher;
  self->input_ = input;
}


#line 12
ImActorRuntimeGenericRegexpGenericMatch *new_ImActorRuntimeGenericRegexpGenericMatch_initWithJavaUtilRegexMatcher_withNSString_(JavaUtilRegexMatcher *matcher, NSString *input) {
  ImActorRuntimeGenericRegexpGenericMatch *self = [ImActorRuntimeGenericRegexpGenericMatch alloc];
  ImActorRuntimeGenericRegexpGenericMatch_initWithJavaUtilRegexMatcher_withNSString_(self, matcher, input);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorRuntimeGenericRegexpGenericMatch)

#pragma clang diagnostic pop
