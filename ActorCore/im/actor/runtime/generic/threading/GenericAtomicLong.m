//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/threading/GenericAtomicLong.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/generic/threading/GenericAtomicLong.h"
#include "im/actor/runtime/threading/AtomicLongCompat.h"
#include <j2objc/java/util/concurrent/atomic/AtomicLong.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/threading/GenericAtomicLong.java"


#line 11
@implementation ARGenericAtomicLong


#line 14
- (instancetype)initWithLong:(jlong)value {
  ARGenericAtomicLong_initWithLong_(self, value);
  return self;
}

- (jlong)get {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(atomicLong_)) get];
}


#line 24
- (jlong)incrementAndGet {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(atomicLong_)) incrementAndGet];
}


#line 29
- (jlong)getAndIncrement {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(atomicLong_)) getAndIncrement];
}


#line 34
- (void)setWithLong:(jlong)v {
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(atomicLong_)) setWithLong:v];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "GenericAtomicLong", NULL, 0x1, NULL, NULL },
    { "get", NULL, "J", 0x1, NULL, NULL },
    { "incrementAndGet", NULL, "J", 0x1, NULL, NULL },
    { "getAndIncrement", NULL, "J", 0x1, NULL, NULL },
    { "setWithLong:", "set", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "atomicLong_", NULL, 0x10, "Ljava.util.concurrent.atomic.AtomicLong;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARGenericAtomicLong = { 2, "GenericAtomicLong", "im.actor.runtime.generic.threading", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARGenericAtomicLong;
}

@end


#line 14
void ARGenericAtomicLong_initWithLong_(ARGenericAtomicLong *self, jlong value) {
  (void) ARAtomicLongCompat_init(self);
  
#line 15
  self->atomicLong_ = new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(value);
}


#line 14
ARGenericAtomicLong *new_ARGenericAtomicLong_initWithLong_(jlong value) {
  ARGenericAtomicLong *self = [ARGenericAtomicLong alloc];
  ARGenericAtomicLong_initWithLong_(self, value);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARGenericAtomicLong)

#pragma clang diagnostic pop
