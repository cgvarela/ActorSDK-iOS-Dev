//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/GenericRandomProvider.java
//

#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/generic/GenericRandomProvider.h"
#include <j2objc/java/math/BigInteger.h>
#include <j2objc/java/security/SecureRandom.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARGenericRandomProvider () {
 @public
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(ARGenericRandomProvider, random_, JavaSecuritySecureRandom *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-generic/src/main/java//im/actor/runtime/generic/GenericRandomProvider.java"


#line 11
@implementation ARGenericRandomProvider


#line 16
- (IOSByteArray *)randomBytesWithInt:(jint)length {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:length];
  @synchronized(random_) {
    [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:res];
  }
  return res;
}


#line 25
- (jint)randomIntWithInt:(jint)maxValue {
  @synchronized(random_) {
    return [((JavaSecuritySecureRandom *) nil_chk(random_)) nextIntWithInt:maxValue];
  }
}


#line 32
- (void)nextBytesWithByteArray:(IOSByteArray *)data {
  @synchronized(random_) {
    [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:data];
  }
}


#line 39
- (JavaMathBigInteger *)generateBigIntegerWithInt:(jint)numBits {
  return new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(numBits, random_);
}


#line 44
- (JavaMathBigInteger *)generateBigIntegerWithInt:(jint)numBits
                                          withInt:(jint)certanity {
  return new_JavaMathBigInteger_initWithInt_withInt_withJavaUtilRandom_(numBits, certanity, random_);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARGenericRandomProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "randomBytesWithInt:", "randomBytes", "[B", 0x1, NULL, NULL },
    { "randomIntWithInt:", "randomInt", "I", 0x1, NULL, NULL },
    { "nextBytesWithByteArray:", "nextBytes", "V", 0x1, NULL, NULL },
    { "generateBigIntegerWithInt:", "generateBigInteger", "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "generateBigIntegerWithInt:withInt:", "generateBigInteger", "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "random_", NULL, 0x12, "Ljava.security.SecureRandom;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARGenericRandomProvider = { 2, "GenericRandomProvider", "im.actor.runtime.generic", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARGenericRandomProvider;
}

@end

void ARGenericRandomProvider_init(ARGenericRandomProvider *self) {
  (void) NSObject_init(self);
  self->random_ = new_JavaSecuritySecureRandom_init();
}

ARGenericRandomProvider *new_ARGenericRandomProvider_init() {
  ARGenericRandomProvider *self = [ARGenericRandomProvider alloc];
  ARGenericRandomProvider_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARGenericRandomProvider)

#pragma clang diagnostic pop
