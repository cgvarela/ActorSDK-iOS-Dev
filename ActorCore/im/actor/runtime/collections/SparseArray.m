//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/collections/SparseArray.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/collections/ArrayUtils.h"
#include "im/actor/runtime/collections/ContainerHelpers.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARSparseArray () {
 @public
  jboolean mGarbage_;
  IOSIntArray *mKeys_;
  IOSObjectArray *mValues_;
  jint mSize_;
}

- (void)gc;

@end

J2OBJC_FIELD_SETTER(ARSparseArray, mKeys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ARSparseArray, mValues_, IOSObjectArray *)

static id ARSparseArray_DELETED_;
J2OBJC_STATIC_FIELD_GETTER(ARSparseArray, DELETED_, id)

__attribute__((unused)) static void ARSparseArray_gc(ARSparseArray *self);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/collections/SparseArray.java"

J2OBJC_INITIALIZED_DEFN(ARSparseArray)


#line 47
@implementation ARSparseArray

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 58
- (instancetype)init {
  ARSparseArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 69
- (instancetype)initWithInt:(jint)initialCapacity {
  ARSparseArray_initWithInt_(self, initialCapacity);
  return self;
}


#line 86
- (id)getWithInt:(jint)key {
  return [self getWithInt:key withId:nil];
}


#line 95
- (id)getWithInt:(jint)key
          withId:(id)valueIfKeyNotFound {
  jint i = ARContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  
#line 98
  if (i < 0 || IOSObjectArray_Get(nil_chk(mValues_), i) == ARSparseArray_DELETED_) {
    return valueIfKeyNotFound;
  }
  else {
    
#line 101
    return (id) IOSObjectArray_Get(mValues_, i);
  }
}


#line 108
- (void)delete__WithInt:(jint)key {
  jint i = ARContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  
#line 111
  if (i >= 0) {
    if (IOSObjectArray_Get(nil_chk(mValues_), i) != ARSparseArray_DELETED_) {
      (void) IOSObjectArray_Set(mValues_, i, ARSparseArray_DELETED_);
      mGarbage_ = true;
    }
  }
}


#line 122
- (void)removeWithInt:(jint)key {
  [self delete__WithInt:key];
}


#line 129
- (void)removeAtWithInt:(jint)index {
  if (IOSObjectArray_Get(nil_chk(mValues_), index) != ARSparseArray_DELETED_) {
    (void) IOSObjectArray_Set(mValues_, index, ARSparseArray_DELETED_);
    mGarbage_ = true;
  }
}


#line 142
- (void)removeAtRangeWithInt:(jint)index
                     withInt:(jint)size {
  jint end = JavaLangMath_minWithInt_withInt_(mSize_, index + size);
  for (jint i = index; i < end; i++) {
    [self removeAtWithInt:i];
  }
}


#line 149
- (void)gc {
  ARSparseArray_gc(self);
}


#line 182
- (void)putWithInt:(jint)key
            withId:(id)value {
  jint i = ARContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  
#line 185
  if (i >= 0) {
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
  }
  else {
    
#line 188
    i = ~i;
    
#line 190
    if (i < mSize_ && IOSObjectArray_Get(nil_chk(mValues_), i) == ARSparseArray_DELETED_) {
      *IOSIntArray_GetRef(nil_chk(mKeys_), i) = key;
      (void) IOSObjectArray_Set(mValues_, i, value);
      return;
    }
    
#line 196
    if (mGarbage_ && mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
      ARSparseArray_gc(self);
      
#line 200
      i = ~ARContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
    }
    
#line 203
    if (mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
      jint n = ARArrayUtils_idealIntArraySizeWithInt_(mSize_ + 1);
      
#line 206
      IOSIntArray *nkeys = [IOSIntArray newArrayWithLength:n];
      IOSObjectArray *nvalues = [IOSObjectArray newArrayWithLength:n type:NSObject_class_()];
      
#line 210
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, 0, nkeys, 0, mKeys_->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, 0, nvalues, 0, ((IOSObjectArray *) nil_chk(mValues_))->size_);
      
#line 213
      mKeys_ = nkeys;
      mValues_ = nvalues;
    }
    
#line 217
    if (mSize_ - i != 0) {
      
#line 219
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, i, mKeys_, i + 1, mSize_ - i);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, i, mValues_, i + 1, mSize_ - i);
    }
    
#line 223
    *IOSIntArray_GetRef(mKeys_, i) = key;
    (void) IOSObjectArray_Set(nil_chk(mValues_), i, value);
    mSize_++;
  }
}


#line 233
- (jint)size {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 238
  return mSize_;
}


#line 251
- (jint)keyAtWithInt:(jint)index {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 256
  return IOSIntArray_Get(nil_chk(mKeys_), index);
}


#line 271
- (id)valueAtWithInt:(jint)index {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 276
  return (id) IOSObjectArray_Get(nil_chk(mValues_), index);
}


#line 284
- (void)setValueAtWithInt:(jint)index
                   withId:(id)value {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 289
  (void) IOSObjectArray_Set(nil_chk(mValues_), index, value);
}


#line 297
- (jint)indexOfKeyWithInt:(jint)key {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 302
  return ARContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
}


#line 305
- (jboolean)containsKeyWithInt:(jint)key {
  return [self indexOfKeyWithInt:key] >= 0;
}


#line 319
- (jint)indexOfValueWithId:(id)value {
  if (mGarbage_) {
    ARSparseArray_gc(self);
  }
  
#line 324
  for (jint i = 0; i < mSize_; i++)
#line 325
  if (IOSObjectArray_Get(nil_chk(mValues_), i) == value)
#line 326
  return i;
  
#line 328
  return -1;
}


#line 334
- (void)clear {
  jint n = mSize_;
  IOSObjectArray *values = mValues_;
  
#line 338
  for (jint i = 0; i < n; i++) {
    (void) IOSObjectArray_Set(nil_chk(values), i, nil);
  }
  
#line 342
  mSize_ = 0;
  mGarbage_ = false;
}


#line 350
- (void)appendWithInt:(jint)key
               withId:(id)value {
  if (mSize_ != 0 && key <= IOSIntArray_Get(nil_chk(mKeys_), mSize_ - 1)) {
    [self putWithInt:key withId:value];
    return;
  }
  
#line 356
  if (mGarbage_ && mSize_ >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
    ARSparseArray_gc(self);
  }
  
#line 360
  jint pos = mSize_;
  if (pos >= ((IOSIntArray *) nil_chk(mKeys_))->size_) {
    jint n = ARArrayUtils_idealIntArraySizeWithInt_(pos + 1);
    
#line 364
    IOSIntArray *nkeys = [IOSIntArray newArrayWithLength:n];
    IOSObjectArray *nvalues = [IOSObjectArray newArrayWithLength:n type:NSObject_class_()];
    
#line 368
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, 0, nkeys, 0, mKeys_->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, 0, nvalues, 0, ((IOSObjectArray *) nil_chk(mValues_))->size_);
    
#line 371
    mKeys_ = nkeys;
    mValues_ = nvalues;
  }
  
#line 375
  *IOSIntArray_GetRef(mKeys_, pos) = key;
  (void) IOSObjectArray_Set(nil_chk(mValues_), pos, value);
  mSize_ = pos + 1;
}


#line 388
- (NSString *)description {
  if ([self size] <= 0) {
    return @"{}";
  }
  
#line 393
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_initWithInt_(mSize_ * 28);
  (void) [buffer appendWithChar:'{'];
  for (jint i = 0; i < mSize_; i++) {
    if (i > 0) {
      (void) [buffer appendWithNSString:@", "];
    }
    jint key = [self keyAtWithInt:i];
    (void) [buffer appendWithInt:key];
    (void) [buffer appendWithChar:'='];
    id value = [self valueAtWithInt:i];
    if (value != self) {
      (void) [buffer appendWithId:value];
    }
    else {
      
#line 406
      (void) [buffer appendWithNSString:@"(this Map)"];
    }
  }
  (void) [buffer appendWithChar:'}'];
  return [buffer description];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [ARSparseArray class]) {
    ARSparseArray_DELETED_ = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(ARSparseArray)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SparseArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "SparseArray", NULL, 0x1, NULL, NULL },
    { "getWithInt:", "get", "TE;", 0x1, NULL, "(I)TE;" },
    { "getWithInt:withId:", "get", "TE;", 0x1, NULL, "(ITE;)TE;" },
    { "delete__WithInt:", "delete", "V", 0x1, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x1, NULL, NULL },
    { "removeAtWithInt:", "removeAt", "V", 0x1, NULL, NULL },
    { "removeAtRangeWithInt:withInt:", "removeAtRange", "V", 0x1, NULL, NULL },
    { "gc", NULL, "V", 0x2, NULL, NULL },
    { "putWithInt:withId:", "put", "V", 0x1, NULL, "(ITE;)V" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "keyAtWithInt:", "keyAt", "I", 0x1, NULL, NULL },
    { "valueAtWithInt:", "valueAt", "TE;", 0x1, NULL, "(I)TE;" },
    { "setValueAtWithInt:withId:", "setValueAt", "V", 0x1, NULL, "(ITE;)V" },
    { "indexOfKeyWithInt:", "indexOfKey", "I", 0x1, NULL, NULL },
    { "containsKeyWithInt:", "containsKey", "Z", 0x1, NULL, NULL },
    { "indexOfValueWithId:", "indexOfValue", "I", 0x1, NULL, "(TE;)I" },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "appendWithInt:withId:", "append", "V", 0x1, NULL, "(ITE;)V" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DELETED_", NULL, 0x1a, "Ljava.lang.Object;", &ARSparseArray_DELETED_, NULL, .constantValue.asLong = 0 },
    { "mGarbage_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "mKeys_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "mValues_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "mSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARSparseArray = { 2, "SparseArray", "im.actor.runtime.collections", NULL, 0x1, 20, methods, 5, fields, 0, NULL, 0, NULL, NULL, "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Cloneable;" };
  return &_ARSparseArray;
}

@end


#line 58
void ARSparseArray_init(ARSparseArray *self) {
  (void) ARSparseArray_initWithInt_(self, 10);
}


#line 58
ARSparseArray *new_ARSparseArray_init() {
  ARSparseArray *self = [ARSparseArray alloc];
  ARSparseArray_init(self);
  return self;
}


#line 69
void ARSparseArray_initWithInt_(ARSparseArray *self, jint initialCapacity) {
  (void) NSObject_init(self);
  self->mGarbage_ =
#line 49
  false;
  
#line 70
  if (initialCapacity == 0) {
    self->mKeys_ = JreLoadStatic(ARContainerHelpers, EMPTY_INTS_);
    self->mValues_ = JreLoadStatic(ARContainerHelpers, EMPTY_OBJECTS_);
  }
  else {
    
#line 74
    initialCapacity = ARArrayUtils_idealIntArraySizeWithInt_(initialCapacity);
    self->mKeys_ = [IOSIntArray newArrayWithLength:initialCapacity];
    self->mValues_ = [IOSObjectArray newArrayWithLength:initialCapacity type:NSObject_class_()];
  }
  self->mSize_ = 0;
}


#line 69
ARSparseArray *new_ARSparseArray_initWithInt_(jint initialCapacity) {
  ARSparseArray *self = [ARSparseArray alloc];
  ARSparseArray_initWithInt_(self, initialCapacity);
  return self;
}


#line 149
void ARSparseArray_gc(ARSparseArray *self) {
  
#line 152
  jint n = self->mSize_;
  jint o = 0;
  IOSIntArray *keys = self->mKeys_;
  IOSObjectArray *values = self->mValues_;
  
#line 157
  for (jint i = 0; i < n; i++) {
    id val = IOSObjectArray_Get(nil_chk(values), i);
    
#line 160
    if (val != ARSparseArray_DELETED_) {
      if (i != o) {
        *IOSIntArray_GetRef(nil_chk(keys), o) = IOSIntArray_Get(keys, i);
        (void) IOSObjectArray_Set(values, o, val);
        (void) IOSObjectArray_Set(values, i, nil);
      }
      
#line 167
      o++;
    }
  }
  
#line 171
  self->mGarbage_ = false;
  self->mSize_ = o;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARSparseArray)

#pragma clang diagnostic pop
