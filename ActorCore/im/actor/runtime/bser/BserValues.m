//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/BserValues.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/bser/Bser.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/IncorrectTypeException.h"
#include "im/actor/runtime/bser/UnknownFieldException.h"
#include "im/actor/runtime/bser/Utils.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARBserValues () {
 @public
  ARSparseArray *fields_;
  ARSparseArray *touched_;
}

@end

J2OBJC_FIELD_SETTER(ARBserValues, fields_, ARSparseArray *)
J2OBJC_FIELD_SETTER(ARBserValues, touched_, ARSparseArray *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/BserValues.java"


#line 16
@implementation ARBserValues


#line 23
- (instancetype)initWithARSparseArray:(ARSparseArray *)fields {
  ARBserValues_initWithARSparseArray_(self, fields);
  return self;
}


#line 27
- (jboolean)hasRemaining {
  for (jint i = 0; i < [((ARSparseArray *) nil_chk(fields_)) size]; i++) {
    if (![((JavaLangBoolean *) nil_chk([((ARSparseArray *) nil_chk(touched_)) getWithInt:[fields_ keyAtWithInt:i] withId:JavaLangBoolean_valueOfWithBoolean_(false)])) booleanValue]) {
      return true;
    }
  }
  return false;
}


#line 37
- (ARSparseArray *)buildRemaining {
  ARSparseArray *res = new_ARSparseArray_init();
  for (jint i = 0; i < [((ARSparseArray *) nil_chk(fields_)) size]; i++) {
    jint key = [fields_ keyAtWithInt:i];
    if (![((JavaLangBoolean *) nil_chk([((ARSparseArray *) nil_chk(touched_)) getWithInt:key withId:JavaLangBoolean_valueOfWithBoolean_(false)])) booleanValue]) {
      [res putWithInt:key withId:[fields_ getWithInt:key]];
    }
  }
  return res;
}


#line 50
- (jlong)optLongWithInt:(jint)id_ {
  return [self getLongWithInt:id_ withLong:0];
}

- (jlong)getLongWithInt:(jint)id_ {
  if (![((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    @throw new_ARUnknownFieldException_initWithNSString_(JreStrcat("$I", @"Unable to find field #", id_));
  }
  return [self getLongWithInt:id_ withLong:0];
}

- (jlong)getLongWithInt:(jint)id_
               withLong:(jlong)defValue {
  if ([((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    [((ARSparseArray *) nil_chk(touched_)) putWithInt:id_ withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    id obj = [fields_ getWithInt:id_];
    if ([obj isKindOfClass:[JavaLangLong class]]) {
      return [((JavaLangLong *) nil_chk((JavaLangLong *) check_class_cast(obj, [JavaLangLong class]))) longLongValue];
    }
    @throw new_ARIncorrectTypeException_initWithNSString_(JreStrcat("$$", @"Expected type: long, got ", [[nil_chk(obj) getClass] getSimpleName]));
  }
  return defValue;
}

- (jint)optIntWithInt:(jint)id_ {
  return ARUtils_convertIntWithLong_([self optLongWithInt:id_]);
}

- (jint)getIntWithInt:(jint)id_ {
  return ARUtils_convertIntWithLong_([self getLongWithInt:id_]);
}

- (jint)getIntWithInt:(jint)id_
              withInt:(jint)defValue {
  return ARUtils_convertIntWithLong_([self getLongWithInt:id_ withLong:defValue]);
}

- (jdouble)optDoubleWithInt:(jint)id_ {
  return JavaLangDouble_longBitsToDoubleWithLong_([self optLongWithInt:id_]);
}

- (jdouble)getDoubleWithInt:(jint)id_ {
  return JavaLangDouble_longBitsToDoubleWithLong_([self getLongWithInt:id_]);
}

- (jdouble)getDoubleWithInt:(jint)id_
                 withDouble:(jdouble)defValue {
  return JavaLangDouble_longBitsToDoubleWithLong_([self getLongWithInt:id_ withLong:JavaLangDouble_doubleToLongBitsWithDouble_(defValue)]);
}

- (jboolean)optBoolWithInt:(jint)id_ {
  return [self optLongWithInt:id_] != 0;
}

- (jboolean)getBoolWithInt:(jint)id_ {
  return [self getLongWithInt:id_] != 0;
}

- (jboolean)getBoolWithInt:(jint)id_
               withBoolean:(jboolean)defValue {
  return [self getLongWithInt:id_ withLong:defValue ? 1 : 0] != 0;
}


#line 116
- (IOSByteArray *)optBytesWithInt:(jint)id_ {
  return [self getBytesWithInt:id_ withByteArray:nil];
}


#line 121
- (IOSByteArray *)getBytesWithInt:(jint)id_ {
  if (![((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    @throw new_ARUnknownFieldException_initWithNSString_(JreStrcat("$I", @"Unable to find field #", id_));
  }
  return [self getBytesWithInt:id_ withByteArray:nil];
}


#line 129
- (IOSByteArray *)getBytesWithInt:(jint)id_
                    withByteArray:(IOSByteArray *)defValue {
  
#line 131
  if ([((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    [((ARSparseArray *) nil_chk(touched_)) putWithInt:id_ withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    id obj = [fields_ getWithInt:id_];
    if ([obj isKindOfClass:[IOSByteArray class]]) {
      return (IOSByteArray *) check_class_cast(obj, [IOSByteArray class]);
    }
    @throw new_ARIncorrectTypeException_initWithNSString_(JreStrcat("$$", @"Expected type: byte[], got ", [[nil_chk(obj) getClass] getSimpleName]));
  }
  return defValue;
}

- (NSString *)optStringWithInt:(jint)id_ {
  return ARUtils_convertStringWithByteArray_([self optBytesWithInt:id_]);
}


#line 149
- (NSString *)getStringWithInt:(jint)id_ {
  return ARUtils_convertStringWithByteArray_([self getBytesWithInt:id_]);
}


#line 154
- (NSString *)getStringWithInt:(jint)id_
                  withNSString:(NSString *)defValue {
  return ARUtils_convertStringWithByteArray_([self getBytesWithInt:id_ withByteArray:[((NSString *) nil_chk(defValue)) getBytesWithCharsetName:@"UTF-8"]]);
}


#line 160
- (id)optObjWithInt:(jint)id_
   withARBserObject:(ARBserObject *)obj {
  IOSByteArray *data = [self optBytesWithInt:id_];
  if (data == nil) {
    return nil;
  }
  return ARBser_parseWithARBserObject_withByteArray_(obj, data);
}

- (id)getObjWithInt:(jint)id_
   withARBserObject:(ARBserObject *)obj {
  IOSByteArray *data = [self optBytesWithInt:id_];
  if (data == nil) {
    @throw new_ARUnknownFieldException_initWithNSString_(JreStrcat("$I", @"Unable to find field #", id_));
  }
  return ARBser_parseWithARBserObject_withARDataInput_(obj, new_ARDataInput_initWithByteArray_withInt_withInt_(data, 0, ((IOSByteArray *) nil_chk(data))->size_));
}


#line 180
- (jint)getRepeatedCountWithInt:(jint)id_ {
  if ([((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    [((ARSparseArray *) nil_chk(touched_)) putWithInt:id_ withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    id val = [fields_ getWithInt:id_];
    if ([JavaUtilList_class_() isInstance:val]) {
      return [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) check_protocol_cast(val, JavaUtilList_class_())))) size];
    }
    else {
      
#line 187
      return 1;
    }
  }
  return 0;
}


#line 197
- (id<JavaUtilList>)getRepeatedLongWithInt:(jint)id_ {
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  if ([((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    [((ARSparseArray *) nil_chk(touched_)) putWithInt:id_ withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    id val = [fields_ getWithInt:id_];
    if ([val isKindOfClass:[JavaLangLong class]]) {
      [res addWithId:(JavaLangLong *) check_class_cast(val, [JavaLangLong class])];
    }
    else
#line 204
    if ([JavaUtilList_class_() isInstance:val]) {
      id<JavaUtilList> rep = (id<JavaUtilList>) check_protocol_cast(val, JavaUtilList_class_());
      for (id __strong val2 in nil_chk(rep)) {
        if ([val2 isKindOfClass:[JavaLangLong class]]) {
          [res addWithId:(JavaLangLong *) check_class_cast(val2, [JavaLangLong class])];
        }
        else {
          
#line 210
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Expected type: long, got ", [[nil_chk(val2) getClass] getSimpleName]));
        }
      }
    }
    else {
      
#line 214
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Expected type: long, got ", [[nil_chk(val) getClass] getSimpleName]));
    }
  }
  return res;
}


#line 221
- (id<JavaUtilList>)getRepeatedIntWithInt:(jint)id_ {
  id<JavaUtilList> src = [self getRepeatedLongWithInt:id_];
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (JavaLangLong * __strong l in nil_chk(src)) {
    [res addWithId:JavaLangInteger_valueOfWithInt_(ARUtils_convertIntWithLong_([((JavaLangLong *) nil_chk(l)) longLongValue]))];
  }
  return res;
}


#line 234
- (id<JavaUtilList>)getRepeatedBytesWithInt:(jint)id_ {
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  if ([((ARSparseArray *) nil_chk(fields_)) containsKeyWithInt:id_]) {
    [((ARSparseArray *) nil_chk(touched_)) putWithInt:id_ withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    id val = [fields_ getWithInt:id_];
    if ([val isKindOfClass:[IOSByteArray class]]) {
      [res addWithId:(IOSByteArray *) check_class_cast(val, [IOSByteArray class])];
    }
    else
#line 241
    if ([JavaUtilList_class_() isInstance:val]) {
      id<JavaUtilList> rep = (id<JavaUtilList>) check_protocol_cast(val, JavaUtilList_class_());
      
#line 244
      for (id __strong val2 in nil_chk(rep)) {
        if ([val2 isKindOfClass:[IOSByteArray class]]) {
          [res addWithId:(IOSByteArray *) check_class_cast(val2, [IOSByteArray class])];
        }
        else {
          
#line 248
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Expected type: byte[], got ", [[nil_chk(val2) getClass] getSimpleName]));
        }
      }
    }
    else {
      
#line 252
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Expected type: byte[], got ", [[nil_chk(val) getClass] getSimpleName]));
    }
  }
  return res;
}


#line 259
- (id<JavaUtilList>)getRepeatedStringWithInt:(jint)id_ {
  id<JavaUtilList> src = [self getRepeatedBytesWithInt:id_];
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (IOSByteArray * __strong l in nil_chk(src)) {
    [res addWithId:ARUtils_convertStringWithByteArray_(l)];
  }
  return res;
}


#line 273
- (id<JavaUtilList>)getRepeatedObjWithInt:(jint)id_
                         withJavaUtilList:(id<JavaUtilList>)objs {
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (IOSByteArray * __strong v in nil_chk([self getRepeatedBytesWithInt:id_])) {
    [res addWithId:ARBser_parseWithARBserObject_withARDataInput_([((id<JavaUtilList>) nil_chk(objs)) removeWithInt:0], new_ARDataInput_initWithByteArray_withInt_withInt_(v, 0, ((IOSByteArray *) nil_chk(v))->size_))];
  }
  return res;
}

+ (IOSObjectArray *)__annotations_getRepeatedObjWithInt_withJavaUtilList_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARSparseArray:", "BserValues", NULL, 0x1, NULL, NULL },
    { "hasRemaining", NULL, "Z", 0x1, NULL, NULL },
    { "buildRemaining", NULL, "Lim.actor.runtime.collections.SparseArray;", 0x1, NULL, NULL },
    { "optLongWithInt:", "optLong", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getLongWithInt:", "getLong", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "getLongWithInt:withLong:", "getLong", "J", 0x1, "Ljava.io.IOException;", NULL },
    { "optIntWithInt:", "optInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "getIntWithInt:", "getInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "getIntWithInt:withInt:", "getInt", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "optDoubleWithInt:", "optDouble", "D", 0x1, "Ljava.io.IOException;", NULL },
    { "getDoubleWithInt:", "getDouble", "D", 0x1, "Ljava.io.IOException;", NULL },
    { "getDoubleWithInt:withDouble:", "getDouble", "D", 0x1, "Ljava.io.IOException;", NULL },
    { "optBoolWithInt:", "optBool", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "getBoolWithInt:", "getBool", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "getBoolWithInt:withBoolean:", "getBool", "Z", 0x1, "Ljava.io.IOException;", NULL },
    { "optBytesWithInt:", "optBytes", "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "getBytesWithInt:", "getBytes", "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "getBytesWithInt:withByteArray:", "getBytes", "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "optStringWithInt:", "optString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "getStringWithInt:withNSString:", "getString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;", NULL },
    { "optObjWithInt:withARBserObject:", "optObj", "TT;", 0x1, "Ljava.io.IOException;", "<T:Lim/actor/runtime/bser/BserObject;>(ITT;)TT;" },
    { "getObjWithInt:withARBserObject:", "getObj", "TT;", 0x1, "Ljava.io.IOException;", "<T:Lim/actor/runtime/bser/BserObject;>(ITT;)TT;" },
    { "getRepeatedCountWithInt:", "getRepeatedCount", "I", 0x1, "Ljava.io.IOException;", NULL },
    { "getRepeatedLongWithInt:", "getRepeatedLong", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", NULL },
    { "getRepeatedIntWithInt:", "getRepeatedInt", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", NULL },
    { "getRepeatedBytesWithInt:", "getRepeatedBytes", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", NULL },
    { "getRepeatedStringWithInt:", "getRepeatedString", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", NULL },
    { "getRepeatedObjWithInt:withJavaUtilList:", "getRepeatedObj", "Ljava.util.List;", 0x1, "Ljava.io.IOException;", "<T:Lim/actor/runtime/bser/BserObject;>(ILjava/util/List<TT;>;)Ljava/util/List<TT;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fields_", NULL, 0x2, "Lim.actor.runtime.collections.SparseArray;", NULL, "Lim/actor/runtime/collections/SparseArray<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "touched_", NULL, 0x2, "Lim.actor.runtime.collections.SparseArray;", NULL, "Lim/actor/runtime/collections/SparseArray<Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARBserValues = { 2, "BserValues", "im.actor.runtime.bser", NULL, 0x1, 29, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARBserValues;
}

@end


#line 23
void ARBserValues_initWithARSparseArray_(ARBserValues *self, ARSparseArray *fields) {
  (void) NSObject_init(self);
  self->touched_ = new_ARSparseArray_init();
  
#line 24
  self->fields_ = fields;
}


#line 23
ARBserValues *new_ARBserValues_initWithARSparseArray_(ARSparseArray *fields) {
  ARBserValues *self = [ARBserValues alloc];
  ARBserValues_initWithARSparseArray_(self, fields);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARBserValues)

#pragma clang diagnostic pop
