//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/BserWriter.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/bser/Limits.h"
#include "im/actor/runtime/bser/WireTypes.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/Boolean.h>
#include <j2objc/java/lang/Double.h>
#include <j2objc/java/lang/IllegalArgumentException.h>
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/util/List.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARBserWriter () {
 @public
  ARDataOutput *stream_;
  ARSparseArray *writtenFields_;
}

- (void)writeTagWithInt:(jint)fieldNumber
                withInt:(jint)wireType;

- (void)writeVarIntFieldWithInt:(jint)fieldNumber
                       withLong:(jlong)value;

- (void)writeBytesFieldWithInt:(jint)fieldNumber
                 withByteArray:(IOSByteArray *)value;

- (void)writeVar64FixedWithInt:(jint)fieldNumber
                      withLong:(jlong)value;

- (void)writeVar32FixedWithInt:(jint)fieldNumber
                      withLong:(jlong)value;

- (void)writeVarIntWithLong:(jlong)value;

- (void)writeLongWithLong:(jlong)v;

- (void)writeIntWithLong:(jlong)v;

- (void)writeBytesWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_FIELD_SETTER(ARBserWriter, stream_, ARDataOutput *)
J2OBJC_FIELD_SETTER(ARBserWriter, writtenFields_, ARSparseArray *)

__attribute__((unused)) static void ARBserWriter_writeTagWithInt_withInt_(ARBserWriter *self, jint fieldNumber, jint wireType);

__attribute__((unused)) static void ARBserWriter_writeVarIntFieldWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value);

__attribute__((unused)) static void ARBserWriter_writeBytesFieldWithInt_withByteArray_(ARBserWriter *self, jint fieldNumber, IOSByteArray *value);

__attribute__((unused)) static void ARBserWriter_writeVar64FixedWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value);

__attribute__((unused)) static void ARBserWriter_writeVar32FixedWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value);

__attribute__((unused)) static void ARBserWriter_writeVarIntWithLong_(ARBserWriter *self, jlong value);

__attribute__((unused)) static void ARBserWriter_writeLongWithLong_(ARBserWriter *self, jlong v);

__attribute__((unused)) static void ARBserWriter_writeIntWithLong_(ARBserWriter *self, jlong v);

__attribute__((unused)) static void ARBserWriter_writeBytesWithByteArray_(ARBserWriter *self, IOSByteArray *data);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/BserWriter.java"


#line 14
@implementation ARBserWriter


#line 20
- (instancetype)initWithARDataOutput:(ARDataOutput *)stream {
  ARBserWriter_initWithARDataOutput_(self, stream);
  return self;
}


#line 28
- (void)writeBytesWithInt:(jint)fieldNumber
            withByteArray:(IOSByteArray *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
  }
  if (((IOSByteArray *) nil_chk(value))->size_ > ARLimits_MAX_BLOCK_SIZE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unable to write more than 1 MB");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  ARBserWriter_writeBytesFieldWithInt_withByteArray_(self, fieldNumber, value);
}


#line 39
- (void)writeStringWithInt:(jint)fieldNumber
              withNSString:(NSString *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  ARBserWriter_writeBytesFieldWithInt_withByteArray_(self, fieldNumber, [((NSString *) nil_chk(value)) getBytes]);
}


#line 47
- (void)writeBoolWithInt:(jint)fieldNumber
             withBoolean:(jboolean)value {
  ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, value ? 1 : 0);
}


#line 51
- (void)writeIntWithInt:(jint)fieldNumber
                withInt:(jint)value {
  ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, value);
}


#line 55
- (void)writeIntFixedWithInt:(jint)fieldNumber
                     withInt:(jint)value {
  ARBserWriter_writeVar32FixedWithInt_withLong_(self, fieldNumber, value);
}


#line 59
- (void)writeDoubleWithInt:(jint)fieldNumber
                withDouble:(jdouble)value {
  ARBserWriter_writeVar64FixedWithInt_withLong_(self, fieldNumber, JavaLangDouble_doubleToLongBitsWithDouble_(value));
}


#line 63
- (void)writeLongFixedWithInt:(jint)fieldNumber
                     withLong:(jlong)value {
  ARBserWriter_writeVar64FixedWithInt_withLong_(self, fieldNumber, JavaLangDouble_doubleToLongBitsWithDouble_(value));
}


#line 67
- (void)writeLongWithInt:(jint)fieldNumber
                withLong:(jlong)value {
  ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, value);
}


#line 71
- (void)writeRepeatedLongWithInt:(jint)fieldNumber
                withJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values can not be null");
  }
  if ([((id<JavaUtilList>) nil_chk(values)) size] > ARLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Too many values");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  for (JavaLangLong * __strong l in values) {
    if (l == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
    }
    ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, [((JavaLangLong *) nil_chk(l)) longLongValue]);
  }
}


#line 87
- (void)writeRepeatedIntWithInt:(jint)fieldNumber
               withJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values can not be null");
  }
  if ([((id<JavaUtilList>) nil_chk(values)) size] > ARLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Too many values");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  for (JavaLangInteger * __strong l in values) {
    if (l == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
    }
    ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, [((JavaLangInteger *) nil_chk(l)) intValue]);
  }
}


#line 103
- (void)writeRepeatedBoolWithInt:(jint)fieldNumber
                withJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values can not be null");
  }
  if ([((id<JavaUtilList>) nil_chk(values)) size] > ARLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Too many values");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  for (JavaLangBoolean * __strong l in values) {
    if (l == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
    }
    [self writeBoolWithInt:fieldNumber withBoolean:[((JavaLangBoolean *) nil_chk(l)) booleanValue]];
  }
}


#line 119
- (void)writeRepeatedBytesWithInt:(jint)fieldNumber
                 withJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values can not be null");
  }
  if ([((id<JavaUtilList>) nil_chk(values)) size] > ARLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Too many values");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  for (IOSByteArray * __strong l in values) {
    if (l == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
    }
    [self writeBytesWithInt:fieldNumber withByteArray:l];
  }
}


#line 135
- (void)writeRepeatedObjWithInt:(jint)fieldNumber
               withJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Values can not be null");
  }
  if ([((id<JavaUtilList>) nil_chk(values)) size] > ARLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Too many values");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  for (ARBserObject * __strong l in values) {
    if (l == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
    }
    [self writeObjectWithInt:fieldNumber withARBserObject:l];
  }
}


#line 151
- (void)writeObjectWithInt:(jint)fieldNumber
          withARBserObject:(ARBserObject *)value {
  if (value == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can not be null");
  }
  [((ARSparseArray *) nil_chk(writtenFields_)) putWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, ARWireTypes_TYPE_LENGTH_DELIMITED);
  ARDataOutput *outputStream = new_ARDataOutput_init();
  ARBserWriter *writer = new_ARBserWriter_initWithARDataOutput_(outputStream);
  [((ARBserObject *) nil_chk(value)) serializeWithARBserWriter:writer];
  ARBserWriter_writeBytesWithByteArray_(self, [outputStream toByteArray]);
}


#line 163
- (void)writeUnmappedWithInt:(jint)fieldNumber
                      withId:(id)value {
  if ([((JavaLangBoolean *) nil_chk([((ARSparseArray *) nil_chk(writtenFields_)) getWithInt:fieldNumber withId:JavaLangBoolean_valueOfWithBoolean_(false)])) booleanValue]) {
    return;
  }
  
#line 168
  if ([value isKindOfClass:[JavaLangLong class]]) {
    [self writeLongWithInt:fieldNumber withLong:[((JavaLangLong *) nil_chk((JavaLangLong *) check_class_cast(value, [JavaLangLong class]))) longLongValue]];
  }
  else
#line 170
  if ([value isKindOfClass:[IOSByteArray class]]) {
    [self writeBytesWithInt:fieldNumber withByteArray:(IOSByteArray *) check_class_cast(value, [IOSByteArray class])];
  }
  else
#line 172
  if ([JavaUtilList_class_() isInstance:value]) {
    for (id __strong o in nil_chk((id<JavaUtilList>) check_protocol_cast(value, JavaUtilList_class_()))) {
      if ([o isKindOfClass:[JavaLangLong class]]) {
        [self writeLongWithInt:fieldNumber withLong:[((JavaLangLong *) nil_chk((JavaLangLong *) check_class_cast(o, [JavaLangLong class]))) longLongValue]];
      }
      else
#line 176
      if ([o isKindOfClass:[IOSByteArray class]]) {
        [self writeBytesWithInt:fieldNumber withByteArray:(IOSByteArray *) check_class_cast(o, [IOSByteArray class])];
      }
      else {
        
#line 179
        @throw new_JavaIoIOException_initWithNSString_(@"Incorrect unmapped value in List");
      }
    }
  }
  else {
    
#line 183
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect unmapped value");
  }
}


#line 187
- (void)writeRawWithByteArray:(IOSByteArray *)raw {
  if (raw == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Raw can not be null");
  }
  
#line 192
  [((ARDataOutput *) nil_chk(stream_)) writeBytesWithByteArray:raw withInt:0 withInt:((IOSByteArray *) nil_chk(raw))->size_];
}


#line 195
- (void)writeTagWithInt:(jint)fieldNumber
                withInt:(jint)wireType {
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, wireType);
}


#line 205
- (void)writeVarIntFieldWithInt:(jint)fieldNumber
                       withLong:(jlong)value {
  ARBserWriter_writeVarIntFieldWithInt_withLong_(self, fieldNumber, value);
}

- (void)writeBytesFieldWithInt:(jint)fieldNumber
                 withByteArray:(IOSByteArray *)value {
  ARBserWriter_writeBytesFieldWithInt_withByteArray_(self, fieldNumber, value);
}

- (void)writeVar64FixedWithInt:(jint)fieldNumber
                      withLong:(jlong)value {
  ARBserWriter_writeVar64FixedWithInt_withLong_(self, fieldNumber, value);
}

- (void)writeVar32FixedWithInt:(jint)fieldNumber
                      withLong:(jlong)value {
  ARBserWriter_writeVar32FixedWithInt_withLong_(self, fieldNumber, value);
}


#line 226
- (void)writeVarIntWithLong:(jlong)value {
  ARBserWriter_writeVarIntWithLong_(self, value);
}

- (void)writeLongWithLong:(jlong)v {
  ARBserWriter_writeLongWithLong_(self, v);
}

- (void)writeIntWithLong:(jlong)v {
  ARBserWriter_writeIntWithLong_(self, v);
}

- (void)writeBytesWithByteArray:(IOSByteArray *)data {
  ARBserWriter_writeBytesWithByteArray_(self, data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARDataOutput:", "BserWriter", NULL, 0x1, NULL, NULL },
    { "writeBytesWithInt:withByteArray:", "writeBytes", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeStringWithInt:withNSString:", "writeString", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeBoolWithInt:withBoolean:", "writeBool", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeIntWithInt:withInt:", "writeInt", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeIntFixedWithInt:withInt:", "writeIntFixed", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeDoubleWithInt:withDouble:", "writeDouble", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeLongFixedWithInt:withLong:", "writeLongFixed", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeLongWithInt:withLong:", "writeLong", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRepeatedLongWithInt:withJavaUtilList:", "writeRepeatedLong", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRepeatedIntWithInt:withJavaUtilList:", "writeRepeatedInt", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRepeatedBoolWithInt:withJavaUtilList:", "writeRepeatedBool", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRepeatedBytesWithInt:withJavaUtilList:", "writeRepeatedBytes", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRepeatedObjWithInt:withJavaUtilList:", "writeRepeatedObj", "V", 0x1, "Ljava.io.IOException;", "<T:Lim/actor/runtime/bser/BserObject;>(ILjava/util/List<TT;>;)V" },
    { "writeObjectWithInt:withARBserObject:", "writeObject", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeUnmappedWithInt:withId:", "writeUnmapped", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeRawWithByteArray:", "writeRaw", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeTagWithInt:withInt:", "writeTag", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeVarIntFieldWithInt:withLong:", "writeVarIntField", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeBytesFieldWithInt:withByteArray:", "writeBytesField", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeVar64FixedWithInt:withLong:", "writeVar64Fixed", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeVar32FixedWithInt:withLong:", "writeVar32Fixed", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeVarIntWithLong:", "writeVarInt", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeLongWithLong:", "writeLong", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeIntWithLong:", "writeInt", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "writeBytesWithByteArray:", "writeBytes", "V", 0x2, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stream_", NULL, 0x2, "Lim.actor.runtime.bser.DataOutput;", NULL, NULL, .constantValue.asLong = 0 },
    { "writtenFields_", NULL, 0x2, "Lim.actor.runtime.collections.SparseArray;", NULL, "Lim/actor/runtime/collections/SparseArray<Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARBserWriter = { 2, "BserWriter", "im.actor.runtime.bser", NULL, 0x1, 26, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARBserWriter;
}

@end


#line 20
void ARBserWriter_initWithARDataOutput_(ARBserWriter *self, ARDataOutput *stream) {
  (void) NSObject_init(self);
  self->writtenFields_ = new_ARSparseArray_init();
  
#line 21
  if (stream == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Stream can not be null");
  }
  
#line 25
  self->stream_ = stream;
}


#line 20
ARBserWriter *new_ARBserWriter_initWithARDataOutput_(ARDataOutput *stream) {
  ARBserWriter *self = [ARBserWriter alloc];
  ARBserWriter_initWithARDataOutput_(self, stream);
  return self;
}


#line 195
void ARBserWriter_writeTagWithInt_withInt_(ARBserWriter *self, jint fieldNumber, jint wireType) {
  fieldNumber = (fieldNumber & (jint) 0xFFFF);
  if (fieldNumber <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field Number must greater than zero");
  }
  
#line 201
  jlong tag = ((jlong) (JreLShift32(fieldNumber, 3)) | wireType);
  [((ARDataOutput *) nil_chk(self->stream_)) writeVarIntWithLong:tag];
}


#line 205
void ARBserWriter_writeVarIntFieldWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value) {
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, ARWireTypes_TYPE_VARINT);
  ARBserWriter_writeVarIntWithLong_(self, value);
}

void ARBserWriter_writeBytesFieldWithInt_withByteArray_(ARBserWriter *self, jint fieldNumber, IOSByteArray *value) {
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, ARWireTypes_TYPE_LENGTH_DELIMITED);
  ARBserWriter_writeBytesWithByteArray_(self, value);
}

void ARBserWriter_writeVar64FixedWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value) {
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, ARWireTypes_TYPE_64BIT);
  ARBserWriter_writeLongWithLong_(self, value);
}

void ARBserWriter_writeVar32FixedWithInt_withLong_(ARBserWriter *self, jint fieldNumber, jlong value) {
  ARBserWriter_writeTagWithInt_withInt_(self, fieldNumber, ARWireTypes_TYPE_32BIT);
  ARBserWriter_writeIntWithLong_(self, value);
}


#line 226
void ARBserWriter_writeVarIntWithLong_(ARBserWriter *self, jlong value) {
  [((ARDataOutput *) nil_chk(self->stream_)) writeVarIntWithLong:value & (jint) 0xFFFFFFFF];
}

void ARBserWriter_writeLongWithLong_(ARBserWriter *self, jlong v) {
  [((ARDataOutput *) nil_chk(self->stream_)) writeLongWithLong:v & (jint) 0xFFFFFFFF];
}

void ARBserWriter_writeIntWithLong_(ARBserWriter *self, jlong v) {
  [((ARDataOutput *) nil_chk(self->stream_)) writeIntWithInt:(jint) (v & (jint) 0xFFFF)];
}

void ARBserWriter_writeBytesWithByteArray_(ARBserWriter *self, IOSByteArray *data) {
  [((ARDataOutput *) nil_chk(self->stream_)) writeProtoBytesWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARBserWriter)

#pragma clang diagnostic pop
