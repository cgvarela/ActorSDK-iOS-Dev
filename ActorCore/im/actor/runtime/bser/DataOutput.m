//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/DataOutput.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/bser/BserLimits.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/IllegalArgumentException.h>
#include <j2objc/java/lang/System.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARDataOutput () {
 @public
  IOSByteArray *data_;
  jint offset_;
}

- (void)expandWithInt:(jint)size;

@end

J2OBJC_FIELD_SETTER(ARDataOutput, data_, IOSByteArray *)

__attribute__((unused)) static void ARDataOutput_expandWithInt_(ARDataOutput *self, jint size);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/bser/DataOutput.java"


#line 9
@implementation ARDataOutput

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 13
- (instancetype)init {
  ARDataOutput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 17
+ (jint)growSizeWithInt:(jint)currentSize {
  return ARDataOutput_growSizeWithInt_(currentSize);
}

- (void)expandWithInt:(jint)size {
  ARDataOutput_expandWithInt_(self, size);
}


#line 32
- (void)writeLongWithLong:(jlong)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 8) {
    ARDataOutput_expandWithInt_(self, offset_ + 8);
  }
  
#line 37
  v = v & (jlong) 0xFFFFFFFFFFFFFFFFLL;
  
#line 39
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 56)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 48)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 40)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 32)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift64(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}


#line 49
- (void)writeIntWithInt:(jint)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 4) {
    ARDataOutput_expandWithInt_(self, offset_ + 4);
  }
  
#line 54
  v = v & (jint) 0xFFFFFFFF;
  
#line 56
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift32(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift32(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((JreRShift32(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}


#line 62
- (void)writeByteWithByte:(jbyte)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 1) {
    ARDataOutput_expandWithInt_(self, offset_ + 1);
  }
  *IOSByteArray_GetRef(data_, offset_++) = v;
}

- (void)writeByteWithInt:(jint)v {
  if (v < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can't be negative");
  }
  if (v > 255) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can't be more than 255");
  }
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 1) {
    ARDataOutput_expandWithInt_(self, offset_ + 1);
  }
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) v;
}

- (void)writeVarIntWithLong:(jlong)v {
  while ((v & (jlong) 0xffffffffffffff80l) != 0l) {
    [self writeByteWithInt:(jint) ((v & (jint) 0x7f) | (jint) 0x80)];
    JreURShiftAssignLong(&v, 7);
  }
  
#line 88
  [self writeByteWithInt:(jint) (v & (jint) 0x7f)];
}


#line 91
- (void)writeProtoBytesWithByteArray:(IOSByteArray *)v
                             withInt:(jint)ofs
                             withInt:(jint)len {
  [self writeVarIntWithLong:len];
  [self writeBytesWithByteArray:v withInt:ofs withInt:len];
}


#line 96
- (void)writeBytesWithByteArray:(IOSByteArray *)v {
  [self writeBytesWithByteArray:v withInt:0 withInt:((IOSByteArray *) nil_chk(v))->size_];
}

- (void)writeBytesWithByteArray:(IOSByteArray *)v
                        withInt:(jint)ofs
                        withInt:(jint)len {
  if (len > ARBserLimits_MAX_BLOCK_SIZE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unable to write more than 1 MB");
  }
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Length can't be negative");
  }
  if (ofs < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Offset can't be negative");
  }
  if (ofs + len > ((IOSByteArray *) nil_chk(v))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Inconsistent sizes");
  }
  
#line 114
  if (((IOSByteArray *) nil_chk(data_))->size_ < offset_ + v->size_) {
    ARDataOutput_expandWithInt_(self, offset_ + v->size_);
  }
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(data_, offset_++) = IOSByteArray_Get(v, i + ofs);
  }
}


#line 122
- (void)writeProtoLongsWithLongArray:(IOSLongArray *)values {
  if (((IOSLongArray *) nil_chk(values))->size_ > ARBserLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Values can't be more than ", ARBserLimits_MAX_PROTO_REPEATED));
  }
  [self writeVarIntWithLong:values->size_];
  {
    IOSLongArray *a__ =
#line 127
    values;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong l = *b__++;
      
#line 128
      [self writeLongWithLong:l];
    }
  }
}


#line 132
- (void)writeProtoStringWithNSString:(NSString *)value {
  IOSByteArray *data = [((NSString *) nil_chk(value)) getBytesWithCharsetName:@"UTF-8"];
  [self writeProtoBytesWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
}

- (void)writeProtoBoolWithBoolean:(jboolean)v {
  [self writeByteWithInt:v ? 1 : 0];
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:offset_];
  for (jint i = 0; i < offset_; i++) {
    *IOSByteArray_GetRef(res, i) = IOSByteArray_Get(nil_chk(data_), i);
  }
  return res;
}

- (void)writeASN1LengthWithInt:(jint)length {
  if (length > 127) {
    jint size = 1;
    jint val = length;
    
#line 154
    while ((JreURShiftAssignInt(&val, 8)) != 0) {
      size++;
    }
    
#line 158
    [self writeByteWithInt:(size | (jint) 0x80) & (jint) 0xFF];
    
#line 160
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      [self writeByteWithInt:(JreRShift32(length, i)) & (jint) 0xFF];
    }
  }
  else {
    
#line 164
    [self writeByteWithInt:length & (jint) 0xFF];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DataOutput", NULL, 0x1, NULL, NULL },
    { "growSizeWithInt:", "growSize", "I", 0x9, NULL, NULL },
    { "expandWithInt:", "expand", "V", 0x2, NULL, NULL },
    { "writeLongWithLong:", "writeLong", "V", 0x1, NULL, NULL },
    { "writeIntWithInt:", "writeInt", "V", 0x1, NULL, NULL },
    { "writeByteWithByte:", "writeByte", "V", 0x1, NULL, NULL },
    { "writeByteWithInt:", "writeByte", "V", 0x1, NULL, NULL },
    { "writeVarIntWithLong:", "writeVarInt", "V", 0x1, NULL, NULL },
    { "writeProtoBytesWithByteArray:withInt:withInt:", "writeProtoBytes", "V", 0x1, NULL, NULL },
    { "writeBytesWithByteArray:", "writeBytes", "V", 0x1, NULL, NULL },
    { "writeBytesWithByteArray:withInt:withInt:", "writeBytes", "V", 0x1, NULL, NULL },
    { "writeProtoLongsWithLongArray:", "writeProtoLongs", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeProtoStringWithNSString:", "writeProtoString", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeProtoBoolWithBoolean:", "writeProtoBool", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "toByteArray", NULL, "[B", 0x1, NULL, NULL },
    { "writeASN1LengthWithInt:", "writeASN1Length", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "data_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "offset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARDataOutput = { 2, "DataOutput", "im.actor.runtime.bser", NULL, 0x1, 16, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARDataOutput;
}

@end


#line 13
void ARDataOutput_init(ARDataOutput *self) {
  (void) NSObject_init(self);
  self->data_ = [IOSByteArray newArrayWithLength:
#line 10
  16];
}


#line 13
ARDataOutput *new_ARDataOutput_init() {
  ARDataOutput *self = [ARDataOutput alloc];
  ARDataOutput_init(self);
  return self;
}


#line 17
jint ARDataOutput_growSizeWithInt_(jint currentSize) {
  ARDataOutput_initialize();
  
#line 18
  return currentSize <= 4 ? 8 : currentSize * 2;
}


#line 21
void ARDataOutput_expandWithInt_(ARDataOutput *self, jint size) {
  jint nSize = ((IOSByteArray *) nil_chk(self->data_))->size_;
  while (nSize < size) {
    nSize = ARDataOutput_growSizeWithInt_(nSize);
  }
  
#line 27
  IOSByteArray *nData = [IOSByteArray newArrayWithLength:nSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->data_, 0, nData, 0, self->offset_);
  self->data_ = nData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARDataOutput)

#pragma clang diagnostic pop
