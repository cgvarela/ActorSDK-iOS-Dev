//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/MainThreadRuntime.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/j2objc/annotations/ObjectiveCName.h"
#include "im/actor/runtime/MainThreadRuntime.h"
#include "java/lang/Runnable.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARMainThreadRuntime : NSObject

@end

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/MainThreadRuntime.java"


#line 12
@implementation ARMainThreadRuntime

+ (IOSObjectArray *)__annotations_postToMainThreadWithJavaLangRunnable_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"postToMainThreadWithRunnable:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isMainThread {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"isMainThread"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isSingleThread {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"isSingleThread"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "postToMainThreadWithRunnable:", "postToMainThread", "V", 0x401, NULL, NULL },
    { "isMainThread", NULL, "Z", 0x401, NULL, NULL },
    { "isSingleThread", NULL, "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _ARMainThreadRuntime = { 2, "MainThreadRuntime", "im.actor.runtime", NULL, 0x609, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMainThreadRuntime;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ARMainThreadRuntime)

#pragma clang diagnostic pop
