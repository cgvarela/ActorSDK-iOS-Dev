//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/ThreadingRuntime.java
//

#ifndef _ImActorRuntimeThreadingRuntime_H_
#define _ImActorRuntimeThreadingRuntime_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class ARAbsTimerCompat;
@class ARActorDispatcher;
@class ARActorSystem;
@class ARAtomicIntegerCompat;
@class ARAtomicLongCompat;
@class ARThreadLocalCompat;
@class ARThreadPriorityEnum;
@protocol JavaLangRunnable;

/*!
 @brief Provider for multithreading support.
 Contains all required methods for performing asynchronous operations.
 */
@protocol ARThreadingRuntime < NSObject, JavaObject >

/*!
 @brief Time in ms from some fixed point in time and that not relied to local time changes.
 @return time in ms
 */
- (jlong)getActorTime;

/*!
 @brief Current unix-time of system
 @return time in ms
 */
- (jlong)getCurrentTime;

/*!
 @brief Synchronized time by NTP.
 Used for more accurate timing of messages.
 Return value from getCurrentTime() if not supported.
 @return time in ms
 */
- (jlong)getSyncedCurrentTime;

/*!
 @brief Number of computing cores in environment
 @return cores count
 */
- (jint)getCoresCount;

/*!
 @brief Creating compatable AtomicInteger object
 @param value initial value of AtomicInteger
 @return the AtomicInteger
 */
- (ARAtomicIntegerCompat *)createAtomicIntWithInitValue:(jint)value;

/*!
 @brief Creating compatable AtomicLong object
 @param value initial value of AtomicLong
 @return the AtomicLong
 */
- (ARAtomicLongCompat *)createAtomicLongWithInitValue:(jlong)value;

/*!
 @brief Creating compatable ThreadLocal object
 @return the ThreadLocal object
 */
- (ARThreadLocalCompat *)createThreadLocal;

/*!
 @brief Creating Timer object
 @param runnable timer action
 @return the Timer object
 */
- (ARAbsTimerCompat *)createTimer:(id<JavaLangRunnable>)runnable;

/*!
 @brief Creating of Actor Dispatcher for dispatching of actor's Envelopes
 @param name         name of dispatcher
 @param threadsCount desired thread count
 @param priority     priority of dispatcher
 @param actorSystem  ActorSystem for dispatcher
 @return created dispatcher
 */
- (ARActorDispatcher *)createDispatcherWithName:(NSString *)name
                               withThreadsCount:(jint)threadsCount
                                   withPriority:(ARThreadPriorityEnum *)priority
                                withActorSystem:(ARActorSystem *)actorSystem;

/*!
 @brief Creating dispatcher with default configuration
 @param name     name of dispatcher
 @param priority priority of dispatcher
 @param system   ActorSystem of dispatcher
 @return created dispatcher
 */
- (ARActorDispatcher *)createDefaultDispatcherWithName:(NSString *)name
                                          withPriority:(ARThreadPriorityEnum *)priority
                                       withActorSystem:(ARActorSystem *)system;

@end

J2OBJC_EMPTY_STATIC_INIT(ARThreadingRuntime)

J2OBJC_TYPE_LITERAL_HEADER(ARThreadingRuntime)

#define ImActorRuntimeThreadingRuntime ARThreadingRuntime


#pragma clang diagnostic pop
#endif // _ImActorRuntimeThreadingRuntime_H_
