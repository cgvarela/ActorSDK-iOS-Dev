//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/mtproto/ManagedConnection.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/Crypto.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/crypto/CRC32.h"
#include "im/actor/runtime/mtproto/AsyncConnection.h"
#include "im/actor/runtime/mtproto/AsyncConnectionFactory.h"
#include "im/actor/runtime/mtproto/AsyncConnectionInterface.h"
#include "im/actor/runtime/mtproto/ConnectionCallback.h"
#include "im/actor/runtime/mtproto/ConnectionEndpoint.h"
#include "im/actor/runtime/mtproto/ManagedConnection.h"
#include "im/actor/runtime/mtproto/ManagedConnectionCreateCallback.h"
#include "im/actor/runtime/threading/AbsTimerCompat.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Random.h"
#include "java/util/Set.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ARManagedConnection_HANDSHAKE_TIMEOUT 15000
#define ARManagedConnection_RESPONSE_TIMEOUT 15000
#define ARManagedConnection_PING_TIMEOUT 300000
#define ARManagedConnection_HEADER_PROTO 0
#define ARManagedConnection_HEADER_PING 1
#define ARManagedConnection_HEADER_PONG 2
#define ARManagedConnection_HEADER_DROP 3
#define ARManagedConnection_HEADER_REDIRECT 4
#define ARManagedConnection_HEADER_ACK 6
#define ARManagedConnection_HEADER_HANDSHAKE_REQUEST 255
#define ARManagedConnection_HEADER_HANDSHAKE_RESPONSE 254

@interface ARManagedConnection () {
 @public
  id<ARAsyncConnectionInterface> connectionInterface_;
  ARCRC32 *CRC32_ENGINE_;
  NSString *TAG_;
  ARAsyncConnection *rawConnection_;
  id<ARConnectionCallback> callback_;
  id<ARManagedConnectionCreateCallback> factoryCallback_;
  jint connectionId_;
  jint mtprotoVersion_;
  jint apiMajorVersion_;
  jint apiMinorVersion_;
  jint receivedPackages_;
  jint sentPackages_;
  jboolean isClosed_;
  jboolean isOpened_;
  jboolean isHandshakePerformed_;
  IOSByteArray *handshakeRandomData_;
  ARAbsTimerCompat *connectionTimeout_;
  ARAbsTimerCompat *handshakeTimeout_;
  ARAbsTimerCompat *pingTask_;
  JavaUtilHashMap *schedulledPings_;
  JavaUtilHashMap *packageTimers_;
}

- (void)sendHandshakeRequest;

- (void)onHandshakePackageWithByteArray:(IOSByteArray *)data;

- (void)onProtoPackageWithByteArray:(IOSByteArray *)data;

- (void)sendProtoPackageWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset
                              withInt:(jint)len;

- (void)onPingPackageWithByteArray:(IOSByteArray *)data;

- (void)onPongPackageWithByteArray:(IOSByteArray *)data;

- (void)sendPingMessage;

- (void)refreshTimeouts;

- (void)onAckPackageWithByteArray:(IOSByteArray *)data;

- (void)sendAckPackageWithInt:(jint)receivedIndex;

- (void)onDropPackageWithByteArray:(IOSByteArray *)data;

- (void)onRawConnected;

- (void)onRawReceivedWithByteArray:(IOSByteArray *)data;

- (void)onRawClosed;

- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data;

- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data
               withInt:(jint)offset
               withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ARManagedConnection, connectionInterface_, id<ARAsyncConnectionInterface>)
J2OBJC_FIELD_SETTER(ARManagedConnection, CRC32_ENGINE_, ARCRC32 *)
J2OBJC_FIELD_SETTER(ARManagedConnection, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ARManagedConnection, rawConnection_, ARAsyncConnection *)
J2OBJC_FIELD_SETTER(ARManagedConnection, callback_, id<ARConnectionCallback>)
J2OBJC_FIELD_SETTER(ARManagedConnection, factoryCallback_, id<ARManagedConnectionCreateCallback>)
J2OBJC_FIELD_SETTER(ARManagedConnection, handshakeRandomData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ARManagedConnection, connectionTimeout_, ARAbsTimerCompat *)
J2OBJC_FIELD_SETTER(ARManagedConnection, handshakeTimeout_, ARAbsTimerCompat *)
J2OBJC_FIELD_SETTER(ARManagedConnection, pingTask_, ARAbsTimerCompat *)
J2OBJC_FIELD_SETTER(ARManagedConnection, schedulledPings_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ARManagedConnection, packageTimers_, JavaUtilHashMap *)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HANDSHAKE_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, RESPONSE_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, PING_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_PROTO, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_PING, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_PONG, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_DROP, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_REDIRECT, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_ACK, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_HANDSHAKE_REQUEST, jint)

J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, HEADER_HANDSHAKE_RESPONSE, jint)

static JavaUtilRandom *ARManagedConnection_RANDOM_;
J2OBJC_STATIC_FIELD_GETTER(ARManagedConnection, RANDOM_, JavaUtilRandom *)

__attribute__((unused)) static void ARManagedConnection_sendHandshakeRequest(ARManagedConnection *self);

__attribute__((unused)) static void ARManagedConnection_onHandshakePackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_onProtoPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(ARManagedConnection *self, IOSByteArray *data, jint offset, jint len);

__attribute__((unused)) static void ARManagedConnection_onPingPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_onPongPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_sendPingMessage(ARManagedConnection *self);

__attribute__((unused)) static void ARManagedConnection_refreshTimeouts(ARManagedConnection *self);

__attribute__((unused)) static void ARManagedConnection_onAckPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_sendAckPackageWithInt_(ARManagedConnection *self, jint receivedIndex);

__attribute__((unused)) static void ARManagedConnection_onDropPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_onRawConnected(ARManagedConnection *self);

__attribute__((unused)) static void ARManagedConnection_onRawReceivedWithByteArray_(ARManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_onRawClosed(ARManagedConnection *self);

__attribute__((unused)) static void ARManagedConnection_rawPostWithInt_withByteArray_(ARManagedConnection *self, jint header, IOSByteArray *data);

__attribute__((unused)) static void ARManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(ARManagedConnection *self, jint header, IOSByteArray *data, jint offset, jint len);

@interface ARManagedConnection_ConnectionInterface : NSObject < ARAsyncConnectionInterface > {
 @public
  ARManagedConnection *this$0_;
}

- (void)onConnected;

- (void)onReceived:(IOSByteArray *)data;

- (void)onClosed;

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ARManagedConnection_ConnectionInterface)

J2OBJC_FIELD_SETTER(ARManagedConnection_ConnectionInterface, this$0_, ARManagedConnection *)

__attribute__((unused)) static void ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(ARManagedConnection_ConnectionInterface *self, ARManagedConnection *outer$);

__attribute__((unused)) static ARManagedConnection_ConnectionInterface *new_ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(ARManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARManagedConnection_ConnectionInterface)

@interface ARManagedConnection_PingRunnable : NSObject < JavaLangRunnable > {
 @public
  ARManagedConnection *this$0_;
}

- (void)run;

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ARManagedConnection_PingRunnable)

J2OBJC_FIELD_SETTER(ARManagedConnection_PingRunnable, this$0_, ARManagedConnection *)

__attribute__((unused)) static void ARManagedConnection_PingRunnable_initWithARManagedConnection_(ARManagedConnection_PingRunnable *self, ARManagedConnection *outer$);

__attribute__((unused)) static ARManagedConnection_PingRunnable *new_ARManagedConnection_PingRunnable_initWithARManagedConnection_(ARManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARManagedConnection_PingRunnable)

@interface ARManagedConnection_TimeoutRunnable : NSObject < JavaLangRunnable > {
 @public
  ARManagedConnection *this$0_;
}

- (void)run;

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ARManagedConnection_TimeoutRunnable)

J2OBJC_FIELD_SETTER(ARManagedConnection_TimeoutRunnable, this$0_, ARManagedConnection *)

__attribute__((unused)) static void ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(ARManagedConnection_TimeoutRunnable *self, ARManagedConnection *outer$);

__attribute__((unused)) static ARManagedConnection_TimeoutRunnable *new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(ARManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARManagedConnection_TimeoutRunnable)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/mtproto/ManagedConnection.java"

J2OBJC_INITIALIZED_DEFN(ARManagedConnection)


#line 19
@implementation ARManagedConnection

+ (jint)CONNECTION_TIMEOUT {
  return ARManagedConnection_CONNECTION_TIMEOUT;
}


#line 62
- (instancetype)initWithInt:(jint)connectionId
                    withInt:(jint)mtprotoVersion
                    withInt:(jint)apiMajorVersion
                    withInt:(jint)apiMinorVersion
   withARConnectionEndpoint:(ARConnectionEndpoint *)endpoint
   withARConnectionCallback:(id<ARConnectionCallback>)callback
withARManagedConnectionCreateCallback:(id<ARManagedConnectionCreateCallback>)factoryCallback
withARAsyncConnectionFactory:(id<ARAsyncConnectionFactory>)connectionFactory {
  ARManagedConnection_initWithInt_withInt_withInt_withInt_withARConnectionEndpoint_withARConnectionCallback_withARManagedConnectionCreateCallback_withARAsyncConnectionFactory_(self, connectionId, mtprotoVersion, apiMajorVersion, apiMinorVersion, endpoint, callback, factoryCallback, connectionFactory);
  return self;
}


#line 90
- (void)sendHandshakeRequest {
  ARManagedConnection_sendHandshakeRequest(self);
}


#line 108
- (void)onHandshakePackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onHandshakePackageWithByteArray_(self, data);
}


#line 146
- (void)onProtoPackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onProtoPackageWithByteArray_(self, data);
}


#line 151
- (void)sendProtoPackageWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset
                              withInt:(jint)len {
  ARManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(self, data, offset, len);
}


#line 160
- (void)onPingPackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onPingPackageWithByteArray_(self, data);
}


#line 166
- (void)onPongPackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onPongPackageWithByteArray_(self, data);
}


#line 186
- (void)sendPingMessage {
  ARManagedConnection_sendPingMessage(self);
}


#line 206
- (void)refreshTimeouts {
  ARManagedConnection_refreshTimeouts(self);
}


#line 222
- (void)onAckPackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onAckPackageWithByteArray_(self, data);
}


#line 234
- (void)sendAckPackageWithInt:(jint)receivedIndex {
  ARManagedConnection_sendAckPackageWithInt_(self, receivedIndex);
}


#line 246
- (void)onDropPackageWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onDropPackageWithByteArray_(self, data);
}


#line 258
- (void)onRawConnected {
  ARManagedConnection_onRawConnected(self);
}


#line 275
- (void)onRawReceivedWithByteArray:(IOSByteArray *)data {
  ARManagedConnection_onRawReceivedWithByteArray_(self, data);
}


#line 340
- (void)onRawClosed {
  ARManagedConnection_onRawClosed(self);
}


#line 347
- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data {
  ARManagedConnection_rawPostWithInt_withByteArray_(self, header, data);
}


#line 351
- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data
               withInt:(jint)offset
               withInt:(jint)len {
  ARManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, header, data, offset, len);
}


#line 375
- (void)postWithData:(IOSByteArray *)data
          withOffset:(jint)offset
          withLength:(jint)len {
  @synchronized(self) {
    if (isClosed_) {
      return;
    }
    @try {
      ARManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(self, data, offset, len);
    }
    @catch (
#line 382
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      [self close];
    }
  }
}


#line 389
- (jboolean)isClosed {
  @synchronized(self) {
    
#line 390
    return isClosed_;
  }
}


#line 394
- (void)close {
  @synchronized(self) {
    if (isClosed_) {
      return;
    }
    isClosed_ = true;
    
#line 401
    [((ARAsyncConnection *) nil_chk(rawConnection_)) doClose];
    
#line 403
    @synchronized(packageTimers_) {
      for (JavaLangInteger * __strong id_ in nil_chk([((JavaUtilHashMap *) nil_chk(packageTimers_)) keySet])) {
        [((ARAbsTimerCompat *) nil_chk([packageTimers_ getWithId:id_])) cancel];
      }
      for (JavaLangLong * __strong ping in nil_chk([((JavaUtilHashMap *) nil_chk(schedulledPings_)) keySet])) {
        [((ARAbsTimerCompat *) nil_chk([schedulledPings_ getWithId:ping])) cancel];
      }
      [schedulledPings_ clear];
      [packageTimers_ clear];
    }
    
#line 414
    [((ARAbsTimerCompat *) nil_chk(pingTask_)) cancel];
    [((ARAbsTimerCompat *) nil_chk(connectionTimeout_)) cancel];
    [((ARAbsTimerCompat *) nil_chk(handshakeTimeout_)) cancel];
    
#line 418
    if (!isOpened_ || !isHandshakePerformed_) {
      [((id<ARManagedConnectionCreateCallback>) nil_chk(factoryCallback_)) onConnectionCreateError:self];
    }
    else {
      
#line 421
      [((id<ARConnectionCallback>) nil_chk(callback_)) onConnectionDie];
    }
  }
}


#line 426
- (void)checkConnection {
  [((ARAbsTimerCompat *) nil_chk(pingTask_)) scheduleWithLong:0];
}

+ (void)initialize {
  if (self == [ARManagedConnection class]) {
    ARManagedConnection_RANDOM_ = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(ARManagedConnection)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withARConnectionEndpoint:withARConnectionCallback:withARManagedConnectionCreateCallback:withARAsyncConnectionFactory:", "ManagedConnection", NULL, 0x1, NULL, NULL },
    { "sendHandshakeRequest", NULL, "V", 0x22, NULL, NULL },
    { "onHandshakePackageWithByteArray:", "onHandshakePackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onProtoPackageWithByteArray:", "onProtoPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "sendProtoPackageWithByteArray:withInt:withInt:", "sendProtoPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onPingPackageWithByteArray:", "onPingPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onPongPackageWithByteArray:", "onPongPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "sendPingMessage", NULL, "V", 0x22, NULL, NULL },
    { "refreshTimeouts", NULL, "V", 0x2, NULL, NULL },
    { "onAckPackageWithByteArray:", "onAckPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "sendAckPackageWithInt:", "sendAckPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onDropPackageWithByteArray:", "onDropPackage", "V", 0x22, "Ljava.io.IOException;", NULL },
    { "onRawConnected", NULL, "V", 0x22, NULL, NULL },
    { "onRawReceivedWithByteArray:", "onRawReceived", "V", 0x22, NULL, NULL },
    { "onRawClosed", NULL, "V", 0x22, NULL, NULL },
    { "rawPostWithInt:withByteArray:", "rawPost", "V", 0x22, NULL, NULL },
    { "rawPostWithInt:withByteArray:withInt:withInt:", "rawPost", "V", 0x22, NULL, NULL },
    { "postWithData:withOffset:withLength:", "post", "V", 0x21, NULL, NULL },
    { "isClosed", NULL, "Z", 0x21, NULL, NULL },
    { "close", NULL, "V", 0x21, NULL, NULL },
    { "checkConnection", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONNECTION_TIMEOUT", "CONNECTION_TIMEOUT", 0x19, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_CONNECTION_TIMEOUT },
    { "HANDSHAKE_TIMEOUT", "HANDSHAKE_TIMEOUT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HANDSHAKE_TIMEOUT },
    { "RESPONSE_TIMEOUT", "RESPONSE_TIMEOUT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_RESPONSE_TIMEOUT },
    { "PING_TIMEOUT", "PING_TIMEOUT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_PING_TIMEOUT },
    { "HEADER_PROTO", "HEADER_PROTO", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_PROTO },
    { "HEADER_PING", "HEADER_PING", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_PING },
    { "HEADER_PONG", "HEADER_PONG", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_PONG },
    { "HEADER_DROP", "HEADER_DROP", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_DROP },
    { "HEADER_REDIRECT", "HEADER_REDIRECT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_REDIRECT },
    { "HEADER_ACK", "HEADER_ACK", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_ACK },
    { "HEADER_HANDSHAKE_REQUEST", "HEADER_HANDSHAKE_REQUEST", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_HANDSHAKE_REQUEST },
    { "HEADER_HANDSHAKE_RESPONSE", "HEADER_HANDSHAKE_RESPONSE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ARManagedConnection_HEADER_HANDSHAKE_RESPONSE },
    { "RANDOM_", NULL, 0x1a, "Ljava.util.Random;", &ARManagedConnection_RANDOM_, NULL, .constantValue.asLong = 0 },
    { "connectionInterface_", NULL, 0x12, "Lim.actor.runtime.mtproto.AsyncConnectionInterface;", NULL, NULL, .constantValue.asLong = 0 },
    { "CRC32_ENGINE_", NULL, 0x12, "Lim.actor.runtime.crypto.CRC32;", NULL, NULL, .constantValue.asLong = 0 },
    { "TAG_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "rawConnection_", NULL, 0x12, "Lim.actor.runtime.mtproto.AsyncConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x12, "Lim.actor.runtime.mtproto.ConnectionCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "factoryCallback_", NULL, 0x12, "Lim.actor.runtime.mtproto.ManagedConnectionCreateCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "connectionId_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mtprotoVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "apiMajorVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "apiMinorVersion_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "receivedPackages_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "sentPackages_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "isClosed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isOpened_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isHandshakePerformed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "handshakeRandomData_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "connectionTimeout_", NULL, 0x2, "Lim.actor.runtime.threading.AbsTimerCompat;", NULL, NULL, .constantValue.asLong = 0 },
    { "handshakeTimeout_", NULL, 0x2, "Lim.actor.runtime.threading.AbsTimerCompat;", NULL, NULL, .constantValue.asLong = 0 },
    { "pingTask_", NULL, 0x2, "Lim.actor.runtime.threading.AbsTimerCompat;", NULL, NULL, .constantValue.asLong = 0 },
    { "schedulledPings_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Long;Lim/actor/runtime/threading/AbsTimerCompat;>;", .constantValue.asLong = 0 },
    { "packageTimers_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lim/actor/runtime/threading/AbsTimerCompat;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.mtproto.ManagedConnection$ConnectionInterface;", "Lim.actor.runtime.mtproto.ManagedConnection$PingRunnable;", "Lim.actor.runtime.mtproto.ManagedConnection$TimeoutRunnable;"};
  static const J2ObjcClassInfo _ARManagedConnection = { 2, "ManagedConnection", "im.actor.runtime.mtproto", NULL, 0x1, 21, methods, 34, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ARManagedConnection;
}

@end


#line 62
void ARManagedConnection_initWithInt_withInt_withInt_withInt_withARConnectionEndpoint_withARConnectionCallback_withARManagedConnectionCreateCallback_withARAsyncConnectionFactory_(ARManagedConnection *self, jint connectionId, jint mtprotoVersion, jint apiMajorVersion, jint apiMinorVersion, ARConnectionEndpoint *endpoint, id<ARConnectionCallback> callback, id<ARManagedConnectionCreateCallback> factoryCallback, id<ARAsyncConnectionFactory> connectionFactory) {
  (void) NSObject_init(self);
  self->connectionInterface_ = new_ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(self);
  self->CRC32_ENGINE_ = new_ARCRC32_init();
  self->receivedPackages_ =
#line 48
  0;
  self->sentPackages_ = 0;
  self->isClosed_ =
#line 51
  false;
  self->isOpened_ = false;
  self->isHandshakePerformed_ = false;
  self->schedulledPings_ = new_JavaUtilHashMap_init();
  self->packageTimers_ = new_JavaUtilHashMap_init();
  
#line 70
  self->TAG_ = JreStrcat("$I", @"Connection#", connectionId);
  self->connectionId_ = connectionId;
  self->mtprotoVersion_ = mtprotoVersion;
  self->apiMajorVersion_ = apiMajorVersion;
  self->apiMinorVersion_ = apiMinorVersion;
  self->callback_ = callback;
  self->factoryCallback_ = factoryCallback;
  self->rawConnection_ = [((id<ARAsyncConnectionFactory>) nil_chk(connectionFactory)) createConnectionWithConnectionId:connectionId withEndpoint:endpoint withInterface:self->connectionInterface_];
  
#line 80
  self->handshakeTimeout_ = ARRuntime_createTimerWithJavaLangRunnable_(new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self));
  self->pingTask_ = ARRuntime_createTimerWithJavaLangRunnable_(new_ARManagedConnection_PingRunnable_initWithARManagedConnection_(self));
  self->connectionTimeout_ = ARRuntime_createTimerWithJavaLangRunnable_(new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self));
  [((ARAbsTimerCompat *) nil_chk(self->connectionTimeout_)) scheduleWithLong:ARManagedConnection_CONNECTION_TIMEOUT];
  
#line 85
  [((ARAsyncConnection *) nil_chk(self->rawConnection_)) doConnect];
}


#line 62
ARManagedConnection *new_ARManagedConnection_initWithInt_withInt_withInt_withInt_withARConnectionEndpoint_withARConnectionCallback_withARManagedConnectionCreateCallback_withARAsyncConnectionFactory_(jint connectionId, jint mtprotoVersion, jint apiMajorVersion, jint apiMinorVersion, ARConnectionEndpoint *endpoint, id<ARConnectionCallback> callback, id<ARManagedConnectionCreateCallback> factoryCallback, id<ARAsyncConnectionFactory> connectionFactory) {
  ARManagedConnection *self = [ARManagedConnection alloc];
  ARManagedConnection_initWithInt_withInt_withInt_withInt_withARConnectionEndpoint_withARConnectionCallback_withARManagedConnectionCreateCallback_withARAsyncConnectionFactory_(self, connectionId, mtprotoVersion, apiMajorVersion, apiMinorVersion, endpoint, callback, factoryCallback, connectionFactory);
  return self;
}


#line 90
void ARManagedConnection_sendHandshakeRequest(ARManagedConnection *self) {
  @synchronized(self) {
    
#line 93
    ARDataOutput *handshakeRequest = new_ARDataOutput_init();
    [handshakeRequest writeByteWithInt:self->mtprotoVersion_];
    [handshakeRequest writeByteWithInt:self->apiMajorVersion_];
    [handshakeRequest writeByteWithInt:self->apiMinorVersion_];
    self->handshakeRandomData_ = [IOSByteArray newArrayWithLength:32];
    @synchronized(ARManagedConnection_RANDOM_) {
      [((JavaUtilRandom *) nil_chk(ARManagedConnection_RANDOM_)) nextBytesWithByteArray:self->handshakeRandomData_];
    }
    [handshakeRequest writeIntWithInt:self->handshakeRandomData_->size_];
    [handshakeRequest writeBytesWithByteArray:self->handshakeRandomData_ withInt:0 withInt:self->handshakeRandomData_->size_];
    
#line 104
    [((ARAbsTimerCompat *) nil_chk(self->handshakeTimeout_)) scheduleWithLong:ARManagedConnection_HANDSHAKE_TIMEOUT];
    ARManagedConnection_rawPostWithInt_withByteArray_(self, ARManagedConnection_HEADER_HANDSHAKE_REQUEST, [handshakeRequest toByteArray]);
  }
}


#line 108
void ARManagedConnection_onHandshakePackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    ARDataInput *handshakeResponse = new_ARDataInput_initWithByteArray_(data);
    jint protoVersion = [handshakeResponse readByte];
    jint apiMajor = [handshakeResponse readByte];
    jint apiMinor = [handshakeResponse readByte];
    IOSByteArray *sha256 = [handshakeResponse readBytesWithInt:32];
    IOSByteArray *localSha256 = ARCrypto_SHA256WithByteArray_(self->handshakeRandomData_);
    
#line 117
    if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(sha256, localSha256)) {
      ARLog_wWithNSString_withNSString_(self->TAG_, @"SHA 256 is incorrect");
      
#line 122
      @throw new_JavaIoIOException_initWithNSString_(@"SHA 256 is incorrect");
    }
    if (protoVersion != self->mtprotoVersion_) {
      ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I$IC", @"Incorrect Proto Version, expected: ", self->mtprotoVersion_, @", got ", protoVersion, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$IC", @"Incorrect Proto Version, expected: ", self->mtprotoVersion_, @", got ", protoVersion, ';'));
    }
    if (apiMajor != self->apiMajorVersion_) {
      ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I$IC", @"Incorrect Api Major Version, expected: ", apiMajor, @", got ", apiMajor, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$IC", @"Incorrect Api Major Version, expected: ", apiMajor, @", got ", apiMajor, ';'));
    }
    if (apiMinor != self->apiMinorVersion_) {
      ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I$IC", @"Incorrect Api Minor Version, expected: ", apiMinor, @", got ", apiMinor, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$IC", @"Incorrect Api Minor Version, expected: ", apiMinor, @", got ", apiMinor, ';'));
    }
    
#line 138
    self->isHandshakePerformed_ = true;
    [((id<ARManagedConnectionCreateCallback>) nil_chk(self->factoryCallback_)) onConnectionCreated:self];
    [((ARAbsTimerCompat *) nil_chk(self->handshakeTimeout_)) cancel];
    [((ARAbsTimerCompat *) nil_chk(self->pingTask_)) scheduleWithLong:ARManagedConnection_PING_TIMEOUT];
  }
}


#line 146
void ARManagedConnection_onProtoPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 147
    [((id<ARConnectionCallback>) nil_chk(self->callback_)) onMessageWithData:data withOffset:0 withLength:((IOSByteArray *) nil_chk(data))->size_];
    ARManagedConnection_refreshTimeouts(self);
  }
}


#line 151
void ARManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(ARManagedConnection *self, IOSByteArray *data, jint offset, jint len) {
  @synchronized(self) {
    
#line 152
    if (self->isClosed_) {
      return;
    }
    ARManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, ARManagedConnection_HEADER_PROTO, data, offset, len);
  }
}


#line 160
void ARManagedConnection_onPingPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    ARManagedConnection_rawPostWithInt_withByteArray_(self, ARManagedConnection_HEADER_PONG, data);
    ARManagedConnection_refreshTimeouts(self);
  }
}


#line 166
void ARManagedConnection_onPongPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 167
    ARDataInput *dataInput = new_ARDataInput_initWithByteArray_(data);
    jint size = [dataInput readInt];
    if (size != 8) {
      ARLog_wWithNSString_withNSString_(self->TAG_, @"Received incorrect pong");
      @throw new_JavaIoIOException_initWithNSString_(@"Incorrect pong payload size");
    }
    jlong pingId = [dataInput readLong];
    
#line 177
    ARAbsTimerCompat *timeoutTask = [((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) removeWithId:JavaLangLong_valueOfWithLong_(pingId)];
    if (timeoutTask == nil) {
      return;
    }
    
#line 182
    [((ARAbsTimerCompat *) nil_chk(timeoutTask)) cancel];
    ARManagedConnection_refreshTimeouts(self);
  }
}


#line 186
void ARManagedConnection_sendPingMessage(ARManagedConnection *self) {
  @synchronized(self) {
    
#line 187
    if (self->isClosed_) {
      return;
    }
    
#line 191
    jlong pingId = [((JavaUtilRandom *) nil_chk(ARManagedConnection_RANDOM_)) nextLong];
    ARDataOutput *dataOutput = new_ARDataOutput_init();
    [dataOutput writeIntWithInt:8];
    @synchronized(ARManagedConnection_RANDOM_) {
      [dataOutput writeLongWithLong:pingId];
    }
    
#line 198
    ARAbsTimerCompat *pingTimeoutTask = ARRuntime_createTimerWithJavaLangRunnable_(new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self));
    (void) [((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) putWithId:JavaLangLong_valueOfWithLong_(pingId) withId:pingTimeoutTask];
    [((ARAbsTimerCompat *) nil_chk(pingTimeoutTask)) scheduleWithLong:ARManagedConnection_RESPONSE_TIMEOUT];
    
#line 203
    ARManagedConnection_rawPostWithInt_withByteArray_(self, ARManagedConnection_HEADER_PING, [dataOutput toByteArray]);
  }
}


#line 206
void ARManagedConnection_refreshTimeouts(ARManagedConnection *self) {
  
#line 210
  for (ARAbsTimerCompat * __strong ping in nil_chk([((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) values])) {
    [((ARAbsTimerCompat *) nil_chk(ping)) scheduleWithLong:ARManagedConnection_RESPONSE_TIMEOUT];
  }
  for (ARAbsTimerCompat * __strong ackTimeout in nil_chk([((JavaUtilHashMap *) nil_chk(self->packageTimers_)) values])) {
    [((ARAbsTimerCompat *) nil_chk(ackTimeout)) scheduleWithLong:ARManagedConnection_RESPONSE_TIMEOUT];
  }
  
#line 217
  [((ARAbsTimerCompat *) nil_chk(self->pingTask_)) scheduleWithLong:ARManagedConnection_PING_TIMEOUT];
}


#line 222
void ARManagedConnection_onAckPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 223
    ARDataInput *ackContent = new_ARDataInput_initWithByteArray_(data);
    jint frameId = [ackContent readInt];
    
#line 226
    ARAbsTimerCompat *timerCompat = [((JavaUtilHashMap *) nil_chk(self->packageTimers_)) removeWithId:JavaLangInteger_valueOfWithInt_(frameId)];
    if (timerCompat == nil) {
      return;
    }
    [((ARAbsTimerCompat *) nil_chk(timerCompat)) cancel];
    ARManagedConnection_refreshTimeouts(self);
  }
}


#line 234
void ARManagedConnection_sendAckPackageWithInt_(ARManagedConnection *self, jint receivedIndex) {
  @synchronized(self) {
    
#line 235
    if (self->isClosed_) {
      return;
    }
    
#line 239
    ARDataOutput *ackPackage = new_ARDataOutput_init();
    [ackPackage writeIntWithInt:receivedIndex];
    ARManagedConnection_rawPostWithInt_withByteArray_(self, ARManagedConnection_HEADER_ACK, [ackPackage toByteArray]);
  }
}


#line 246
void ARManagedConnection_onDropPackageWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 247
    ARDataInput *drop = new_ARDataInput_initWithByteArray_(data);
    jlong messageId = [drop readLong];
    jint errorCode = [drop readByte];
    jint messageLen = [drop readInt];
    NSString *message = [NSString stringWithBytes:[drop readBytesWithInt:messageLen] charsetName:@"UTF-8"];
    ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$$", @"Drop received: ", message));
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Drop received: ", message));
  }
}


#line 258
void ARManagedConnection_onRawConnected(ARManagedConnection *self) {
  @synchronized(self) {
    if (self->isClosed_) {
      
#line 262
      return;
    }
    if (self->isOpened_) {
      
#line 266
      return;
    }
    self->isOpened_ = true;
    
#line 270
    [((ARAbsTimerCompat *) nil_chk(self->connectionTimeout_)) cancel];
    
#line 272
    ARManagedConnection_sendHandshakeRequest(self);
  }
}


#line 275
void ARManagedConnection_onRawReceivedWithByteArray_(ARManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 276
    if (self->isClosed_) {
      return;
    }
    
#line 282
    @try {
      ARDataInput *dataInput = new_ARDataInput_initWithByteArray_(data);
      jint packageIndex = [dataInput readInt];
      
#line 286
      if (self->receivedPackages_ != packageIndex) {
        ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I$I", @"Invalid package index. Expected: ", self->receivedPackages_, @", got: ", packageIndex));
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$I", @"Invalid package index. Expected: ", self->receivedPackages_, @", got: ", packageIndex));
      }
      self->receivedPackages_++;
      
#line 292
      jint header = [dataInput readByte];
      jint dataLength = [dataInput readInt];
      IOSByteArray *content = [dataInput readBytesWithInt:dataLength];
      jint crc32 = [dataInput readInt];
      
#line 297
      [((ARCRC32 *) nil_chk(self->CRC32_ENGINE_)) reset];
      [self->CRC32_ENGINE_ updateWithByteArray:content];
      
#line 300
      if (((jint) [self->CRC32_ENGINE_ getValue]) != crc32) {
        ARLog_wWithNSString_withNSString_(self->TAG_, @"Incorrect CRC32");
        @throw new_JavaIoIOException_initWithNSString_(@"Incorrect CRC32");
      }
      
#line 306
      if (header == ARManagedConnection_HEADER_HANDSHAKE_RESPONSE) {
        if (self->isHandshakePerformed_) {
          @throw new_JavaIoIOException_initWithNSString_(@"Double Handshake");
        }
        ARManagedConnection_onHandshakePackageWithByteArray_(self, content);
      }
      else {
        
#line 312
        if (!self->isHandshakePerformed_) {
          @throw new_JavaIoIOException_initWithNSString_(@"Package before Handshake");
        }
        
#line 316
        if (header == ARManagedConnection_HEADER_PROTO) {
          ARManagedConnection_onProtoPackageWithByteArray_(self, content);
          ARManagedConnection_sendAckPackageWithInt_(self, packageIndex);
        }
        else
#line 319
        if (header == ARManagedConnection_HEADER_PING) {
          ARManagedConnection_onPingPackageWithByteArray_(self, content);
        }
        else
#line 321
        if (header == ARManagedConnection_HEADER_PONG) {
          ARManagedConnection_onPongPackageWithByteArray_(self, content);
        }
        else
#line 323
        if (header == ARManagedConnection_HEADER_DROP) {
          ARManagedConnection_onDropPackageWithByteArray_(self, content);
        }
        else
#line 325
        if (header == ARManagedConnection_HEADER_ACK) {
          ARManagedConnection_onAckPackageWithByteArray_(self, content);
        }
        else {
          
#line 328
          ARLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I", @"Received unknown package #", header));
        }
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      [self close];
    }
  }
}


#line 340
void ARManagedConnection_onRawClosed(ARManagedConnection *self) {
  @synchronized(self) {
    [self close];
  }
}


#line 347
void ARManagedConnection_rawPostWithInt_withByteArray_(ARManagedConnection *self, jint header, IOSByteArray *data) {
  @synchronized(self) {
    
#line 348
    ARManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, header, data, 0, ((IOSByteArray *) nil_chk(data))->size_);
  }
}


#line 351
void ARManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(ARManagedConnection *self, jint header, IOSByteArray *data, jint offset, jint len) {
  @synchronized(self) {
    jint packageId = self->sentPackages_++;
    ARDataOutput *dataOutput = new_ARDataOutput_init();
    [dataOutput writeIntWithInt:packageId];
    [dataOutput writeByteWithInt:header];
    [dataOutput writeIntWithInt:((IOSByteArray *) nil_chk(data))->size_];
    [dataOutput writeBytesWithByteArray:data withInt:offset withInt:len];
    [((ARCRC32 *) nil_chk(self->CRC32_ENGINE_)) reset];
    [self->CRC32_ENGINE_ updateWithByteArray:data withInt:offset withInt:len];
    [dataOutput writeIntWithInt:(jint) [self->CRC32_ENGINE_ getValue]];
    
#line 363
    if (header == ARManagedConnection_HEADER_PROTO) {
      ARAbsTimerCompat *timeoutTask = ARRuntime_createTimerWithJavaLangRunnable_(new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self));
      (void) [((JavaUtilHashMap *) nil_chk(self->packageTimers_)) putWithId:JavaLangInteger_valueOfWithInt_(packageId) withId:timeoutTask];
      [((ARAbsTimerCompat *) nil_chk(timeoutTask)) scheduleWithLong:ARManagedConnection_RESPONSE_TIMEOUT];
    }
    
#line 369
    [((ARAsyncConnection *) nil_chk(self->rawConnection_)) doSend:[dataOutput toByteArray]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARManagedConnection)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/mtproto/ManagedConnection.java"


#line 432
@implementation ARManagedConnection_ConnectionInterface


#line 435
- (void)onConnected {
  ARManagedConnection_onRawConnected(this$0_);
}


#line 440
- (void)onReceived:(IOSByteArray *)data {
  ARManagedConnection_onRawReceivedWithByteArray_(this$0_, data);
}


#line 445
- (void)onClosed {
  ARManagedConnection_onRawClosed(this$0_);
}

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$ {
  ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onConnected", NULL, "V", 0x1, NULL, NULL },
    { "onReceived:", "onReceived", "V", 0x1, NULL, NULL },
    { "onClosed", NULL, "V", 0x1, NULL, NULL },
    { "initWithARManagedConnection:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.mtproto.ManagedConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARManagedConnection_ConnectionInterface = { 2, "ConnectionInterface", "im.actor.runtime.mtproto", "ManagedConnection", 0x2, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARManagedConnection_ConnectionInterface;
}

@end

void ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(ARManagedConnection_ConnectionInterface *self, ARManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ARManagedConnection_ConnectionInterface *new_ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(ARManagedConnection *outer$) {
  ARManagedConnection_ConnectionInterface *self = [ARManagedConnection_ConnectionInterface alloc];
  ARManagedConnection_ConnectionInterface_initWithARManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARManagedConnection_ConnectionInterface)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/mtproto/ManagedConnection.java"


#line 451
@implementation ARManagedConnection_PingRunnable


#line 454
- (void)run {
  ARManagedConnection_sendPingMessage(this$0_);
}

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$ {
  ARManagedConnection_PingRunnable_initWithARManagedConnection_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithARManagedConnection:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.mtproto.ManagedConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARManagedConnection_PingRunnable = { 2, "PingRunnable", "im.actor.runtime.mtproto", "ManagedConnection", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARManagedConnection_PingRunnable;
}

@end

void ARManagedConnection_PingRunnable_initWithARManagedConnection_(ARManagedConnection_PingRunnable *self, ARManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ARManagedConnection_PingRunnable *new_ARManagedConnection_PingRunnable_initWithARManagedConnection_(ARManagedConnection *outer$) {
  ARManagedConnection_PingRunnable *self = [ARManagedConnection_PingRunnable alloc];
  ARManagedConnection_PingRunnable_initWithARManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARManagedConnection_PingRunnable)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/mtproto/ManagedConnection.java"


#line 459
@implementation ARManagedConnection_TimeoutRunnable


#line 462
- (void)run {
  
#line 464
  [this$0_ close];
}

- (instancetype)initWithARManagedConnection:(ARManagedConnection *)outer$ {
  ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithARManagedConnection:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.runtime.mtproto.ManagedConnection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARManagedConnection_TimeoutRunnable = { 2, "TimeoutRunnable", "im.actor.runtime.mtproto", "ManagedConnection", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARManagedConnection_TimeoutRunnable;
}

@end

void ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(ARManagedConnection_TimeoutRunnable *self, ARManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ARManagedConnection_TimeoutRunnable *new_ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(ARManagedConnection *outer$) {
  ARManagedConnection_TimeoutRunnable *self = [ARManagedConnection_TimeoutRunnable alloc];
  ARManagedConnection_TimeoutRunnable_initWithARManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARManagedConnection_TimeoutRunnable)

#pragma clang diagnostic pop
