//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/markdown/MDCode.h"
#include "im/actor/runtime/markdown/MDDocument.h"
#include "im/actor/runtime/markdown/MDRawText.h"
#include "im/actor/runtime/markdown/MDSection.h"
#include "im/actor/runtime/markdown/MDSpan.h"
#include "im/actor/runtime/markdown/MDText.h"
#include "im/actor/runtime/markdown/MDUrl.h"
#include "im/actor/runtime/markdown/MarkdownParser.h"
#include "im/actor/runtime/markdown/Patterns.h"
#include "im/actor/runtime/regexp/MatcherCompat.h"
#include "im/actor/runtime/regexp/PatternCompat.h"
#include "java/util/ArrayList.h"

@class ARMarkdownParser_BasicUrl;
@class ARMarkdownParser_TextCursor;
@class ARMarkdownParser_TitledUrl;

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARMarkdownParser () {
 @public
  jint mode_;
}

/*!
 @brief Outer parsing method: Processing code blocks first
 @param cursor     text cursor
 @param paragraphs current paragraphs
 @return is code block found
 */
- (jboolean)handleCodeBlockWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                     withJavaUtilArrayList:(JavaUtilArrayList *)paragraphs;

/*!
 @brief Processing text blocks between code blocks
 @param cursor     text cursor
 @param blockEnd   text block end
 @param paragraphs current paragraphs
 */
- (void)handleTextBlockWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                               withInt:(jint)blockEnd
                                 withJavaUtilArrayList:(JavaUtilArrayList *)paragraphs;

/*!
 @brief Processing formatting spans
 @param cursor   text cursor
 @param blockEnd code span search limit
 @return built text segments
 */
- (IOSObjectArray *)handleSpansWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                       withInt:(jint)blockEnd;

/*!
 @brief Handling span
 @param cursor   text cursor
 @param blockEnd span search limit
 @param elements current elements
 @return is
 */
- (jboolean)handleSpanWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                              withInt:(jint)blockEnd
                                withJavaUtilArrayList:(JavaUtilArrayList *)elements;

/*!
 @brief Handling urls
 @param cursor
 @param limit
 @param elements
 */
- (void)handleUrlsWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                          withInt:(jint)limit
                            withJavaUtilArrayList:(JavaUtilArrayList *)elements;

/*!
 @brief Handling raw text block
 @param cursor   text cursor
 @param limit    text end
 @param elements current elements
 */
- (void)handleRawTextWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                             withInt:(jint)limit
                               withJavaUtilArrayList:(JavaUtilArrayList *)elements;

/*!
 @brief Adding raw simple text
 @param cursor   text cursor
 @param limit    text end
 @param elements current elements
 */
- (void)addTextWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                       withInt:(jint)limit
                         withJavaUtilArrayList:(JavaUtilArrayList *)elements;

/*!
 @brief Searching for valid code block begin
 @param cursor text cursor
 @return code block start, -1 if not found
 */
- (jint)findCodeBlockStartWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor;

/*!
 @brief Searching for valid code block end
 @param cursor     text cursor
 @param blockStart start of expected code block
 @return code block end, -1 if not found
 */
- (jint)findCodeBlockEndWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                withInt:(jint)blockStart;

/*!
 @brief Searching for valid formatting span start
 @param cursor text cursor
 @param limit  maximum index in cursor
 @return span start, -1 if not found
 */
- (jint)findSpanStartWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                             withInt:(jint)limit;

/*!
 @brief Searching for valid formatting span end
 @param cursor    text cursor
 @param spanStart expected span start
 @param limit     maximum index in cursor
 @param span      span control character
 @return span end, -1 if not found
 */
- (jint)findSpanEndWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                           withInt:(jint)spanStart
                                           withInt:(jint)limit
                                          withChar:(jchar)span;

/*!
 @brief Searching for valid formatted url
 @param cursor current cursor
 @param limit  search limit
 @return found url, null if not found
 */
- (ARMarkdownParser_TitledUrl *)findFormattedUrlWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                                        withInt:(jint)limit;

/*!
 @brief Finding non-formatted urls in texts
 @param cursor current text cursor
 @param limit  end of cursor
 @return founded url
 */
- (ARMarkdownParser_BasicUrl *)findUrlWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                              withInt:(jint)limit;

/*!
 @brief Test if symbol at index is space or out of string bounds
 @param text  text
 @param index char to test
 @return is good anchor
 */
- (jboolean)isGoodAnchorWithNSString:(NSString *)text
                             withInt:(jint)index;

/*!
 @brief Checking if symbol is not eq to c
 @param text
 @param index
 @param c
 */
- (jboolean)isNotSymbolWithNSString:(NSString *)text
                            withInt:(jint)index
                           withChar:(jchar)c;

@end

static NSString *ARMarkdownParser_CODE_BLOCK_ = @"```";
J2OBJC_STATIC_FIELD_GETTER(ARMarkdownParser, CODE_BLOCK_, NSString *)

__attribute__((unused)) static jboolean ARMarkdownParser_handleCodeBlockWithARMarkdownParser_TextCursor_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, JavaUtilArrayList *paragraphs);

__attribute__((unused)) static void ARMarkdownParser_handleTextBlockWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd, JavaUtilArrayList *paragraphs);

__attribute__((unused)) static IOSObjectArray *ARMarkdownParser_handleSpansWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd);

__attribute__((unused)) static jboolean ARMarkdownParser_handleSpanWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd, JavaUtilArrayList *elements);

__attribute__((unused)) static void ARMarkdownParser_handleUrlsWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements);

__attribute__((unused)) static void ARMarkdownParser_handleRawTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements);

__attribute__((unused)) static void ARMarkdownParser_addTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements);

__attribute__((unused)) static jint ARMarkdownParser_findCodeBlockStartWithARMarkdownParser_TextCursor_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor);

__attribute__((unused)) static jint ARMarkdownParser_findCodeBlockEndWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockStart);

__attribute__((unused)) static jint ARMarkdownParser_findSpanStartWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit);

__attribute__((unused)) static jint ARMarkdownParser_findSpanEndWithARMarkdownParser_TextCursor_withInt_withInt_withChar_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint spanStart, jint limit, jchar span);

__attribute__((unused)) static ARMarkdownParser_TitledUrl *ARMarkdownParser_findFormattedUrlWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit);

__attribute__((unused)) static ARMarkdownParser_BasicUrl *ARMarkdownParser_findUrlWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit);

__attribute__((unused)) static jboolean ARMarkdownParser_isGoodAnchorWithNSString_withInt_(ARMarkdownParser *self, NSString *text, jint index);

__attribute__((unused)) static jboolean ARMarkdownParser_isNotSymbolWithNSString_withInt_withChar_(ARMarkdownParser *self, NSString *text, jint index, jchar c);

@interface ARMarkdownParser_Url : NSObject

- (jint)getStart;

- (jint)getEnd;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ARMarkdownParser_Url)

__attribute__((unused)) static void ARMarkdownParser_Url_init(ARMarkdownParser_Url *self);

J2OBJC_TYPE_LITERAL_HEADER(ARMarkdownParser_Url)

@interface ARMarkdownParser_BasicUrl : ARMarkdownParser_Url {
 @public
  jint start_;
  jint end_;
}

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)end;

- (jint)getStart;

- (jint)getEnd;

@end

J2OBJC_EMPTY_STATIC_INIT(ARMarkdownParser_BasicUrl)

__attribute__((unused)) static void ARMarkdownParser_BasicUrl_initWithInt_withInt_(ARMarkdownParser_BasicUrl *self, jint start, jint end);

__attribute__((unused)) static ARMarkdownParser_BasicUrl *new_ARMarkdownParser_BasicUrl_initWithInt_withInt_(jint start, jint end) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARMarkdownParser_BasicUrl)

@interface ARMarkdownParser_TitledUrl : ARMarkdownParser_Url {
 @public
  jint start_;
  jint middle_;
  jint end_;
}

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)middle
                    withInt:(jint)end;

- (jint)getStart;

- (jint)getMiddle;

- (jint)getEnd;

@end

J2OBJC_EMPTY_STATIC_INIT(ARMarkdownParser_TitledUrl)

__attribute__((unused)) static void ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(ARMarkdownParser_TitledUrl *self, jint start, jint middle, jint end);

__attribute__((unused)) static ARMarkdownParser_TitledUrl *new_ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(jint start, jint middle, jint end) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARMarkdownParser_TitledUrl)

@interface ARMarkdownParser_TextCursor : NSObject {
 @public
  NSString *text_;
  jint currentOffset_;
}

- (instancetype)initWithNSString:(NSString *)text;

@end

J2OBJC_EMPTY_STATIC_INIT(ARMarkdownParser_TextCursor)

J2OBJC_FIELD_SETTER(ARMarkdownParser_TextCursor, text_, NSString *)

__attribute__((unused)) static void ARMarkdownParser_TextCursor_initWithNSString_(ARMarkdownParser_TextCursor *self, NSString *text);

__attribute__((unused)) static ARMarkdownParser_TextCursor *new_ARMarkdownParser_TextCursor_initWithNSString_(NSString *text) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARMarkdownParser_TextCursor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java"


#line 8
@implementation ARMarkdownParser

+ (jint)MODE_FULL {
  return ARMarkdownParser_MODE_FULL;
}

+ (jint)MODE_LITE {
  return ARMarkdownParser_MODE_LITE;
}

+ (jint)MODE_ONLY_LINKS {
  return ARMarkdownParser_MODE_ONLY_LINKS;
}


#line 18
- (instancetype)initWithInt:(jint)mode {
  ARMarkdownParser_initWithInt_(self, mode);
  return self;
}


#line 28
- (ARMDDocument *)processDocumentWithNSString:(NSString *)text {
  ARMarkdownParser_TextCursor *cursor = new_ARMarkdownParser_TextCursor_initWithNSString_(text);
  JavaUtilArrayList *sections = new_JavaUtilArrayList_init();
  while (ARMarkdownParser_handleCodeBlockWithARMarkdownParser_TextCursor_withJavaUtilArrayList_(self, cursor, sections)) ;
  return new_ARMDDocument_initWithARMDSectionArray_([sections toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[sections size] type:ARMDSection_class_()]]);
}


#line 42
- (jboolean)handleCodeBlockWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                     withJavaUtilArrayList:(JavaUtilArrayList *)paragraphs {
  return ARMarkdownParser_handleCodeBlockWithARMarkdownParser_TextCursor_withJavaUtilArrayList_(self, cursor, paragraphs);
}


#line 85
- (void)handleTextBlockWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                               withInt:(jint)blockEnd
                                 withJavaUtilArrayList:(JavaUtilArrayList *)paragraphs {
  ARMarkdownParser_handleTextBlockWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, blockEnd, paragraphs);
}


#line 98
- (IOSObjectArray *)handleSpansWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                       withInt:(jint)blockEnd {
  return ARMarkdownParser_handleSpansWithARMarkdownParser_TextCursor_withInt_(self, cursor, blockEnd);
}


#line 112
- (jboolean)handleSpanWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                              withInt:(jint)blockEnd
                                withJavaUtilArrayList:(JavaUtilArrayList *)elements {
  return ARMarkdownParser_handleSpanWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, blockEnd, elements);
}


#line 155
- (void)handleUrlsWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                          withInt:(jint)limit
                            withJavaUtilArrayList:(JavaUtilArrayList *)elements {
  ARMarkdownParser_handleUrlsWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, limit, elements);
}


#line 189
- (void)handleRawTextWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                             withInt:(jint)limit
                               withJavaUtilArrayList:(JavaUtilArrayList *)elements {
  ARMarkdownParser_handleRawTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, limit, elements);
}


#line 220
- (void)addTextWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                       withInt:(jint)limit
                         withJavaUtilArrayList:(JavaUtilArrayList *)elements {
  ARMarkdownParser_addTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, limit, elements);
}


#line 233
- (jint)findCodeBlockStartWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor {
  return ARMarkdownParser_findCodeBlockStartWithARMarkdownParser_TextCursor_(self, cursor);
}


#line 252
- (jint)findCodeBlockEndWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                withInt:(jint)blockStart {
  return ARMarkdownParser_findCodeBlockEndWithARMarkdownParser_TextCursor_withInt_(self, cursor, blockStart);
}


#line 271
- (jint)findSpanStartWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                             withInt:(jint)limit {
  return ARMarkdownParser_findSpanStartWithARMarkdownParser_TextCursor_withInt_(self, cursor, limit);
}


#line 293
- (jint)findSpanEndWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                           withInt:(jint)spanStart
                                           withInt:(jint)limit
                                          withChar:(jchar)span {
  return ARMarkdownParser_findSpanEndWithARMarkdownParser_TextCursor_withInt_withInt_withChar_(self, cursor, spanStart, limit, span);
}


#line 313
- (ARMarkdownParser_TitledUrl *)findFormattedUrlWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                                        withInt:(jint)limit {
  return ARMarkdownParser_findFormattedUrlWithARMarkdownParser_TextCursor_withInt_(self, cursor, limit);
}


#line 353
- (ARMarkdownParser_BasicUrl *)findUrlWithARMarkdownParser_TextCursor:(ARMarkdownParser_TextCursor *)cursor
                                                              withInt:(jint)limit {
  return ARMarkdownParser_findUrlWithARMarkdownParser_TextCursor_withInt_(self, cursor, limit);
}


#line 376
- (jboolean)isGoodAnchorWithNSString:(NSString *)text
                             withInt:(jint)index {
  return ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, text, index);
}


#line 396
- (jboolean)isNotSymbolWithNSString:(NSString *)text
                            withInt:(jint)index
                           withChar:(jchar)c {
  return ARMarkdownParser_isNotSymbolWithNSString_withInt_withChar_(self, text, index, c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "MarkdownParser", NULL, 0x1, NULL, NULL },
    { "processDocumentWithNSString:", "processDocument", "Lim.actor.runtime.markdown.MDDocument;", 0x1, NULL, NULL },
    { "handleCodeBlockWithARMarkdownParser_TextCursor:withJavaUtilArrayList:", "handleCodeBlock", "Z", 0x2, NULL, NULL },
    { "handleTextBlockWithARMarkdownParser_TextCursor:withInt:withJavaUtilArrayList:", "handleTextBlock", "V", 0x2, NULL, NULL },
    { "handleSpansWithARMarkdownParser_TextCursor:withInt:", "handleSpans", "[Lim.actor.runtime.markdown.MDText;", 0x2, NULL, NULL },
    { "handleSpanWithARMarkdownParser_TextCursor:withInt:withJavaUtilArrayList:", "handleSpan", "Z", 0x2, NULL, NULL },
    { "handleUrlsWithARMarkdownParser_TextCursor:withInt:withJavaUtilArrayList:", "handleUrls", "V", 0x2, NULL, NULL },
    { "handleRawTextWithARMarkdownParser_TextCursor:withInt:withJavaUtilArrayList:", "handleRawText", "V", 0x2, NULL, NULL },
    { "addTextWithARMarkdownParser_TextCursor:withInt:withJavaUtilArrayList:", "addText", "V", 0x2, NULL, NULL },
    { "findCodeBlockStartWithARMarkdownParser_TextCursor:", "findCodeBlockStart", "I", 0x2, NULL, NULL },
    { "findCodeBlockEndWithARMarkdownParser_TextCursor:withInt:", "findCodeBlockEnd", "I", 0x2, NULL, NULL },
    { "findSpanStartWithARMarkdownParser_TextCursor:withInt:", "findSpanStart", "I", 0x2, NULL, NULL },
    { "findSpanEndWithARMarkdownParser_TextCursor:withInt:withInt:withChar:", "findSpanEnd", "I", 0x2, NULL, NULL },
    { "findFormattedUrlWithARMarkdownParser_TextCursor:withInt:", "findFormattedUrl", "Lim.actor.runtime.markdown.MarkdownParser$TitledUrl;", 0x2, NULL, NULL },
    { "findUrlWithARMarkdownParser_TextCursor:withInt:", "findUrl", "Lim.actor.runtime.markdown.MarkdownParser$BasicUrl;", 0x2, NULL, NULL },
    { "isGoodAnchorWithNSString:withInt:", "isGoodAnchor", "Z", 0x2, NULL, NULL },
    { "isNotSymbolWithNSString:withInt:withChar:", "isNotSymbol", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MODE_FULL", "MODE_FULL", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMarkdownParser_MODE_FULL },
    { "MODE_LITE", "MODE_LITE", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMarkdownParser_MODE_LITE },
    { "MODE_ONLY_LINKS", "MODE_ONLY_LINKS", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMarkdownParser_MODE_ONLY_LINKS },
    { "CODE_BLOCK_", NULL, 0x1a, "Ljava.lang.String;", &ARMarkdownParser_CODE_BLOCK_, NULL, .constantValue.asLong = 0 },
    { "mode_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.markdown.MarkdownParser$Url;", "Lim.actor.runtime.markdown.MarkdownParser$BasicUrl;", "Lim.actor.runtime.markdown.MarkdownParser$TitledUrl;", "Lim.actor.runtime.markdown.MarkdownParser$TextCursor;"};
  static const J2ObjcClassInfo _ARMarkdownParser = { 2, "MarkdownParser", "im.actor.runtime.markdown", NULL, 0x1, 17, methods, 5, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_ARMarkdownParser;
}

@end


#line 18
void ARMarkdownParser_initWithInt_(ARMarkdownParser *self, jint mode) {
  (void) NSObject_init(self);
  
#line 19
  self->mode_ = mode;
}


#line 18
ARMarkdownParser *new_ARMarkdownParser_initWithInt_(jint mode) {
  ARMarkdownParser *self = [ARMarkdownParser alloc];
  ARMarkdownParser_initWithInt_(self, mode);
  return self;
}


#line 42
jboolean ARMarkdownParser_handleCodeBlockWithARMarkdownParser_TextCursor_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, JavaUtilArrayList *paragraphs) {
  if (self->mode_ != ARMarkdownParser_MODE_ONLY_LINKS) {
    jint blockStart = ARMarkdownParser_findCodeBlockStartWithARMarkdownParser_TextCursor_(self, cursor);
    if (blockStart >= 0) {
      jint blockEnd = ARMarkdownParser_findCodeBlockEndWithARMarkdownParser_TextCursor_withInt_(self, cursor, blockStart);
      if (blockEnd >= 0) {
        
#line 49
        if (((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_ < blockStart) {
          ARMarkdownParser_handleTextBlockWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, blockStart, paragraphs);
        }
        
#line 53
        NSString *codeContent = [((NSString *) nil_chk([((NSString *) nil_chk(cursor->text_)) substring:cursor->currentOffset_ + 3 endIndex:blockEnd - 3])) trim];
        
#line 57
        if ([((NSString *) nil_chk(codeContent)) hasPrefix:@"\n"]) {
          codeContent = [codeContent substring:1];
        }
        if ([((NSString *) nil_chk(codeContent)) hasSuffix:@"\n"]) {
          codeContent = [codeContent substring:0 endIndex:((jint) [codeContent length]) - 1];
        }
        
#line 64
        cursor->currentOffset_ = blockEnd;
        [((JavaUtilArrayList *) nil_chk(paragraphs)) addWithId:new_ARMDSection_initWithARMDCode_(new_ARMDCode_initWithNSString_(codeContent))];
        return true;
      }
    }
  }
  
#line 72
  if (((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_ < ((jint) [((NSString *) nil_chk(cursor->text_)) length])) {
    ARMarkdownParser_handleTextBlockWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, ((jint) [cursor->text_ length]), paragraphs);
  }
  return false;
}


#line 85
void ARMarkdownParser_handleTextBlockWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd, JavaUtilArrayList *paragraphs) {
  IOSObjectArray *spans = ARMarkdownParser_handleSpansWithARMarkdownParser_TextCursor_withInt_(self, cursor, blockEnd);
  [((JavaUtilArrayList *) nil_chk(paragraphs)) addWithId:new_ARMDSection_initWithARMDTextArray_(spans)];
  ((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_ = blockEnd;
}


#line 98
IOSObjectArray *ARMarkdownParser_handleSpansWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd) {
  JavaUtilArrayList *elements = new_JavaUtilArrayList_init();
  while (ARMarkdownParser_handleSpanWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, blockEnd, elements)) ;
  return [elements toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[elements size] type:ARMDText_class_()]];
}


#line 112
jboolean ARMarkdownParser_handleSpanWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockEnd, JavaUtilArrayList *elements) {
  if (self->mode_ != ARMarkdownParser_MODE_ONLY_LINKS) {
    jint spanStart = ARMarkdownParser_findSpanStartWithARMarkdownParser_TextCursor_withInt_(self, cursor, blockEnd);
    if (spanStart >= 0) {
      jchar span = [((NSString *) nil_chk(((ARMarkdownParser_TextCursor *) nil_chk(cursor))->text_)) charAtWithInt:spanStart];
      jint spanEnd = ARMarkdownParser_findSpanEndWithARMarkdownParser_TextCursor_withInt_withInt_withChar_(self, cursor, spanStart, blockEnd, span);
      if (spanEnd >= 0) {
        
#line 121
        ARMarkdownParser_handleUrlsWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, spanStart, elements);
        
#line 124
        cursor->currentOffset_++;
        
#line 127
        IOSObjectArray *spanElements = ARMarkdownParser_handleSpansWithARMarkdownParser_TextCursor_withInt_(self, cursor, spanEnd - 1);
        
#line 130
        cursor->currentOffset_ = spanEnd;
        
#line 132
        ARMDSpan *spanElement = new_ARMDSpan_initWithInt_withARMDTextArray_(
#line 133
        span == '*' ? ARMDSpan_TYPE_BOLD : ARMDSpan_TYPE_ITALIC,
#line 134
        spanElements);
        
#line 136
        [((JavaUtilArrayList *) nil_chk(elements)) addWithId:spanElement];
        
#line 138
        return true;
      }
    }
  }
  
#line 143
  ARMarkdownParser_handleUrlsWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, blockEnd, elements);
  
#line 145
  return false;
}

void ARMarkdownParser_handleUrlsWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements) {
  
#line 157
  if (self->mode_ == ARMarkdownParser_MODE_FULL || self->mode_ == ARMarkdownParser_MODE_ONLY_LINKS) {
    while (true) {
      ARMarkdownParser_TitledUrl *url = ARMarkdownParser_findFormattedUrlWithARMarkdownParser_TextCursor_withInt_(self, cursor, limit);
      if (url != nil) {
        
#line 163
        ARMarkdownParser_handleRawTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, [url getStart], elements);
        
#line 166
        NSString *title = [((NSString *) nil_chk(((ARMarkdownParser_TextCursor *) nil_chk(cursor))->text_)) substring:[url getStart] + 1 endIndex:[url getMiddle]];
        NSString *urlVal = [cursor->text_ substring:[url getMiddle] + 2 endIndex:[url getEnd]];
        [((JavaUtilArrayList *) nil_chk(elements)) addWithId:new_ARMDUrl_initWithNSString_withNSString_(title, urlVal)];
        
#line 171
        cursor->currentOffset_ = [url getEnd] + 1;
      }
      else {
        
#line 173
        break;
      }
    }
  }
  
#line 179
  ARMarkdownParser_handleRawTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, limit, elements);
}


#line 189
void ARMarkdownParser_handleRawTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements) {
  while (true) {
    ARMarkdownParser_BasicUrl *url = ARMarkdownParser_findUrlWithARMarkdownParser_TextCursor_withInt_(self, cursor, limit);
    if (url != nil) {
      NSString *link = [((NSString *) nil_chk(((ARMarkdownParser_TextCursor *) nil_chk(cursor))->text_)) substring:[url getStart] endIndex:[url getEnd]];
      
#line 196
      ARMarkdownParser_addTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, [url getStart], elements);
      
#line 199
      [((JavaUtilArrayList *) nil_chk(elements)) addWithId:new_ARMDUrl_initWithNSString_withNSString_(link, link)];
      
#line 202
      cursor->currentOffset_ = [url getEnd];
      
#line 204
      continue;
    }
    
#line 207
    ARMarkdownParser_addTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(self, cursor, limit, elements);
    
#line 209
    return;
  }
}


#line 220
void ARMarkdownParser_addTextWithARMarkdownParser_TextCursor_withInt_withJavaUtilArrayList_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit, JavaUtilArrayList *elements) {
  if (((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_ < limit) {
    [((JavaUtilArrayList *) nil_chk(elements)) addWithId:new_ARMDRawText_initWithNSString_([((NSString *) nil_chk(cursor->text_)) substring:cursor->currentOffset_ endIndex:limit])];
    cursor->currentOffset_ = limit;
  }
}


#line 233
jint ARMarkdownParser_findCodeBlockStartWithARMarkdownParser_TextCursor_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor) {
  jint offset = ((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_;
  jint index;
  while ((index = [((NSString *) nil_chk(cursor->text_)) indexOfString:ARMarkdownParser_CODE_BLOCK_ fromIndex:offset]) >= 0) {
    if (ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, index - 1)) {
      return index;
    }
    offset = index + 3;
  }
  return -1;
}


#line 252
jint ARMarkdownParser_findCodeBlockEndWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint blockStart) {
  jint offset = blockStart + 3;
  jint index;
  while ((index = [((NSString *) nil_chk(((ARMarkdownParser_TextCursor *) nil_chk(cursor))->text_)) indexOfString:ARMarkdownParser_CODE_BLOCK_ fromIndex:offset]) >= 0) {
    if (ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, index + 3)) {
      return index + 3;
    }
    offset = index + 1;
  }
  return -1;
}


#line 271
jint ARMarkdownParser_findSpanStartWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit) {
  for (jint i = ((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_; i < limit; i++) {
    jchar c = [((NSString *) nil_chk(cursor->text_)) charAtWithInt:i];
    if (c == '*' || c == '_') {
      
#line 276
      if (ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, i - 1) && ARMarkdownParser_isNotSymbolWithNSString_withInt_withChar_(self, cursor->text_, i + 1, c)) {
        return i;
      }
    }
  }
  return -1;
}


#line 293
jint ARMarkdownParser_findSpanEndWithARMarkdownParser_TextCursor_withInt_withInt_withChar_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint spanStart, jint limit, jchar span) {
  for (jint i = spanStart + 1; i < limit; i++) {
    jchar c = [((NSString *) nil_chk(((ARMarkdownParser_TextCursor *) nil_chk(cursor))->text_)) charAtWithInt:i];
    if (c == span) {
      
#line 298
      if (ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, i + 1) && ARMarkdownParser_isNotSymbolWithNSString_withInt_withChar_(self, cursor->text_, i - 1, span)) {
        return i + 1;
      }
    }
  }
  return -1;
}


#line 313
ARMarkdownParser_TitledUrl *ARMarkdownParser_findFormattedUrlWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit) {
  
#line 315
  for (jint start = ((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_; start < limit; start++) {
    {
      
#line 318
      if ([((NSString *) nil_chk(cursor->text_)) charAtWithInt:start] == '[') {
        if (!ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, start - 1)) {
          goto continue_start_loop;
        }
      }
      else {
        
#line 323
        goto continue_start_loop;
      }
      
#line 328
      for (jint middle = start + 1; middle < limit - 1; middle++) {
        {
          
#line 329
          if ([cursor->text_ charAtWithInt:middle] != ']' || [cursor->text_ charAtWithInt:middle + 1] != '(') {
            goto continue_middle_loop;
          }
          
#line 334
          for (jint end = middle + 2; end < limit; end++) {
            {
              
#line 335
              if ([cursor->text_ charAtWithInt:end] != ')') {
                goto continue_end_loop;
              }
              return new_ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(start, middle, end);
            }
            continue_end_loop: ;
          }
        }
        continue_middle_loop: ;
      }
    }
    continue_start_loop: ;
  }
  
#line 343
  return nil;
}


#line 353
ARMarkdownParser_BasicUrl *ARMarkdownParser_findUrlWithARMarkdownParser_TextCursor_withInt_(ARMarkdownParser *self, ARMarkdownParser_TextCursor *cursor, jint limit) {
  for (jint i = ((ARMarkdownParser_TextCursor *) nil_chk(cursor))->currentOffset_; i < limit; i++) {
    if (!ARMarkdownParser_isGoodAnchorWithNSString_withInt_(self, cursor->text_, i - 1)) {
      continue;
    }
    NSString *currentText = [((NSString *) nil_chk(cursor->text_)) substring:i endIndex:limit];
    id<ImActorRuntimeRegexpMatcherCompat> matcher = [((ImActorRuntimeRegexpPatternCompat *) nil_chk(JreLoadStatic(ARPatterns, WEB_URL_START_))) matcherWithNSString:currentText];
    if ([((id<ImActorRuntimeRegexpMatcherCompat>) nil_chk(matcher)) hasMatch]) {
      NSString *url = [matcher group];
      jint start = i + [matcher start];
      return new_ARMarkdownParser_BasicUrl_initWithInt_withInt_(start, start + ((jint) [((NSString *) nil_chk(url)) length]));
    }
  }
  return nil;
}


#line 376
jboolean ARMarkdownParser_isGoodAnchorWithNSString_withInt_(ARMarkdownParser *self, NSString *text, jint index) {
  
#line 378
  if (index >= 0 && index < ((jint) [((NSString *) nil_chk(text)) length])) {
    jchar postfix = [text charAtWithInt:index];
    if (postfix != ' ' && postfix != 0x0009 && postfix != 0x000a) {
      return false;
    }
  }
  
#line 385
  return true;
}


#line 396
jboolean ARMarkdownParser_isNotSymbolWithNSString_withInt_withChar_(ARMarkdownParser *self, NSString *text, jint index, jchar c) {
  if (index >= 0 && index < ((jint) [((NSString *) nil_chk(text)) length])) {
    return [text charAtWithInt:index] != c;
  }
  
#line 401
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMarkdownParser)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java"


#line 404
@implementation ARMarkdownParser_Url


#line 405
- (jint)getStart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 407
- (jint)getEnd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARMarkdownParser_Url_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getStart", NULL, "I", 0x401, NULL, NULL },
    { "getEnd", NULL, "I", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ARMarkdownParser_Url = { 2, "Url", "im.actor.runtime.markdown", "MarkdownParser", 0x40a, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMarkdownParser_Url;
}

@end

void ARMarkdownParser_Url_init(ARMarkdownParser_Url *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMarkdownParser_Url)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java"


#line 410
@implementation ARMarkdownParser_BasicUrl


#line 414
- (instancetype)initWithInt:(jint)start
                    withInt:(jint)end {
  ARMarkdownParser_BasicUrl_initWithInt_withInt_(self, start, end);
  return self;
}

- (jint)getStart {
  return start_;
}


#line 425
- (jint)getEnd {
  return end_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "BasicUrl", NULL, 0x1, NULL, NULL },
    { "getStart", NULL, "I", 0x1, NULL, NULL },
    { "getEnd", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "start_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "end_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARMarkdownParser_BasicUrl = { 2, "BasicUrl", "im.actor.runtime.markdown", "MarkdownParser", 0xa, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMarkdownParser_BasicUrl;
}

@end


#line 414
void ARMarkdownParser_BasicUrl_initWithInt_withInt_(ARMarkdownParser_BasicUrl *self, jint start, jint end) {
  (void) ARMarkdownParser_Url_init(self);
  
#line 415
  self->start_ = start;
  self->end_ = end;
}


#line 414
ARMarkdownParser_BasicUrl *new_ARMarkdownParser_BasicUrl_initWithInt_withInt_(jint start, jint end) {
  ARMarkdownParser_BasicUrl *self = [ARMarkdownParser_BasicUrl alloc];
  ARMarkdownParser_BasicUrl_initWithInt_withInt_(self, start, end);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMarkdownParser_BasicUrl)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java"


#line 430
@implementation ARMarkdownParser_TitledUrl


#line 436
- (instancetype)initWithInt:(jint)start
                    withInt:(jint)middle
                    withInt:(jint)end {
  ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(self, start, middle, end);
  return self;
}

- (jint)getStart {
  return start_;
}

- (jint)getMiddle {
  return middle_;
}


#line 452
- (jint)getEnd {
  return end_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "TitledUrl", NULL, 0x1, NULL, NULL },
    { "getStart", NULL, "I", 0x1, NULL, NULL },
    { "getMiddle", NULL, "I", 0x1, NULL, NULL },
    { "getEnd", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "start_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "middle_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "end_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARMarkdownParser_TitledUrl = { 2, "TitledUrl", "im.actor.runtime.markdown", "MarkdownParser", 0xa, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMarkdownParser_TitledUrl;
}

@end


#line 436
void ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(ARMarkdownParser_TitledUrl *self, jint start, jint middle, jint end) {
  (void) ARMarkdownParser_Url_init(self);
  
#line 437
  self->start_ = start;
  self->middle_ = middle;
  self->end_ = end;
}


#line 436
ARMarkdownParser_TitledUrl *new_ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(jint start, jint middle, jint end) {
  ARMarkdownParser_TitledUrl *self = [ARMarkdownParser_TitledUrl alloc];
  ARMarkdownParser_TitledUrl_initWithInt_withInt_withInt_(self, start, middle, end);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMarkdownParser_TitledUrl)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MarkdownParser.java"


#line 457
@implementation ARMarkdownParser_TextCursor


#line 462
- (instancetype)initWithNSString:(NSString *)text {
  ARMarkdownParser_TextCursor_initWithNSString_(self, text);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "TextCursor", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARMarkdownParser_TextCursor = { 2, "TextCursor", "im.actor.runtime.markdown", "MarkdownParser", 0xa, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMarkdownParser_TextCursor;
}

@end


#line 462
void ARMarkdownParser_TextCursor_initWithNSString_(ARMarkdownParser_TextCursor *self, NSString *text) {
  (void) NSObject_init(self);
  
#line 463
  self->text_ = text;
}


#line 462
ARMarkdownParser_TextCursor *new_ARMarkdownParser_TextCursor_initWithNSString_(NSString *text) {
  ARMarkdownParser_TextCursor *self = [ARMarkdownParser_TextCursor alloc];
  ARMarkdownParser_TextCursor_initWithNSString_(self, text);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMarkdownParser_TextCursor)

#pragma clang diagnostic pop
