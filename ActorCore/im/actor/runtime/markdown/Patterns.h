//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/Patterns.java
//

#ifndef _ImActorRuntimeMarkdownPatterns_H_
#define _ImActorRuntimeMarkdownPatterns_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class ImActorRuntimeRegexpPatternCompat;
@protocol ImActorRuntimeRegexpMatcherCompat;

/*!
 @brief Commonly used regular expression patterns.
 */
@interface ARPatterns : NSObject

+ (NSString *)GOOD_IRI_CHAR;

+ (ImActorRuntimeRegexpPatternCompat *)IP_ADDRESS;

+ (ImActorRuntimeRegexpPatternCompat *)DOMAIN_NAME;

+ (NSString *)WEB_URL_CHAR;

+ (NSString *)WEB_URL_START_CHAR;

+ (ImActorRuntimeRegexpPatternCompat *)WEB_URL;

+ (ImActorRuntimeRegexpPatternCompat *)WEB_URL_START;

+ (ImActorRuntimeRegexpPatternCompat *)EMAIL_ADDRESS;

+ (ImActorRuntimeRegexpPatternCompat *)PHONE;

#pragma mark Public

/*!
 @brief Convenience method to take all of the non-null matching groups in a
 regex Matcher and return them as a concatenated string.
 @param matcher      The Matcher object from which grouped text will
 be extracted
 @return A String comprising all of the non-null matched
 groups concatenated together
 */
+ (NSString *)concatGroupsWithImActorRuntimeRegexpMatcherCompat:(id<ImActorRuntimeRegexpMatcherCompat>)matcher;

/*!
 @brief Convenience method to return only the digits and plus signs
 in the matching string.
 @param matcher      The Matcher object from which digits and plus will
 be extracted
 @return A String comprising all of the digits and plus in
 the match
 */
+ (NSString *)digitsAndPlusOnlyWithImActorRuntimeRegexpMatcherCompat:(id<ImActorRuntimeRegexpMatcherCompat>)matcher;

@end

J2OBJC_STATIC_INIT(ARPatterns)

FOUNDATION_EXPORT NSString *ARPatterns_GOOD_IRI_CHAR_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, GOOD_IRI_CHAR_, NSString *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_IP_ADDRESS_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, IP_ADDRESS_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_DOMAIN_NAME_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, DOMAIN_NAME_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT NSString *ARPatterns_WEB_URL_CHAR_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, WEB_URL_CHAR_, NSString *)

FOUNDATION_EXPORT NSString *ARPatterns_WEB_URL_START_CHAR_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, WEB_URL_START_CHAR_, NSString *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_WEB_URL_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, WEB_URL_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_WEB_URL_START_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, WEB_URL_START_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_EMAIL_ADDRESS_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, EMAIL_ADDRESS_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT ImActorRuntimeRegexpPatternCompat *ARPatterns_PHONE_;
J2OBJC_STATIC_FIELD_GETTER(ARPatterns, PHONE_, ImActorRuntimeRegexpPatternCompat *)

FOUNDATION_EXPORT NSString *ARPatterns_concatGroupsWithImActorRuntimeRegexpMatcherCompat_(id<ImActorRuntimeRegexpMatcherCompat> matcher);

FOUNDATION_EXPORT NSString *ARPatterns_digitsAndPlusOnlyWithImActorRuntimeRegexpMatcherCompat_(id<ImActorRuntimeRegexpMatcherCompat> matcher);

J2OBJC_TYPE_LITERAL_HEADER(ARPatterns)

@compatibility_alias ImActorRuntimeMarkdownPatterns ARPatterns;


#pragma clang diagnostic pop
#endif // _ImActorRuntimeMarkdownPatterns_H_
