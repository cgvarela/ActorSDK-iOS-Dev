//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MDSpan.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/markdown/MDSpan.h"
#include "im/actor/runtime/markdown/MDText.h"
#include "java/lang/RuntimeException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARMDSpan () {
 @public
  jint spanType_;
  IOSObjectArray *child_;
}

@end

J2OBJC_FIELD_SETTER(ARMDSpan, child_, IOSObjectArray *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/markdown/MDSpan.java"


#line 3
@implementation ARMDSpan

+ (jint)TYPE_BOLD {
  return ARMDSpan_TYPE_BOLD;
}

+ (jint)TYPE_ITALIC {
  return ARMDSpan_TYPE_ITALIC;
}

+ (jint)TYPE_URL {
  return ARMDSpan_TYPE_URL;
}


#line 12
- (instancetype)initWithInt:(jint)spanType
          withARMDTextArray:(IOSObjectArray *)child {
  ARMDSpan_initWithInt_withARMDTextArray_(self, spanType, child);
  return self;
}


#line 17
- (jint)getSpanType {
  return spanType_;
}

- (IOSObjectArray *)getChild {
  return child_;
}


#line 26
- (NSString *)toMarkdown {
  NSString *res = @"";
  if (spanType_ == ARMDSpan_TYPE_BOLD) {
    (void) JreStrAppendStrong(&res, "$", @"*");
  }
  else
#line 30
  if (spanType_ == ARMDSpan_TYPE_ITALIC) {
    (void) JreStrAppendStrong(&res, "$", @"_");
  }
  
#line 32
  if (spanType_ == ARMDSpan_TYPE_URL) {
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unknown type");
  }
  {
    IOSObjectArray *a__ = child_;
    ARMDText * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ARMDText * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ARMDText *t = *b__++;
      
#line 39
      (void) JreStrAppendStrong(&res, "$", [((ARMDText *) nil_chk(t)) toMarkdown]);
    }
  }
  if (spanType_ == ARMDSpan_TYPE_BOLD) {
    (void) JreStrAppendStrong(&res, "$", @"*");
  }
  else
#line 44
  if (spanType_ == ARMDSpan_TYPE_ITALIC) {
    (void) JreStrAppendStrong(&res, "$", @"_");
  }
  else {
    
#line 47
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unknown type");
  }
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withARMDTextArray:", "MDSpan", NULL, 0x1, NULL, NULL },
    { "getSpanType", NULL, "I", 0x1, NULL, NULL },
    { "getChild", NULL, "[Lim.actor.runtime.markdown.MDText;", 0x1, NULL, NULL },
    { "toMarkdown", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_BOLD", "TYPE_BOLD", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMDSpan_TYPE_BOLD },
    { "TYPE_ITALIC", "TYPE_ITALIC", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMDSpan_TYPE_ITALIC },
    { "TYPE_URL", "TYPE_URL", 0x19, "I", NULL, NULL, .constantValue.asInt = ARMDSpan_TYPE_URL },
    { "spanType_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "child_", NULL, 0x2, "[Lim.actor.runtime.markdown.MDText;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARMDSpan = { 2, "MDSpan", "im.actor.runtime.markdown", NULL, 0x1, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARMDSpan;
}

@end


#line 12
void ARMDSpan_initWithInt_withARMDTextArray_(ARMDSpan *self, jint spanType, IOSObjectArray *child) {
  (void) ARMDText_init(self);
  
#line 13
  self->spanType_ = spanType;
  self->child_ = child;
}


#line 12
ARMDSpan *new_ARMDSpan_initWithInt_withARMDTextArray_(jint spanType, IOSObjectArray *child) {
  ARMDSpan *self = [ARMDSpan alloc];
  ARMDSpan_initWithInt_withARMDTextArray_(self, spanType, child);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARMDSpan)

#pragma clang diagnostic pop
