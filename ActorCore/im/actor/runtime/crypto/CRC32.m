//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/CRC32.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/crypto/CRC32.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARCRC32 () {
 @public
  /*!
   @brief The crc data checksum so far.
   */
  jint crc_;
}

/*!
 @brief Make the table for a fast CRC.
 */
+ (IOSIntArray *)make_crc_table;

@end

static IOSIntArray *ARCRC32_crc_table_;
J2OBJC_STATIC_FIELD_GETTER(ARCRC32, crc_table_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(ARCRC32, crc_table_, IOSIntArray *)

__attribute__((unused)) static IOSIntArray *ARCRC32_make_crc_table();

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/CRC32.java"

J2OBJC_INITIALIZED_DEFN(ARCRC32)


#line 10
@implementation ARCRC32


#line 24
+ (IOSIntArray *)make_crc_table {
  return ARCRC32_make_crc_table();
}


#line 42
- (jlong)getValue {
  return (jlong) crc_ & (jlong) 0xffffffffLL;
}


#line 49
- (void)reset {
  crc_ = 0;
}


#line 59
- (void)updateWithInt:(jint)bval {
  jint c = ~crc_;
  c = IOSIntArray_Get(nil_chk(ARCRC32_crc_table_), (c ^ bval) & (jint) 0xff) ^ (JreURShift32(c, 8));
  crc_ = ~c;
}


#line 72
- (void)updateWithByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len {
  jint c = ~crc_;
  while (--len >= 0)
#line 75
  c = IOSIntArray_Get(nil_chk(ARCRC32_crc_table_), (c ^ IOSByteArray_Get(nil_chk(buf), off++)) & (jint) 0xff) ^ (JreURShift32(c, 8));
  crc_ = ~c;
}

- (void)updateWithByteArray:(IOSByteArray *)buf {
  [self updateWithByteArray:buf withInt:0 withInt:((IOSByteArray *) nil_chk(buf))->size_];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARCRC32_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ARCRC32 class]) {
    ARCRC32_crc_table_ = ARCRC32_make_crc_table();
    J2OBJC_SET_INITIALIZED(ARCRC32)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "make_crc_table", NULL, "[I", 0xa, NULL, NULL },
    { "getValue", NULL, "J", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "updateWithInt:", "update", "V", 0x1, NULL, NULL },
    { "updateWithByteArray:withInt:withInt:", "update", "V", 0x1, NULL, NULL },
    { "updateWithByteArray:", "update", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "crc_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "crc_table_", NULL, 0xa, "[I", &ARCRC32_crc_table_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARCRC32 = { 2, "CRC32", "im.actor.runtime.crypto", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARCRC32;
}

@end


#line 24
IOSIntArray *ARCRC32_make_crc_table() {
  ARCRC32_initialize();
  
#line 25
  IOSIntArray *crc_table = [IOSIntArray newArrayWithLength:256];
  for (jint n = 0; n < 256; n++) {
    jint c = n;
    for (jint k = 8; --k >= 0; ) {
      if ((c & 1) != 0)
#line 30
      c = (jint) 0xedb88320 ^ (JreURShift32(c, 1));
      else
#line 32
      c = JreURShift32(c, 1);
    }
    *IOSIntArray_GetRef(crc_table, n) = c;
  }
  return crc_table;
}

void ARCRC32_init(ARCRC32 *self) {
  (void) NSObject_init(self);
  self->crc_ =
#line 14
  0;
}

ARCRC32 *new_ARCRC32_init() {
  ARCRC32 *self = [ARCRC32 alloc];
  ARCRC32_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARCRC32)

#pragma clang diagnostic pop
