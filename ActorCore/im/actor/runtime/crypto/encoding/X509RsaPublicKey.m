//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/encoding/X509RsaPublicKey.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/crypto/asn1/ASN1.h"
#include "im/actor/runtime/crypto/asn1/ASN1BitString.h"
#include "im/actor/runtime/crypto/asn1/ASN1Integer.h"
#include "im/actor/runtime/crypto/asn1/ASN1Null.h"
#include "im/actor/runtime/crypto/asn1/ASN1ObjectIdentifier.h"
#include "im/actor/runtime/crypto/asn1/ASN1Primitive.h"
#include "im/actor/runtime/crypto/asn1/ASN1Sequence.h"
#include "im/actor/runtime/crypto/encoding/X509RsaPublicKey.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/math/BigInteger.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARX509RsaPublicKey () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(ARX509RsaPublicKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(ARX509RsaPublicKey, exponent_, JavaMathBigInteger *)

static NSString *ARX509RsaPublicKey_ALGO_TYPE_ = @"1.2.840.113549.1.1.1";
J2OBJC_STATIC_FIELD_GETTER(ARX509RsaPublicKey, ALGO_TYPE_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/encoding/X509RsaPublicKey.java"


#line 18
@implementation ARX509RsaPublicKey


#line 25
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  ARX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 30
- (instancetype)initWithByteArray:(IOSByteArray *)data {
  ARX509RsaPublicKey_initWithByteArray_(self, data);
  return self;
}


#line 85
- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

- (IOSByteArray *)serialize {
  return [new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1ObjectIdentifier_initWithNSString_(
#line 96
  ARX509RsaPublicKey_ALGO_TYPE_), new_ARASN1Null_init() } count:2 type:ARASN1Primitive_class_()]), new_ARASN1BitString_initWithInt_withByteArray_(
#line 98
  0,
#line 99
  [new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1Integer_initWithJavaMathBigInteger_(
#line 100
  modulus_), new_ARASN1Integer_initWithJavaMathBigInteger_(
#line 101
  exponent_) } count:2 type:ARASN1Primitive_class_()]) serialize]) } count:2 type:ARASN1Primitive_class_()]) serialize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:withJavaMathBigInteger:", "X509RsaPublicKey", NULL, 0x1, NULL, NULL },
    { "initWithByteArray:", "X509RsaPublicKey", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getModulus", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "getExponent", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "serialize", NULL, "[B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALGO_TYPE_", NULL, 0x1a, "Ljava.lang.String;", &ARX509RsaPublicKey_ALGO_TYPE_, NULL, .constantValue.asLong = 0 },
    { "modulus_", NULL, 0x2, "Ljava.math.BigInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "exponent_", NULL, 0x2, "Ljava.math.BigInteger;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARX509RsaPublicKey = { 2, "X509RsaPublicKey", "im.actor.runtime.crypto.encoding", NULL, 0x11, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARX509RsaPublicKey;
}

@end


#line 25
void ARX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(ARX509RsaPublicKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  (void) NSObject_init(self);
  
#line 26
  self->modulus_ = modulus;
  self->exponent_ = exponent;
}


#line 25
ARX509RsaPublicKey *new_ARX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  ARX509RsaPublicKey *self = [ARX509RsaPublicKey alloc];
  ARX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 30
void ARX509RsaPublicKey_initWithByteArray_(ARX509RsaPublicKey *self, IOSByteArray *data) {
  (void) NSObject_init(self);
  
#line 31
  ARASN1Primitive *root = ARASN1_readObjectWithByteArray_(data);
  if (!([root isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  ARASN1Sequence *rootSequence = (ARASN1Sequence *) check_class_cast(ARASN1_readObjectWithByteArray_(data), [ARASN1Sequence class]);
  
#line 37
  if ([((ARASN1Sequence *) nil_chk(rootSequence)) size] != 2) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 41
  if (!([[rootSequence getWithInt:0] isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if (!([[rootSequence getWithInt:1] isKindOfClass:[ARASN1BitString class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 48
  ARASN1Sequence *algoHeader = (ARASN1Sequence *) check_class_cast([rootSequence getWithInt:0], [ARASN1Sequence class]);
  if (!([[((ARASN1Sequence *) nil_chk(algoHeader)) getWithInt:0] isKindOfClass:[ARASN1ObjectIdentifier class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 53
  ARASN1ObjectIdentifier *algo = (ARASN1ObjectIdentifier *) check_class_cast([algoHeader getWithInt:0], [ARASN1ObjectIdentifier class]);
  if (![((NSString *) nil_chk([((ARASN1ObjectIdentifier *) nil_chk(algo)) getIdentifier])) isEqual:ARX509RsaPublicKey_ALGO_TYPE_]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Incorrect type of header: ", [algo getIdentifier]));
  }
  
#line 58
  ARASN1BitString *bitString = (ARASN1BitString *) check_class_cast([rootSequence getWithInt:1], [ARASN1BitString class]);
  
#line 60
  ARASN1Primitive *keyRoot = ARASN1_readObjectWithByteArray_([((ARASN1BitString *) nil_chk(bitString)) getContent]);
  if (!([keyRoot isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 65
  ARASN1Sequence *keySequence = (ARASN1Sequence *) check_class_cast(keyRoot, [ARASN1Sequence class]);
  if ([((ARASN1Sequence *) nil_chk(keySequence)) size] != 2) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 70
  if (!([[keySequence getWithInt:0] isKindOfClass:[ARASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 74
  if (!([[keySequence getWithInt:1] isKindOfClass:[ARASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 78
  ARASN1Integer *modulus = (ARASN1Integer *) check_class_cast([keySequence getWithInt:0], [ARASN1Integer class]);
  ARASN1Integer *exponent = (ARASN1Integer *) check_class_cast([keySequence getWithInt:1], [ARASN1Integer class]);
  
#line 81
  self->modulus_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((ARASN1Integer *) nil_chk(modulus)) getData]);
  self->exponent_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((ARASN1Integer *) nil_chk(exponent)) getData]);
}


#line 30
ARX509RsaPublicKey *new_ARX509RsaPublicKey_initWithByteArray_(IOSByteArray *data) {
  ARX509RsaPublicKey *self = [ARX509RsaPublicKey alloc];
  ARX509RsaPublicKey_initWithByteArray_(self, data);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARX509RsaPublicKey)

#pragma clang diagnostic pop
