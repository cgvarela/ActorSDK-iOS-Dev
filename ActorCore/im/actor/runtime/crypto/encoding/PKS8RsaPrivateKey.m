//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/encoding/PKS8RsaPrivateKey.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/crypto/asn1/ASN1.h"
#include "im/actor/runtime/crypto/asn1/ASN1Integer.h"
#include "im/actor/runtime/crypto/asn1/ASN1Null.h"
#include "im/actor/runtime/crypto/asn1/ASN1ObjectIdentifier.h"
#include "im/actor/runtime/crypto/asn1/ASN1OctetString.h"
#include "im/actor/runtime/crypto/asn1/ASN1Primitive.h"
#include "im/actor/runtime/crypto/asn1/ASN1Sequence.h"
#include "im/actor/runtime/crypto/encoding/PKS8RsaPrivateKey.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARPKS8RsaPrivateKey () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(ARPKS8RsaPrivateKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(ARPKS8RsaPrivateKey, exponent_, JavaMathBigInteger *)

static NSString *ARPKS8RsaPrivateKey_ALGO_ = @"1.2.840.113549.1.1.1";
J2OBJC_STATIC_FIELD_GETTER(ARPKS8RsaPrivateKey, ALGO_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/encoding/PKS8RsaPrivateKey.java"


#line 18
@implementation ARPKS8RsaPrivateKey


#line 25
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  ARPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 30
- (instancetype)initWithByteArray:(IOSByteArray *)encoded {
  ARPKS8RsaPrivateKey_initWithByteArray_(self, encoded);
  return self;
}


#line 88
- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

- (IOSByteArray *)serialize {
  return [new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1Integer_initWithInt_(
#line 98
  0), new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1ObjectIdentifier_initWithNSString_(
#line 100
  ARPKS8RsaPrivateKey_ALGO_), new_ARASN1Null_init() } count:2 type:ARASN1Primitive_class_()]), new_ARASN1OctetString_initWithByteArray_(
#line 103
  [new_ARASN1Sequence_initWithARASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_ARASN1Integer_init(), new_ARASN1Integer_initWithJavaMathBigInteger_(
#line 105
  modulus_), new_ARASN1Integer_init(), new_ARASN1Integer_initWithJavaMathBigInteger_(
#line 107
  exponent_), new_ARASN1Integer_init(), new_ARASN1Integer_init(), new_ARASN1Integer_init(), new_ARASN1Integer_init(), new_ARASN1Integer_init() } count:9 type:ARASN1Primitive_class_()]) serialize]) } count:3 type:ARASN1Primitive_class_()]) serialize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaMathBigInteger:withJavaMathBigInteger:", "PKS8RsaPrivateKey", NULL, 0x1, NULL, NULL },
    { "initWithByteArray:", "PKS8RsaPrivateKey", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getModulus", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "getExponent", NULL, "Ljava.math.BigInteger;", 0x1, NULL, NULL },
    { "serialize", NULL, "[B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALGO_", NULL, 0x1a, "Ljava.lang.String;", &ARPKS8RsaPrivateKey_ALGO_, NULL, .constantValue.asLong = 0 },
    { "modulus_", NULL, 0x2, "Ljava.math.BigInteger;", NULL, NULL, .constantValue.asLong = 0 },
    { "exponent_", NULL, 0x2, "Ljava.math.BigInteger;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARPKS8RsaPrivateKey = { 2, "PKS8RsaPrivateKey", "im.actor.runtime.crypto.encoding", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARPKS8RsaPrivateKey;
}

@end


#line 25
void ARPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(ARPKS8RsaPrivateKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  (void) NSObject_init(self);
  
#line 26
  self->modulus_ = modulus;
  self->exponent_ = exponent;
}


#line 25
ARPKS8RsaPrivateKey *new_ARPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  ARPKS8RsaPrivateKey *self = [ARPKS8RsaPrivateKey alloc];
  ARPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 30
void ARPKS8RsaPrivateKey_initWithByteArray_(ARPKS8RsaPrivateKey *self, IOSByteArray *encoded) {
  (void) NSObject_init(self);
  
#line 31
  ARASN1Primitive *root = ARASN1_readObjectWithByteArray_(encoded);
  if (!([root isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  ARASN1Sequence *sequence = (ARASN1Sequence *) check_class_cast(root, [ARASN1Sequence class]);
  
#line 37
  if (!([[((ARASN1Sequence *) nil_chk(sequence)) getWithInt:0] isKindOfClass:[ARASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if ([((JavaMathBigInteger *) nil_chk([((ARASN1Integer *) nil_chk(((ARASN1Integer *) check_class_cast([sequence getWithInt:0], [ARASN1Integer class])))) asBigInteger])) intValue] != 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 44
  if (!([[sequence getWithInt:1] isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  ARASN1Sequence *algoHeader = (ARASN1Sequence *) check_class_cast([sequence getWithInt:1], [ARASN1Sequence class]);
  if (!([[((ARASN1Sequence *) nil_chk(algoHeader)) getWithInt:0] isKindOfClass:[ARASN1ObjectIdentifier class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 52
  ARASN1ObjectIdentifier *algo = (ARASN1ObjectIdentifier *) check_class_cast([algoHeader getWithInt:0], [ARASN1ObjectIdentifier class]);
  if (![((NSString *) nil_chk([((ARASN1ObjectIdentifier *) nil_chk(algo)) getIdentifier])) isEqual:ARPKS8RsaPrivateKey_ALGO_]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Incorrect type of header: ", [algo getIdentifier]));
  }
  
#line 57
  if (!([[sequence getWithInt:2] isKindOfClass:[ARASN1OctetString class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 61
  IOSByteArray *contents = [((ARASN1OctetString *) nil_chk(((ARASN1OctetString *) check_class_cast([sequence getWithInt:2], [ARASN1OctetString class])))) getData];
  ARASN1Primitive *keyRoot = ARASN1_readObjectWithByteArray_(contents);
  
#line 64
  if (!([keyRoot isKindOfClass:[ARASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 68
  ARASN1Sequence *keySequence = (ARASN1Sequence *) check_class_cast(keyRoot, [ARASN1Sequence class]);
  if ([((ARASN1Sequence *) nil_chk(keySequence)) size] != 9) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  for (jint i = 0; i < 9; i++) {
    if (!([[keySequence getWithInt:i] isKindOfClass:[ARASN1Integer class]])) {
      @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
    }
  }
  
#line 78
  jint keyVersion = [((JavaMathBigInteger *) nil_chk([((ARASN1Integer *) nil_chk(((ARASN1Integer *) check_class_cast([keySequence getWithInt:0], [ARASN1Integer class])))) asBigInteger])) intValue];
  
#line 80
  if (keyVersion != 0 && keyVersion != 1) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 84
  self->modulus_ = [((ARASN1Integer *) nil_chk(((ARASN1Integer *) check_class_cast([keySequence getWithInt:1], [ARASN1Integer class])))) asBigInteger];
  self->exponent_ = [((ARASN1Integer *) nil_chk(((ARASN1Integer *) check_class_cast([keySequence getWithInt:3], [ARASN1Integer class])))) asBigInteger];
}


#line 30
ARPKS8RsaPrivateKey *new_ARPKS8RsaPrivateKey_initWithByteArray_(IOSByteArray *encoded) {
  ARPKS8RsaPrivateKey *self = [ARPKS8RsaPrivateKey alloc];
  ARPKS8RsaPrivateKey_initWithByteArray_(self, encoded);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARPKS8RsaPrivateKey)

#pragma clang diagnostic pop
