//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/Base64Utils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/crypto/Base64Utils.h"
#include "java/lang/StringBuilder.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARBase64Utils ()

+ (jboolean)base64AppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                          withInt:(jint)digit
                                      withBoolean:(jboolean)haveNonZero;

@end

static IOSCharArray *ARBase64Utils_base64Chars_;
J2OBJC_STATIC_FIELD_GETTER(ARBase64Utils, base64Chars_, IOSCharArray *)

static IOSByteArray *ARBase64Utils_base64Values_;
J2OBJC_STATIC_FIELD_GETTER(ARBase64Utils, base64Values_, IOSByteArray *)

__attribute__((unused)) static jboolean ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(JavaLangStringBuilder *sb, jint digit, jboolean haveNonZero);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/crypto/Base64Utils.java"

J2OBJC_INITIALIZED_DEFN(ARBase64Utils)


#line 22
@implementation ARBase64Utils


#line 61
+ (IOSByteArray *)fromBase64WithNSString:(NSString *)data {
  return ARBase64Utils_fromBase64WithNSString_(data);
}


#line 112
+ (jlong)longFromBase64WithNSString:(NSString *)value {
  return ARBase64Utils_longFromBase64WithNSString_(value);
}


#line 134
+ (NSString *)toBase64WithByteArray:(IOSByteArray *)data {
  return ARBase64Utils_toBase64WithByteArray_(data);
}


#line 176
+ (NSString *)toBase64WithLong:(jlong)value {
  return ARBase64Utils_toBase64WithLong_(value);
}


#line 198
+ (jboolean)base64AppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                          withInt:(jint)digit
                                      withBoolean:(jboolean)haveNonZero {
  return ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, digit, haveNonZero);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARBase64Utils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ARBase64Utils class]) {
    ARBase64Utils_base64Chars_ = [IOSCharArray newArrayWithChars:(jchar[]){
#line 30
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
#line 31
      'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b',
#line 32
      'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
#line 33
      'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',
#line 34
      '4', '5', '6', '7', '8', '9', '+', '/' } count:64];
      ARBase64Utils_base64Values_ = [IOSByteArray newArrayWithLength:
#line 42
      128];
      {
        
#line 49
        for (jint i = 0; i < ARBase64Utils_base64Chars_->size_; i++) {
          *IOSByteArray_GetRef(ARBase64Utils_base64Values_, IOSCharArray_Get(ARBase64Utils_base64Chars_, i)) = (jbyte) i;
        }
      }
      J2OBJC_SET_INITIALIZED(ARBase64Utils)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "fromBase64WithNSString:", "fromBase64", "[B", 0x9, NULL, NULL },
    { "longFromBase64WithNSString:", "longFromBase64", "J", 0x9, NULL, NULL },
    { "toBase64WithByteArray:", "toBase64", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toBase64WithLong:", "toBase64", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "base64AppendWithJavaLangStringBuilder:withInt:withBoolean:", "base64Append", "Z", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base64Chars_", NULL, 0x1a, "[C", &ARBase64Utils_base64Chars_, NULL, .constantValue.asLong = 0 },
    { "base64Values_", NULL, 0x1a, "[B", &ARBase64Utils_base64Values_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARBase64Utils = { 2, "Base64Utils", "im.actor.runtime.crypto", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARBase64Utils;
}

@end


#line 61
IOSByteArray *ARBase64Utils_fromBase64WithNSString_(NSString *data) {
  ARBase64Utils_initialize();
  
#line 62
  if (data == nil) {
    return nil;
  }
  
#line 66
  jint len = ((jint) [((NSString *) nil_chk(data)) length]);
  
#line 69
  if (len == 0) {
    return [IOSByteArray newArrayWithLength:0];
  }
  
#line 73
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:len];
  [data getChars:0 sourceEnd:len destination:chars destinationBegin:0];
  
#line 76
  jint olen = 3 * (len / 4);
  if (IOSCharArray_Get(chars, len - 2) == '=') {
    --olen;
  }
  if (IOSCharArray_Get(chars, len - 1) == '=') {
    --olen;
  }
  
#line 84
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:olen];
  
#line 86
  jint iidx = 0;
  jint oidx = 0;
  while (iidx < len) {
    jint c0 = IOSByteArray_Get(nil_chk(ARBase64Utils_base64Values_), IOSCharArray_Get(chars, iidx++) & (jint) 0xff);
    jint c1 = IOSByteArray_Get(ARBase64Utils_base64Values_, IOSCharArray_Get(chars, iidx++) & (jint) 0xff);
    jint c2 = IOSByteArray_Get(ARBase64Utils_base64Values_, IOSCharArray_Get(chars, iidx++) & (jint) 0xff);
    jint c3 = IOSByteArray_Get(ARBase64Utils_base64Values_, IOSCharArray_Get(chars, iidx++) & (jint) 0xff);
    jint c24 = (JreLShift32(c0, 18)) | (JreLShift32(c1, 12)) | (JreLShift32(c2, 6)) | c3;
    
#line 95
    *IOSByteArray_GetRef(bytes, oidx++) = (jbyte) (JreRShift32(c24, 16));
    if (oidx == olen) {
      break;
    }
    *IOSByteArray_GetRef(bytes, oidx++) = (jbyte) (JreRShift32(c24, 8));
    if (oidx == olen) {
      break;
    }
    *IOSByteArray_GetRef(bytes, oidx++) = (jbyte) c24;
  }
  
#line 106
  return bytes;
}


#line 112
jlong ARBase64Utils_longFromBase64WithNSString_(NSString *value) {
  ARBase64Utils_initialize();
  
#line 113
  jint pos = 0;
  jlong longVal = IOSByteArray_Get(nil_chk(ARBase64Utils_base64Values_), [((NSString *) nil_chk(value)) charAtWithInt:pos++]);
  jint len = ((jint) [value length]);
  while (pos < len) {
    JreLShiftAssignLong(&longVal, 6);
    longVal |= IOSByteArray_Get(ARBase64Utils_base64Values_, [value charAtWithInt:pos++]);
  }
  return longVal;
}


#line 134
NSString *ARBase64Utils_toBase64WithByteArray_(IOSByteArray *data) {
  ARBase64Utils_initialize();
  
#line 135
  if (data == nil) {
    return nil;
  }
  
#line 139
  jint len = ((IOSByteArray *) nil_chk(data))->size_;
  if (len == 0) {
    return @"";
  }
  
#line 144
  jint olen = 4 * ((len + 2) / 3);
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:olen];
  
#line 147
  jint iidx = 0;
  jint oidx = 0;
  jint charsLeft = len;
  while (charsLeft > 0) {
    jint b0 = IOSByteArray_Get(data, iidx++) & (jint) 0xff;
    jint b1 = (charsLeft > 1) ? IOSByteArray_Get(data, iidx++) & (jint) 0xff : 0;
    jint b2 = (charsLeft > 2) ? IOSByteArray_Get(data, iidx++) & (jint) 0xff : 0;
    jint b24 = (JreLShift32(b0, 16)) | (JreLShift32(b1, 8)) | b2;
    
#line 156
    jint c0 = (JreRShift32(b24, 18)) & (jint) 0x3f;
    jint c1 = (JreRShift32(b24, 12)) & (jint) 0x3f;
    jint c2 = (JreRShift32(b24, 6)) & (jint) 0x3f;
    jint c3 = b24 & (jint) 0x3f;
    
#line 161
    *IOSCharArray_GetRef(chars, oidx++) = IOSCharArray_Get(nil_chk(ARBase64Utils_base64Chars_), c0);
    *IOSCharArray_GetRef(chars, oidx++) = IOSCharArray_Get(ARBase64Utils_base64Chars_, c1);
    *IOSCharArray_GetRef(chars, oidx++) = (charsLeft > 1) ? IOSCharArray_Get(ARBase64Utils_base64Chars_, c2) : '=';
    *IOSCharArray_GetRef(chars, oidx++) = (charsLeft > 2) ? IOSCharArray_Get(ARBase64Utils_base64Chars_, c3) : '=';
    
#line 166
    charsLeft -= 3;
  }
  
#line 169
  return [NSString stringWithCharacters:chars];
}


#line 176
NSString *ARBase64Utils_toBase64WithLong_(jlong value) {
  ARBase64Utils_initialize();
  jint low = (jint) (value & (jint) 0xffffffff);
  jint high = (jint) (JreRShift64(value, 32));
  
#line 181
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(high, 28)) & (jint) 0xf, false);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(high, 22)) & (jint) 0x3f, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(high, 16)) & (jint) 0x3f, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(high, 10)) & (jint) 0x3f, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(high, 4)) & (jint) 0x3f, haveNonZero);
  jint v = (JreLShift32((high & (jint) 0xf), 2)) | ((JreRShift32(low, 30)) & (jint) 0x3);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, v, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(low, 24)) & (jint) 0x3f, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(low, 18)) & (jint) 0x3f, haveNonZero);
  haveNonZero = ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(low, 12)) & (jint) 0x3f, haveNonZero);
  ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, (JreRShift32(low, 6)) & (jint) 0x3f, haveNonZero);
  ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(sb, low & (jint) 0x3f, true);
  
#line 195
  return [sb description];
}


#line 198
jboolean ARBase64Utils_base64AppendWithJavaLangStringBuilder_withInt_withBoolean_(JavaLangStringBuilder *sb, jint digit, jboolean haveNonZero) {
  ARBase64Utils_initialize();
  if (digit > 0) {
    haveNonZero = true;
  }
  if (haveNonZero) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:IOSCharArray_Get(nil_chk(ARBase64Utils_base64Chars_), digit)];
  }
  return haveNonZero;
}

void ARBase64Utils_init(ARBase64Utils *self) {
  (void) NSObject_init(self);
}

ARBase64Utils *new_ARBase64Utils_init() {
  ARBase64Utils *self = [ARBase64Utils alloc];
  ARBase64Utils_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARBase64Utils)

#pragma clang diagnostic pop
