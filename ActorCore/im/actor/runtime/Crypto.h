//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/Crypto.java
//

#ifndef _ImActorRuntimeCrypto_H_
#define _ImActorRuntimeCrypto_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class IOSByteArray;
@class IOSCharArray;
@class JavaMathBigInteger;

@interface ARCrypto : NSObject

+ (IOSCharArray *)hexArray;

#pragma mark Public

- (instancetype)init;

+ (IOSByteArray *)fromHexWithNSString:(NSString *)hex;

+ (JavaMathBigInteger *)generateBigIntegerWithInt:(jint)numBits;

+ (JavaMathBigInteger *)generateBigIntegerWithInt:(jint)numBits
                                          withInt:(jint)certanity;

/*!
 @brief Calculating lowcase hex string
 @param bytes data for hex
 @return hex string
 */
+ (NSString *)hexWithByteArray:(IOSByteArray *)bytes;

+ (IOSByteArray *)MD5WithByteArray:(IOSByteArray *)data;

+ (void)nextBytesWithByteArray:(IOSByteArray *)data;

/*!
 @brief Generate securely some amount of bytes
 @param len bytes count
 @return random bytes
 */
+ (IOSByteArray *)randomBytesWithInt:(jint)len;

/*!
 @brief Generate securely random int
 @param maxValue maximum value of int
 @return random value
 */
+ (jint)randomIntWithInt:(jint)maxValue;

/*!
 @brief Calculating SHA256
 @param data source data
 @return SHA256 of data
 */
+ (IOSByteArray *)SHA256WithByteArray:(IOSByteArray *)data;

/*!
 @brief Calculating SHA256
 @param data source data
 @return SHA256 of data
 */
+ (IOSByteArray *)SHA512WithByteArray:(IOSByteArray *)data;

@end

J2OBJC_STATIC_INIT(ARCrypto)

FOUNDATION_EXPORT IOSCharArray *ARCrypto_hexArray_;
J2OBJC_STATIC_FIELD_GETTER(ARCrypto, hexArray_, IOSCharArray *)

FOUNDATION_EXPORT IOSByteArray *ARCrypto_MD5WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *ARCrypto_SHA256WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *ARCrypto_SHA512WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT jint ARCrypto_randomIntWithInt_(jint maxValue);

FOUNDATION_EXPORT IOSByteArray *ARCrypto_randomBytesWithInt_(jint len);

FOUNDATION_EXPORT void ARCrypto_nextBytesWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT JavaMathBigInteger *ARCrypto_generateBigIntegerWithInt_(jint numBits);

FOUNDATION_EXPORT JavaMathBigInteger *ARCrypto_generateBigIntegerWithInt_withInt_(jint numBits, jint certanity);

FOUNDATION_EXPORT NSString *ARCrypto_hexWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSByteArray *ARCrypto_fromHexWithNSString_(NSString *hex);

FOUNDATION_EXPORT void ARCrypto_init(ARCrypto *self);

FOUNDATION_EXPORT ARCrypto *new_ARCrypto_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ARCrypto)

@compatibility_alias ImActorRuntimeCrypto ARCrypto;


#pragma clang diagnostic pop
#endif // _ImActorRuntimeCrypto_H_
