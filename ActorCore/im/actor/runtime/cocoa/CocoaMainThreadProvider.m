//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-cocoa/src/main/java//im/actor/runtime/cocoa/CocoaMainThreadProvider.java
//

#include "J2ObjC_source.h"
#include "im/actor/runtime/cocoa/CocoaMainThreadProvider.h"
#include "java/lang/Runnable.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-cocoa/src/main/java//im/actor/runtime/cocoa/CocoaMainThreadProvider.java"


#line 5
@implementation ARCocoaMainThreadProvider


#line 8
- (void)postToMainThreadWithRunnable:(id<JavaLangRunnable>)runnable {
  dispatch_async(dispatch_get_main_queue(), ^{
    // NSLog(@"dispatchOnUi(core) %@", runnable);
    [runnable run];
  });
}


#line 16
- (jboolean)isMainThread {
  return [NSThread currentThread].isMainThread;
}


#line 21
- (jboolean)isSingleThread {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARCocoaMainThreadProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "postToMainThreadWithRunnable:", "postToMainThread", "V", 0x101, NULL, NULL },
    { "isMainThread", NULL, "Z", 0x101, NULL, NULL },
    { "isSingleThread", NULL, "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ARCocoaMainThreadProvider = { 2, "CocoaMainThreadProvider", "im.actor.runtime.cocoa", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARCocoaMainThreadProvider;
}

@end

void ARCocoaMainThreadProvider_init(ARCocoaMainThreadProvider *self) {
  (void) NSObject_init(self);
}

ARCocoaMainThreadProvider *new_ARCocoaMainThreadProvider_init() {
  ARCocoaMainThreadProvider *self = [ARCocoaMainThreadProvider alloc];
  ARCocoaMainThreadProvider_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARCocoaMainThreadProvider)

#pragma clang diagnostic pop
