//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/storage/ObjectCache.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/storage/ObjectCache.h"
#include <j2objc/java/util/HashMap.h>
#include <j2objc/java/util/HashSet.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARObjectCache () {
 @public
  jboolean lockLoading_;
}

@end

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/storage/ObjectCache.java"


#line 10
@implementation ARObjectCache


#line 15
- (void)onObjectLoadedWithId:(id)key
                      withId:(id)value {
  @synchronized(self) {
    
#line 16
    if (lockLoading_) {
      return;
    }
    if ([((JavaUtilHashSet *) nil_chk(removedItems_)) containsWithId:key]) {
      return;
    }
    if ([((JavaUtilHashMap *) nil_chk(memoryCache_)) containsKeyWithId:key]) {
      return;
    }
    (void) [memoryCache_ putWithId:key withId:value];
  }
}


#line 28
- (void)onObjectUpdatedWithId:(id)key
                       withId:(id)value {
  @synchronized(self) {
    
#line 29
    [((JavaUtilHashSet *) nil_chk(removedItems_)) removeWithId:key];
    (void) [((JavaUtilHashMap *) nil_chk(memoryCache_)) putWithId:key withId:value];
  }
}


#line 33
- (void)removeObjectWithId:(id)key {
  @synchronized(self) {
    
#line 34
    (void) [((JavaUtilHashMap *) nil_chk(memoryCache_)) removeWithId:key];
    [((JavaUtilHashSet *) nil_chk(removedItems_)) addWithId:key];
  }
}


#line 38
- (id)lookupWithId:(id)key {
  @synchronized(self) {
    
#line 39
    return [((JavaUtilHashMap *) nil_chk(memoryCache_)) getWithId:key];
  }
}


#line 42
- (void)clear {
  @synchronized(self) {
    
#line 43
    [((JavaUtilHashMap *) nil_chk(memoryCache_)) clear];
    [((JavaUtilHashSet *) nil_chk(removedItems_)) clear];
  }
}


#line 47
- (void)startLock {
  @synchronized(self) {
    
#line 48
    lockLoading_ = true;
  }
}


#line 51
- (void)stopLock {
  @synchronized(self) {
    
#line 52
    lockLoading_ = false;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARObjectCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onObjectLoadedWithId:withId:", "onObjectLoaded", "V", 0x21, NULL, "(TK;TV;)V" },
    { "onObjectUpdatedWithId:withId:", "onObjectUpdated", "V", 0x21, NULL, "(TK;TV;)V" },
    { "removeObjectWithId:", "removeObject", "V", 0x21, NULL, "(TK;)V" },
    { "lookupWithId:", "lookup", "TV;", 0x21, NULL, "(TK;)TV;" },
    { "clear", NULL, "V", 0x21, NULL, NULL },
    { "startLock", NULL, "V", 0x21, NULL, NULL },
    { "stopLock", NULL, "V", 0x21, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "memoryCache_", NULL, 0x14, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<TK;TV;>;", .constantValue.asLong = 0 },
    { "removedItems_", NULL, 0x14, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<TK;>;", .constantValue.asLong = 0 },
    { "lockLoading_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARObjectCache = { 2, "ObjectCache", "im.actor.runtime.storage", NULL, 0x1, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_ARObjectCache;
}

@end

void ARObjectCache_init(ARObjectCache *self) {
  (void) NSObject_init(self);
  self->memoryCache_ = new_JavaUtilHashMap_init();
  self->removedItems_ = new_JavaUtilHashSet_init();
  self->lockLoading_ =
#line 13
  false;
}

ARObjectCache *new_ARObjectCache_init() {
  ARObjectCache *self = [ARObjectCache alloc];
  ARObjectCache_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARObjectCache)

#pragma clang diagnostic pop
