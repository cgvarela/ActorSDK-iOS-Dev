//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/HTTP.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/HTTP.h"
#include "im/actor/runtime/HttpRuntime.h"
#include "im/actor/runtime/HttpRuntimeProvider.h"
#include "im/actor/runtime/http/FileDownloadCallback.h"
#include "im/actor/runtime/http/FileUploadCallback.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static id<ARHttpRuntime> ARHTTP_runtime_;
J2OBJC_STATIC_FIELD_GETTER(ARHTTP, runtime_, id<ARHttpRuntime>)
J2OBJC_STATIC_FIELD_SETTER(ARHTTP, runtime_, id<ARHttpRuntime>)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/HTTP.java"

J2OBJC_INITIALIZED_DEFN(ARHTTP)


#line 6
@implementation ARHTTP


#line 10
+ (void)getMethodWithNSString:(NSString *)url
                      withInt:(jint)startOffset
                      withInt:(jint)size
                      withInt:(jint)totalSize
   withARFileDownloadCallback:(id<ARFileDownloadCallback>)callback {
  ARHTTP_getMethodWithNSString_withInt_withInt_withInt_withARFileDownloadCallback_(url, startOffset, size, totalSize, callback);
}


#line 14
+ (void)putMethodWithNSString:(NSString *)url
                withByteArray:(IOSByteArray *)contents
     withARFileUploadCallback:(id<ARFileUploadCallback>)callback {
  ARHTTP_putMethodWithNSString_withByteArray_withARFileUploadCallback_(url, contents, callback);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARHTTP_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ARHTTP class]) {
    ARHTTP_runtime_ = new_ARHttpRuntimeProvider_init();
    J2OBJC_SET_INITIALIZED(ARHTTP)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMethodWithNSString:withInt:withInt:withInt:withARFileDownloadCallback:", "getMethod", "V", 0x9, NULL, NULL },
    { "putMethodWithNSString:withByteArray:withARFileUploadCallback:", "putMethod", "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "runtime_", NULL, 0xa, "Lim.actor.runtime.HttpRuntime;", &ARHTTP_runtime_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARHTTP = { 2, "HTTP", "im.actor.runtime", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARHTTP;
}

@end


#line 10
void ARHTTP_getMethodWithNSString_withInt_withInt_withInt_withARFileDownloadCallback_(NSString *url, jint startOffset, jint size, jint totalSize, id<ARFileDownloadCallback> callback) {
  ARHTTP_initialize();
  
#line 11
  [((id<ARHttpRuntime>) nil_chk(ARHTTP_runtime_)) getMethodWithUrl:url withStartOffset:startOffset withSize:size withTotalSize:totalSize withCallback:callback];
}


#line 14
void ARHTTP_putMethodWithNSString_withByteArray_withARFileUploadCallback_(NSString *url, IOSByteArray *contents, id<ARFileUploadCallback> callback) {
  ARHTTP_initialize();
  
#line 15
  [((id<ARHttpRuntime>) nil_chk(ARHTTP_runtime_)) putMethodWithUrl:url withContents:contents withCallback:callback];
}

void ARHTTP_init(ARHTTP *self) {
  (void) NSObject_init(self);
}

ARHTTP *new_ARHTTP_init() {
  ARHTTP *self = [ARHTTP alloc];
  ARHTTP_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARHTTP)

#pragma clang diagnostic pop
