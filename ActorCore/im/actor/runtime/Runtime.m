//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/Runtime.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/DispatcherRuntime.h"
#include "im/actor/runtime/DispatcherRuntimeProvider.h"
#include "im/actor/runtime/LifecycleRuntime.h"
#include "im/actor/runtime/LifecycleRuntimeProvider.h"
#include "im/actor/runtime/LocaleRuntime.h"
#include "im/actor/runtime/LocaleRuntimeProvider.h"
#include "im/actor/runtime/MainThreadRuntimeProvider.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/ThreadingRuntime.h"
#include "im/actor/runtime/ThreadingRuntimeProvider.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/ThreadPriority.h"
#include "im/actor/runtime/actors/mailbox/ActorDispatcher.h"
#include "im/actor/runtime/threading/AbsTimerCompat.h"
#include "im/actor/runtime/threading/AtomicIntegerCompat.h"
#include "im/actor/runtime/threading/AtomicLongCompat.h"
#include "im/actor/runtime/threading/ThreadLocalCompat.h"
#include <j2objc/java/lang/Runnable.h>
#include <j2objc/java/lang/RuntimeException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static id<ARThreadingRuntime> ARRuntime_threadingRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARRuntime, threadingRuntime_, id<ARThreadingRuntime>)

static id<ARDispatcherRuntime> ARRuntime_dispatcherRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARRuntime, dispatcherRuntime_, id<ARDispatcherRuntime>)

static ARMainThreadRuntimeProvider *ARRuntime_mainThreadRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARRuntime, mainThreadRuntime_, ARMainThreadRuntimeProvider *)

static id<ARLifecycleRuntime> ARRuntime_lifecycleRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARRuntime, lifecycleRuntime_, id<ARLifecycleRuntime>)

static id<ARLocaleRuntime> ARRuntime_localeRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARRuntime, localeRuntime_, id<ARLocaleRuntime>)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/Runtime.java"

J2OBJC_INITIALIZED_DEFN(ARRuntime)


#line 11
@implementation ARRuntime


#line 19
+ (id<ARLocaleRuntime>)getLocaleRuntime {
  return ARRuntime_getLocaleRuntime();
}


#line 24
+ (ARActorDispatcher *)createDefaultDispatcherWithNSString:(NSString *)name
                                  withARThreadPriorityEnum:(ARThreadPriorityEnum *)priority
                                         withARActorSystem:(ARActorSystem *)actorSystem {
  return ARRuntime_createDefaultDispatcherWithNSString_withARThreadPriorityEnum_withARActorSystem_(name, priority, actorSystem);
}


#line 28
+ (ARActorDispatcher *)createDispatcherWithNSString:(NSString *)name
                                            withInt:(jint)threadsCount
                           withARThreadPriorityEnum:(ARThreadPriorityEnum *)priority
                                  withARActorSystem:(ARActorSystem *)actorSystem {
  return ARRuntime_createDispatcherWithNSString_withInt_withARThreadPriorityEnum_withARActorSystem_(name, threadsCount, priority, actorSystem);
}


#line 32
+ (jlong)getActorTime {
  return ARRuntime_getActorTime();
}

+ (jlong)getCurrentTime {
  return ARRuntime_getCurrentTime();
}

+ (jlong)getCurrentSyncedTime {
  return ARRuntime_getCurrentSyncedTime();
}

+ (ARAtomicIntegerCompat *)createAtomicIntWithInt:(jint)init_ {
  return ARRuntime_createAtomicIntWithInt_(init_);
}

+ (ARAtomicLongCompat *)createAtomicLongWithLong:(jlong)init_ {
  return ARRuntime_createAtomicLongWithLong_(init_);
}

+ (ARThreadLocalCompat *)createThreadLocal {
  return ARRuntime_createThreadLocal();
}

+ (ARAbsTimerCompat *)createTimerWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return ARRuntime_createTimerWithJavaLangRunnable_(runnable);
}

+ (jboolean)isSingleThread {
  return ARRuntime_isSingleThread();
}

+ (void)checkMainThread {
  ARRuntime_checkMainThread();
}


#line 73
+ (void)postToMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ARRuntime_postToMainThreadWithJavaLangRunnable_(runnable);
}

+ (void)dispatchWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ARRuntime_dispatchWithJavaLangRunnable_(runnable);
}

+ (void)killApp {
  ARRuntime_killApp();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARRuntime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ARRuntime class]) {
    ARRuntime_threadingRuntime_ = new_ARThreadingRuntimeProvider_init();
    ARRuntime_dispatcherRuntime_ = new_ARDispatcherRuntimeProvider_init();
    ARRuntime_mainThreadRuntime_ = new_ARMainThreadRuntimeProvider_init();
    ARRuntime_lifecycleRuntime_ = new_ARLifecycleRuntimeProvider_init();
    ARRuntime_localeRuntime_ = new_ARLocaleRuntimeProvider_init();
    J2OBJC_SET_INITIALIZED(ARRuntime)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLocaleRuntime", NULL, "Lim.actor.runtime.LocaleRuntime;", 0x9, NULL, NULL },
    { "createDefaultDispatcherWithNSString:withARThreadPriorityEnum:withARActorSystem:", "createDefaultDispatcher", "Lim.actor.runtime.actors.mailbox.ActorDispatcher;", 0x9, NULL, NULL },
    { "createDispatcherWithNSString:withInt:withARThreadPriorityEnum:withARActorSystem:", "createDispatcher", "Lim.actor.runtime.actors.mailbox.ActorDispatcher;", 0x9, NULL, NULL },
    { "getActorTime", NULL, "J", 0x9, NULL, NULL },
    { "getCurrentTime", NULL, "J", 0x9, NULL, NULL },
    { "getCurrentSyncedTime", NULL, "J", 0x9, NULL, NULL },
    { "createAtomicIntWithInt:", "createAtomicInt", "Lim.actor.runtime.threading.AtomicIntegerCompat;", 0x9, NULL, NULL },
    { "createAtomicLongWithLong:", "createAtomicLong", "Lim.actor.runtime.threading.AtomicLongCompat;", 0x9, NULL, NULL },
    { "createThreadLocal", NULL, "Lim.actor.runtime.threading.ThreadLocalCompat;", 0x9, NULL, "<T:Ljava/lang/Object;>()Lim/actor/runtime/threading/ThreadLocalCompat<TT;>;" },
    { "createTimerWithJavaLangRunnable:", "createTimer", "Lim.actor.runtime.threading.AbsTimerCompat;", 0x9, NULL, NULL },
    { "isSingleThread", NULL, "Z", 0x9, NULL, NULL },
    { "checkMainThread", NULL, "V", 0x9, NULL, NULL },
    { "postToMainThreadWithJavaLangRunnable:", "postToMainThread", "V", 0x9, NULL, NULL },
    { "dispatchWithJavaLangRunnable:", "dispatch", "V", 0x9, NULL, NULL },
    { "killApp", NULL, "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "threadingRuntime_", NULL, 0x1a, "Lim.actor.runtime.ThreadingRuntime;", &ARRuntime_threadingRuntime_, NULL, .constantValue.asLong = 0 },
    { "dispatcherRuntime_", NULL, 0x1a, "Lim.actor.runtime.DispatcherRuntime;", &ARRuntime_dispatcherRuntime_, NULL, .constantValue.asLong = 0 },
    { "mainThreadRuntime_", NULL, 0x1a, "Lim.actor.runtime.MainThreadRuntimeProvider;", &ARRuntime_mainThreadRuntime_, NULL, .constantValue.asLong = 0 },
    { "lifecycleRuntime_", NULL, 0x1a, "Lim.actor.runtime.LifecycleRuntime;", &ARRuntime_lifecycleRuntime_, NULL, .constantValue.asLong = 0 },
    { "localeRuntime_", NULL, 0x1a, "Lim.actor.runtime.LocaleRuntime;", &ARRuntime_localeRuntime_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARRuntime = { 2, "Runtime", "im.actor.runtime", NULL, 0x1, 16, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARRuntime;
}

@end


#line 19
id<ARLocaleRuntime> ARRuntime_getLocaleRuntime() {
  ARRuntime_initialize();
  
#line 20
  return ARRuntime_localeRuntime_;
}


#line 24
ARActorDispatcher *ARRuntime_createDefaultDispatcherWithNSString_withARThreadPriorityEnum_withARActorSystem_(NSString *name, ARThreadPriorityEnum *priority, ARActorSystem *actorSystem) {
  ARRuntime_initialize();
  
#line 25
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createDefaultDispatcherWithName:name withPriority:priority withActorSystem:actorSystem];
}


#line 28
ARActorDispatcher *ARRuntime_createDispatcherWithNSString_withInt_withARThreadPriorityEnum_withARActorSystem_(NSString *name, jint threadsCount, ARThreadPriorityEnum *priority, ARActorSystem *actorSystem) {
  ARRuntime_initialize();
  
#line 29
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createDispatcherWithName:name withThreadsCount:threadsCount withPriority:priority withActorSystem:actorSystem];
}


#line 32
jlong ARRuntime_getActorTime() {
  ARRuntime_initialize();
  
#line 33
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) getActorTime];
}


#line 36
jlong ARRuntime_getCurrentTime() {
  ARRuntime_initialize();
  
#line 37
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) getCurrentTime];
}


#line 40
jlong ARRuntime_getCurrentSyncedTime() {
  ARRuntime_initialize();
  
#line 41
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) getSyncedCurrentTime];
}


#line 44
ARAtomicIntegerCompat *ARRuntime_createAtomicIntWithInt_(jint init_) {
  ARRuntime_initialize();
  
#line 45
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createAtomicIntWithInitValue:init_];
}


#line 48
ARAtomicLongCompat *ARRuntime_createAtomicLongWithLong_(jlong init_) {
  ARRuntime_initialize();
  
#line 49
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createAtomicLongWithInitValue:init_];
}


#line 52
ARThreadLocalCompat *ARRuntime_createThreadLocal() {
  ARRuntime_initialize();
  
#line 53
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createThreadLocal];
}


#line 56
ARAbsTimerCompat *ARRuntime_createTimerWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  ARRuntime_initialize();
  
#line 57
  return [((id<ARThreadingRuntime>) nil_chk(ARRuntime_threadingRuntime_)) createTimer:runnable];
}


#line 60
jboolean ARRuntime_isSingleThread() {
  ARRuntime_initialize();
  
#line 61
  return [((ARMainThreadRuntimeProvider *) nil_chk(ARRuntime_mainThreadRuntime_)) isSingleThread];
}


#line 64
void ARRuntime_checkMainThread() {
  ARRuntime_initialize();
  
#line 65
  if ([((ARMainThreadRuntimeProvider *) nil_chk(ARRuntime_mainThreadRuntime_)) isSingleThread]) {
    return;
  }
  if (![ARRuntime_mainThreadRuntime_ isMainThread]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to perform operation not from Main Thread");
  }
}


#line 73
void ARRuntime_postToMainThreadWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  ARRuntime_initialize();
  
#line 74
  [((ARMainThreadRuntimeProvider *) nil_chk(ARRuntime_mainThreadRuntime_)) postToMainThreadWithRunnable:runnable];
}


#line 77
void ARRuntime_dispatchWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  ARRuntime_initialize();
  
#line 78
  [((id<ARDispatcherRuntime>) nil_chk(ARRuntime_dispatcherRuntime_)) dispatchWithRunnable:runnable];
}


#line 81
void ARRuntime_killApp() {
  ARRuntime_initialize();
  
#line 82
  [((id<ARLifecycleRuntime>) nil_chk(ARRuntime_lifecycleRuntime_)) killApp];
}

void ARRuntime_init(ARRuntime *self) {
  (void) NSObject_init(self);
}

ARRuntime *new_ARRuntime_init() {
  ARRuntime *self = [ARRuntime alloc];
  ARRuntime_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARRuntime)

#pragma clang diagnostic pop
