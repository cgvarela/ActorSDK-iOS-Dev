//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/Log.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/LogRuntime.h"
#include "im/actor/runtime/LogRuntimeProvider.h"
#include <j2objc/java/lang/Throwable.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static id<ARLogRuntime> ARLog_logRuntime_;
J2OBJC_STATIC_FIELD_GETTER(ARLog, logRuntime_, id<ARLogRuntime>)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/Log.java"

J2OBJC_INITIALIZED_DEFN(ARLog)

@implementation ARLog


#line 7
+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)message {
  ARLog_wWithNSString_withNSString_(tag, message);
}


#line 11
+ (void)eWithNSString:(NSString *)tag
withJavaLangThrowable:(JavaLangThrowable *)throwable {
  ARLog_eWithNSString_withJavaLangThrowable_(tag, throwable);
}


#line 15
+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)message {
  ARLog_dWithNSString_withNSString_(tag, message);
}


#line 19
+ (void)vWithNSString:(NSString *)tag
         withNSString:(NSString *)message {
  ARLog_vWithNSString_withNSString_(tag, message);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ARLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ARLog class]) {
    ARLog_logRuntime_ = new_ARLogRuntimeProvider_init();
    J2OBJC_SET_INITIALIZED(ARLog)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "wWithNSString:withNSString:", "w", "V", 0x9, NULL, NULL },
    { "eWithNSString:withJavaLangThrowable:", "e", "V", 0x9, NULL, NULL },
    { "dWithNSString:withNSString:", "d", "V", 0x9, NULL, NULL },
    { "vWithNSString:withNSString:", "v", "V", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logRuntime_", NULL, 0x1a, "Lim.actor.runtime.LogRuntime;", &ARLog_logRuntime_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARLog = { 2, "Log", "im.actor.runtime", NULL, 0x11, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARLog;
}

@end


#line 7
void ARLog_wWithNSString_withNSString_(NSString *tag, NSString *message) {
  ARLog_initialize();
  
#line 8
  [((id<ARLogRuntime>) nil_chk(ARLog_logRuntime_)) warringWithTag:tag withMessage:message];
}


#line 11
void ARLog_eWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *throwable) {
  ARLog_initialize();
  
#line 12
  [((id<ARLogRuntime>) nil_chk(ARLog_logRuntime_)) errorWithTag:tag withThrowable:throwable];
}


#line 15
void ARLog_dWithNSString_withNSString_(NSString *tag, NSString *message) {
  ARLog_initialize();
  
#line 16
  [((id<ARLogRuntime>) nil_chk(ARLog_logRuntime_)) debugWithTag:tag withMessage:message];
}


#line 19
void ARLog_vWithNSString_withNSString_(NSString *tag, NSString *message) {
  ARLog_initialize();
  
#line 20
  [((id<ARLogRuntime>) nil_chk(ARLog_logRuntime_)) verboseWithTag:tag withMessage:message];
}

void ARLog_init(ARLog *self) {
  (void) NSObject_init(self);
}

ARLog *new_ARLog_init() {
  ARLog *self = [ARLog alloc];
  ARLog_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARLog)

#pragma clang diagnostic pop
