//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeRoot.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/actors/ActorTime.h"
#include "im/actor/runtime/actors/mailbox/Envelope.h"
#include "im/actor/runtime/actors/mailbox/MailboxesQueue.h"
#include "im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.h"
#include "im/actor/runtime/actors/mailbox/collections/EnvelopeRoot.h"
#include "im/actor/runtime/actors/mailbox/collections/ScheduledEnvelope.h"
#include "im/actor/runtime/threading/ThreadLocalCompat.h"
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/util/Collection.h>
#include <j2objc/java/util/HashMap.h>
#include <j2objc/java/util/HashSet.h>
#include <j2objc/java/util/Iterator.h>
#include <j2objc/java/util/TreeMap.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define AREnvelopeRoot_MULTIPLE 10000LL

@interface AREnvelopeRoot () {
 @public
  jlong usedNowSlot_;
  JavaUtilHashSet *usedSlot_;
  JavaUtilHashMap *collections_;
  JavaUtilHashMap *lastTopKey_;
  JavaUtilTreeMap *sortedCollection_;
  ARMailboxesQueue *queue_;
}

@end

J2OBJC_FIELD_SETTER(AREnvelopeRoot, usedSlot_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(AREnvelopeRoot, collections_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AREnvelopeRoot, lastTopKey_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AREnvelopeRoot, sortedCollection_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(AREnvelopeRoot, queue_, ARMailboxesQueue *)

J2OBJC_STATIC_FIELD_GETTER(AREnvelopeRoot, MULTIPLE, jlong)

@interface AREnvelopeRoot_FetchResult () {
 @public
  AREnvelope *envelope_;
  jlong delay_;
}

- (instancetype)initWithAREnvelope:(AREnvelope *)envelope;

- (instancetype)initWithLong:(jlong)delay;

@end

J2OBJC_FIELD_SETTER(AREnvelopeRoot_FetchResult, envelope_, AREnvelope *)

static ARThreadLocalCompat *AREnvelopeRoot_FetchResult_RESULT_CACHE_;
J2OBJC_STATIC_FIELD_GETTER(AREnvelopeRoot_FetchResult, RESULT_CACHE_, ARThreadLocalCompat *)
J2OBJC_STATIC_FIELD_SETTER(AREnvelopeRoot_FetchResult, RESULT_CACHE_, ARThreadLocalCompat *)

__attribute__((unused)) static void AREnvelopeRoot_FetchResult_initWithAREnvelope_(AREnvelopeRoot_FetchResult *self, AREnvelope *envelope);

__attribute__((unused)) static AREnvelopeRoot_FetchResult *new_AREnvelopeRoot_FetchResult_initWithAREnvelope_(AREnvelope *envelope) NS_RETURNS_RETAINED;

__attribute__((unused)) static void AREnvelopeRoot_FetchResult_initWithLong_(AREnvelopeRoot_FetchResult *self, jlong delay);

__attribute__((unused)) static AREnvelopeRoot_FetchResult *new_AREnvelopeRoot_FetchResult_initWithLong_(jlong delay) NS_RETURNS_RETAINED;

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeRoot.java"


#line 17
@implementation AREnvelopeRoot


#line 30
- (instancetype)initWithARMailboxesQueue:(ARMailboxesQueue *)queue {
  AREnvelopeRoot_initWithARMailboxesQueue_(self, queue);
  return self;
}


#line 34
- (jint)getAllCount {
  @synchronized(self) {
    
#line 35
    jint res = 0;
    for (AREnvelopeCollection * __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(collections_)) values])) {
      res += [((AREnvelopeCollection *) nil_chk(e)) getSize];
    }
    return res;
  }
}


#line 42
- (void)attachCollectionWithAREnvelopeCollection:(AREnvelopeCollection *)collection {
  @synchronized(self) {
    
#line 43
    jlong key = [((AREnvelopeCollection *) nil_chk(collection)) getTopKey];
    
#line 45
    if (![((JavaUtilHashMap *) nil_chk(collections_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_([collection getId])]) {
      (void) [collections_ putWithId:JavaLangInteger_valueOfWithInt_([collection getId]) withId:collection];
      (void) [((JavaUtilHashMap *) nil_chk(lastTopKey_)) putWithId:JavaLangInteger_valueOfWithInt_([collection getId]) withId:JavaLangLong_valueOfWithLong_(key)];
      
#line 49
      if (key > 0) {
        (void) [((JavaUtilTreeMap *) nil_chk(sortedCollection_)) putWithId:JavaLangLong_valueOfWithLong_(key) withId:collection];
      }
    }
    
#line 54
    [((ARMailboxesQueue *) nil_chk(queue_)) notifyQueueChanged];
  }
}


#line 57
- (void)detachCollectionWithAREnvelopeCollection:(AREnvelopeCollection *)collection {
  @synchronized(self) {
    
#line 58
    if (![((JavaUtilHashMap *) nil_chk(collections_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_([((AREnvelopeCollection *) nil_chk(collection)) getId])]) {
      return;
    }
    
#line 62
    (void) [collections_ removeWithId:JavaLangInteger_valueOfWithInt_([collection getId])];
    
#line 64
    JavaLangLong *prevKey = [((JavaUtilHashMap *) nil_chk(lastTopKey_)) getWithId:JavaLangInteger_valueOfWithInt_([collection getId])];
    (void) [lastTopKey_ removeWithId:JavaLangInteger_valueOfWithInt_([collection getId])];
    if ([((JavaLangLong *) nil_chk(prevKey)) longLongValue] > 0) {
      (void) [((JavaUtilTreeMap *) nil_chk(sortedCollection_)) removeWithId:prevKey];
    }
  }
}


#line 71
- (AREnvelopeRoot_FetchResult *)fetchCollectionWithLong:(jlong)time {
  @synchronized(self) {
    
#line 72
    JavaLangLong *collectionKey = [((JavaUtilTreeMap *) nil_chk(sortedCollection_)) isEmpty] ? nil : [sortedCollection_ firstKey];
    
#line 75
    if (collectionKey != nil) {
      AREnvelopeCollection *collection = [sortedCollection_ getWithId:collectionKey];
      AREnvelopeCollection_FetchResult *envelope = [((AREnvelopeCollection *) nil_chk(collection)) fetchEnvelopeWithLong:time];
      if (envelope != nil) {
        if ([envelope getEnvelope] != nil) {
          [self detachCollectionWithAREnvelopeCollection:collection];
          AREnvelopeRoot_FetchResult *result = AREnvelopeRoot_FetchResult_envelopeWithAREnvelope_([((ARScheduledEnvelope *) nil_chk([envelope getEnvelope])) getEnvelope]);
          [envelope recycle];
          return result;
        }
        else {
          
#line 85
          AREnvelopeRoot_FetchResult *result = AREnvelopeRoot_FetchResult_delayWithLong_([envelope getDelay]);
          [envelope recycle];
          return result;
        }
      }
      else {
        
#line 90
        return nil;
      }
    }
    else {
      
#line 93
      return nil;
    }
  }
}


#line 97
- (void)changedTopKeyWithAREnvelopeCollection:(AREnvelopeCollection *)collection {
  @synchronized(self) {
    
#line 98
    if (![((JavaUtilHashMap *) nil_chk(collections_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_([((AREnvelopeCollection *) nil_chk(collection)) getId])]) {
      return;
    }
    
#line 102
    jlong key = [collection getTopKey];
    
#line 104
    JavaLangLong *prevKey = [((JavaUtilHashMap *) nil_chk(lastTopKey_)) getWithId:JavaLangInteger_valueOfWithInt_([collection getId])];
    (void) [lastTopKey_ removeWithId:JavaLangInteger_valueOfWithInt_([collection getId])];
    if ([((JavaLangLong *) nil_chk(prevKey)) longLongValue] > 0) {
      (void) [((JavaUtilTreeMap *) nil_chk(sortedCollection_)) removeWithId:prevKey];
    }
    
#line 110
    (void) [lastTopKey_ putWithId:JavaLangInteger_valueOfWithInt_([collection getId]) withId:JavaLangLong_valueOfWithLong_(key)];
    if (key > 0) {
      (void) [((JavaUtilTreeMap *) nil_chk(sortedCollection_)) putWithId:JavaLangLong_valueOfWithLong_(key) withId:collection];
    }
    
#line 115
    [((ARMailboxesQueue *) nil_chk(queue_)) notifyQueueChanged];
  }
}


#line 118
- (jlong)buildKeyWithLong:(jlong)time {
  @synchronized(self) {
    
#line 119
    if (time <= 0 || time < usedNowSlot_) {
      time = usedNowSlot_++;
      return time;
    }
    
#line 124
    jlong currentTime = ARActorTime_currentTime();
    if (time < currentTime) {
      time = currentTime;
    }
    
#line 130
    id<JavaUtilIterator> iterator = [((JavaUtilHashSet *) nil_chk(usedSlot_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      jlong t = [((JavaLangLong *) nil_chk([iterator next])) longLongValue];
      if (t < currentTime * AREnvelopeRoot_MULTIPLE) {
        [iterator remove];
      }
    }
    
#line 138
    jlong shift = 0;
    while ([usedSlot_ containsWithId:JavaLangLong_valueOfWithLong_(time * AREnvelopeRoot_MULTIPLE + shift)]) {
      shift++;
    }
    
#line 143
    [usedSlot_ addWithId:JavaLangLong_valueOfWithLong_(time * AREnvelopeRoot_MULTIPLE + shift)];
    return time * AREnvelopeRoot_MULTIPLE + shift;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARMailboxesQueue:", "EnvelopeRoot", NULL, 0x1, NULL, NULL },
    { "getAllCount", NULL, "I", 0x21, NULL, NULL },
    { "attachCollectionWithAREnvelopeCollection:", "attachCollection", "V", 0x21, NULL, NULL },
    { "detachCollectionWithAREnvelopeCollection:", "detachCollection", "V", 0x21, NULL, NULL },
    { "fetchCollectionWithLong:", "fetchCollection", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeRoot$FetchResult;", 0x21, NULL, NULL },
    { "changedTopKeyWithAREnvelopeCollection:", "changedTopKey", "V", 0x20, NULL, NULL },
    { "buildKeyWithLong:", "buildKey", "J", 0x20, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MULTIPLE", "MULTIPLE", 0x1a, "J", NULL, NULL, .constantValue.asLong = AREnvelopeRoot_MULTIPLE },
    { "usedNowSlot_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "usedSlot_", NULL, 0x12, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Ljava/lang/Long;>;", .constantValue.asLong = 0 },
    { "collections_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lim/actor/runtime/actors/mailbox/collections/EnvelopeCollection;>;", .constantValue.asLong = 0 },
    { "lastTopKey_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/Long;>;", .constantValue.asLong = 0 },
    { "sortedCollection_", NULL, 0x12, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Long;Lim/actor/runtime/actors/mailbox/collections/EnvelopeCollection;>;", .constantValue.asLong = 0 },
    { "queue_", NULL, 0x2, "Lim.actor.runtime.actors.mailbox.MailboxesQueue;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.actors.mailbox.collections.EnvelopeRoot$FetchResult;"};
  static const J2ObjcClassInfo _AREnvelopeRoot = { 2, "EnvelopeRoot", "im.actor.runtime.actors.mailbox.collections", NULL, 0x1, 7, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_AREnvelopeRoot;
}

@end


#line 30
void AREnvelopeRoot_initWithARMailboxesQueue_(AREnvelopeRoot *self, ARMailboxesQueue *queue) {
  (void) NSObject_init(self);
  self->usedNowSlot_ = ARActorTime_currentTime();
  self->usedSlot_ = new_JavaUtilHashSet_init();
  self->collections_ = new_JavaUtilHashMap_init();
  self->lastTopKey_ = new_JavaUtilHashMap_init();
  self->sortedCollection_ = new_JavaUtilTreeMap_init();
  
#line 31
  self->queue_ = queue;
}


#line 30
AREnvelopeRoot *new_AREnvelopeRoot_initWithARMailboxesQueue_(ARMailboxesQueue *queue) {
  AREnvelopeRoot *self = [AREnvelopeRoot alloc];
  AREnvelopeRoot_initWithARMailboxesQueue_(self, queue);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AREnvelopeRoot)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeRoot.java"

J2OBJC_INITIALIZED_DEFN(AREnvelopeRoot_FetchResult)


#line 147
@implementation AREnvelopeRoot_FetchResult


#line 151
+ (AREnvelopeRoot_FetchResult *)envelopeWithAREnvelope:(AREnvelope *)envelope {
  return AREnvelopeRoot_FetchResult_envelopeWithAREnvelope_(envelope);
}


#line 163
+ (AREnvelopeRoot_FetchResult *)delayWithLong:(jlong)delay {
  return AREnvelopeRoot_FetchResult_delayWithLong_(delay);
}


#line 178
- (instancetype)initWithAREnvelope:(AREnvelope *)envelope {
  AREnvelopeRoot_FetchResult_initWithAREnvelope_(self, envelope);
  return self;
}


#line 182
- (instancetype)initWithLong:(jlong)delay {
  AREnvelopeRoot_FetchResult_initWithLong_(self, delay);
  return self;
}


#line 186
- (AREnvelope *)getEnvelope {
  return envelope_;
}

- (jlong)getDelay {
  return delay_;
}

- (void)updateWithAREnvelope:(AREnvelope *)envelope
                    withLong:(jlong)delay {
  self->envelope_ = envelope;
  self->delay_ = delay;
}


#line 199
- (void)recycle {
  [((ARThreadLocalCompat *) nil_chk(AREnvelopeRoot_FetchResult_RESULT_CACHE_)) setWithId:self];
}

+ (void)initialize {
  if (self == [AREnvelopeRoot_FetchResult class]) {
    AREnvelopeRoot_FetchResult_RESULT_CACHE_ = ARRuntime_createThreadLocal();
    J2OBJC_SET_INITIALIZED(AREnvelopeRoot_FetchResult)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "envelopeWithAREnvelope:", "envelope", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeRoot$FetchResult;", 0x9, NULL, NULL },
    { "delayWithLong:", "delay", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeRoot$FetchResult;", 0x9, NULL, NULL },
    { "initWithAREnvelope:", "FetchResult", NULL, 0x2, NULL, NULL },
    { "initWithLong:", "FetchResult", NULL, 0x2, NULL, NULL },
    { "getEnvelope", NULL, "Lim.actor.runtime.actors.mailbox.Envelope;", 0x1, NULL, NULL },
    { "getDelay", NULL, "J", 0x1, NULL, NULL },
    { "updateWithAREnvelope:withLong:", "update", "V", 0x1, NULL, NULL },
    { "recycle", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RESULT_CACHE_", NULL, 0xa, "Lim.actor.runtime.threading.ThreadLocalCompat;", &AREnvelopeRoot_FetchResult_RESULT_CACHE_, "Lim/actor/runtime/threading/ThreadLocalCompat<Lim/actor/runtime/actors/mailbox/collections/EnvelopeRoot$FetchResult;>;", .constantValue.asLong = 0 },
    { "envelope_", NULL, 0x2, "Lim.actor.runtime.actors.mailbox.Envelope;", NULL, NULL, .constantValue.asLong = 0 },
    { "delay_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AREnvelopeRoot_FetchResult = { 2, "FetchResult", "im.actor.runtime.actors.mailbox.collections", "EnvelopeRoot", 0x9, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AREnvelopeRoot_FetchResult;
}

@end


#line 151
AREnvelopeRoot_FetchResult *AREnvelopeRoot_FetchResult_envelopeWithAREnvelope_(AREnvelope *envelope) {
  AREnvelopeRoot_FetchResult_initialize();
  
#line 152
  AREnvelopeRoot_FetchResult *res = [((ARThreadLocalCompat *) nil_chk(AREnvelopeRoot_FetchResult_RESULT_CACHE_)) get];
  if (res != nil) {
    [AREnvelopeRoot_FetchResult_RESULT_CACHE_ remove];
    [res updateWithAREnvelope:envelope withLong:0];
  }
  else {
    
#line 157
    res = new_AREnvelopeRoot_FetchResult_initWithAREnvelope_(envelope);
  }
  
#line 160
  return res;
}


#line 163
AREnvelopeRoot_FetchResult *AREnvelopeRoot_FetchResult_delayWithLong_(jlong delay) {
  AREnvelopeRoot_FetchResult_initialize();
  
#line 164
  AREnvelopeRoot_FetchResult *res = [((ARThreadLocalCompat *) nil_chk(AREnvelopeRoot_FetchResult_RESULT_CACHE_)) get];
  if (res != nil) {
    [AREnvelopeRoot_FetchResult_RESULT_CACHE_ remove];
    [res updateWithAREnvelope:nil withLong:delay];
  }
  else {
    
#line 169
    res = new_AREnvelopeRoot_FetchResult_initWithLong_(delay);
  }
  
#line 172
  return res;
}


#line 178
void AREnvelopeRoot_FetchResult_initWithAREnvelope_(AREnvelopeRoot_FetchResult *self, AREnvelope *envelope) {
  (void) NSObject_init(self);
  
#line 179
  self->envelope_ = envelope;
}


#line 178
AREnvelopeRoot_FetchResult *new_AREnvelopeRoot_FetchResult_initWithAREnvelope_(AREnvelope *envelope) {
  AREnvelopeRoot_FetchResult *self = [AREnvelopeRoot_FetchResult alloc];
  AREnvelopeRoot_FetchResult_initWithAREnvelope_(self, envelope);
  return self;
}


#line 182
void AREnvelopeRoot_FetchResult_initWithLong_(AREnvelopeRoot_FetchResult *self, jlong delay) {
  (void) NSObject_init(self);
  
#line 183
  self->delay_ = delay;
}


#line 182
AREnvelopeRoot_FetchResult *new_AREnvelopeRoot_FetchResult_initWithLong_(jlong delay) {
  AREnvelopeRoot_FetchResult *self = [AREnvelopeRoot_FetchResult alloc];
  AREnvelopeRoot_FetchResult_initWithLong_(self, delay);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AREnvelopeRoot_FetchResult)

#pragma clang diagnostic pop
