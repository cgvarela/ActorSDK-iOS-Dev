//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/actors/mailbox/Envelope.h"
#include "im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.h"
#include "im/actor/runtime/actors/mailbox/collections/EnvelopeRoot.h"
#include "im/actor/runtime/actors/mailbox/collections/ScheduledEnvelope.h"
#include "im/actor/runtime/threading/AtomicIntegerCompat.h"
#include "im/actor/runtime/threading/ThreadLocalCompat.h"
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/util/Collection.h>
#include <j2objc/java/util/Iterator.h>
#include <j2objc/java/util/Map.h>
#include <j2objc/java/util/Set.h>
#include <j2objc/java/util/TreeMap.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface AREnvelopeCollection () {
 @public
  JavaUtilTreeMap *envelopes_;
  AREnvelopeRoot *root_;
  jint id__;
  jlong topKey_;
}

@end

J2OBJC_FIELD_SETTER(AREnvelopeCollection, envelopes_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(AREnvelopeCollection, root_, AREnvelopeRoot *)

static ARAtomicIntegerCompat *AREnvelopeCollection_NEXT_ID_;
J2OBJC_STATIC_FIELD_GETTER(AREnvelopeCollection, NEXT_ID_, ARAtomicIntegerCompat *)

@interface AREnvelopeCollection_EnvelopeComparator : NSObject

@end

@interface AREnvelopeCollection_FetchResult () {
 @public
  ARScheduledEnvelope *envelope_;
  jlong delay_;
}

- (instancetype)initWithARScheduledEnvelope:(ARScheduledEnvelope *)envelope;

- (instancetype)initWithLong:(jlong)delay;

@end

J2OBJC_FIELD_SETTER(AREnvelopeCollection_FetchResult, envelope_, ARScheduledEnvelope *)

static ARThreadLocalCompat *AREnvelopeCollection_FetchResult_RESULT_CACHE_;
J2OBJC_STATIC_FIELD_GETTER(AREnvelopeCollection_FetchResult, RESULT_CACHE_, ARThreadLocalCompat *)
J2OBJC_STATIC_FIELD_SETTER(AREnvelopeCollection_FetchResult, RESULT_CACHE_, ARThreadLocalCompat *)

__attribute__((unused)) static void AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(AREnvelopeCollection_FetchResult *self, ARScheduledEnvelope *envelope);

__attribute__((unused)) static AREnvelopeCollection_FetchResult *new_AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(ARScheduledEnvelope *envelope) NS_RETURNS_RETAINED;

__attribute__((unused)) static void AREnvelopeCollection_FetchResult_initWithLong_(AREnvelopeCollection_FetchResult *self, jlong delay);

__attribute__((unused)) static AREnvelopeCollection_FetchResult *new_AREnvelopeCollection_FetchResult_initWithLong_(jlong delay) NS_RETURNS_RETAINED;

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.java"

J2OBJC_INITIALIZED_DEFN(AREnvelopeCollection)


#line 15
@implementation AREnvelopeCollection


#line 27
- (instancetype)initWithAREnvelopeRoot:(AREnvelopeRoot *)root {
  AREnvelopeCollection_initWithAREnvelopeRoot_(self, root);
  return self;
}


#line 34
- (jint)getId {
  return id__;
}

- (jlong)getTopKey {
  return topKey_;
}

- (jlong)putEnvelopeWithAREnvelope:(AREnvelope *)envelope
                          withLong:(jlong)time {
  
#line 44
  jlong key = [((AREnvelopeRoot *) nil_chk(root_)) buildKeyWithLong:time];
  
#line 46
  jlong oldKey;
  @synchronized(envelopes_) {
    oldKey = topKey_;
    (void) [((JavaUtilTreeMap *) nil_chk(envelopes_)) putWithId:JavaLangLong_valueOfWithLong_(key) withId:new_ARScheduledEnvelope_initWithLong_withLong_withAREnvelope_(key, time, envelope)];
    
#line 51
    if (key < topKey_ || topKey_ == 0) {
      topKey_ = key;
    }
  }
  
#line 56
  if (oldKey != topKey_) {
    [root_ changedTopKeyWithAREnvelopeCollection:self];
  }
  
#line 60
  return key;
}


#line 63
- (void)removeEnvelopeWithAREnvelope:(AREnvelope *)envelope
withAREnvelopeCollection_EnvelopeComparator:(id<AREnvelopeCollection_EnvelopeComparator>)comparator {
  
#line 65
  jlong oldKey;
  
#line 67
  @synchronized(envelopes_) {
    oldKey = topKey_;
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(envelopes_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      if ([((id<AREnvelopeCollection_EnvelopeComparator>) nil_chk(comparator)) equalsWithAREnvelope:[((ARScheduledEnvelope *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([iterator next])) getValue])) getEnvelope] withAREnvelope:envelope]) {
        [iterator remove];
      }
    }
    
#line 76
    if ([envelopes_ isEmpty]) {
      topKey_ = 0;
    }
    else {
      
#line 79
      topKey_ = [((JavaLangLong *) nil_chk([envelopes_ firstKey])) longLongValue];
    }
  }
  
#line 83
  if (oldKey != topKey_) {
    [((AREnvelopeRoot *) nil_chk(root_)) changedTopKeyWithAREnvelopeCollection:self];
  }
}


#line 88
- (jlong)putEnvelopeOnceWithAREnvelope:(AREnvelope *)envelope
                              withLong:(jlong)time
withAREnvelopeCollection_EnvelopeComparator:(id<AREnvelopeCollection_EnvelopeComparator>)comparator {
  
#line 90
  jlong key = [((AREnvelopeRoot *) nil_chk(root_)) buildKeyWithLong:time];
  
#line 92
  jlong oldKey;
  @synchronized(envelopes_) {
    oldKey = topKey_;
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(envelopes_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      if ([((id<AREnvelopeCollection_EnvelopeComparator>) nil_chk(comparator)) equalsWithAREnvelope:[((ARScheduledEnvelope *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([iterator next])) getValue])) getEnvelope] withAREnvelope:envelope]) {
        [iterator remove];
      }
    }
    
#line 102
    (void) [envelopes_ putWithId:JavaLangLong_valueOfWithLong_(key) withId:new_ARScheduledEnvelope_initWithLong_withLong_withAREnvelope_(key, time, envelope)];
    topKey_ = [((JavaLangLong *) nil_chk([envelopes_ firstKey])) longLongValue];
  }
  
#line 106
  if (oldKey != topKey_) {
    [root_ changedTopKeyWithAREnvelopeCollection:self];
  }
  
#line 110
  return key;
}


#line 113
- (AREnvelopeCollection_FetchResult *)fetchEnvelopeWithLong:(jlong)time {
  
#line 115
  AREnvelopeCollection_FetchResult *result;
  
#line 117
  jlong oldKey;
  @synchronized(envelopes_) {
    oldKey = topKey_;
    if ([((JavaUtilTreeMap *) nil_chk(envelopes_)) isEmpty]) {
      return nil;
    }
    
#line 124
    ARScheduledEnvelope *envelope = [((id<JavaUtilMap_Entry>) nil_chk([envelopes_ firstEntry])) getValue];
    if ([((ARScheduledEnvelope *) nil_chk(envelope)) getTime] <= time) {
      (void) [envelopes_ removeWithId:JavaLangLong_valueOfWithLong_([envelope getKey])];
      
#line 128
      if ([envelopes_ isEmpty]) {
        topKey_ = 0;
      }
      else {
        
#line 131
        topKey_ = [((JavaLangLong *) nil_chk([envelopes_ firstKey])) longLongValue];
      }
      result = AREnvelopeCollection_FetchResult_envelopeWithARScheduledEnvelope_(envelope);
    }
    else {
      
#line 135
      result = AREnvelopeCollection_FetchResult_delayWithLong_([envelope getTime] - time);
    }
  }
  
#line 139
  if (oldKey != topKey_) {
    [((AREnvelopeRoot *) nil_chk(root_)) changedTopKeyWithAREnvelopeCollection:self];
  }
  
#line 143
  return result;
}


#line 146
- (void)clear {
  @synchronized(envelopes_) {
    [((JavaUtilTreeMap *) nil_chk(envelopes_)) clear];
    topKey_ = 0;
  }
  [((AREnvelopeRoot *) nil_chk(root_)) changedTopKeyWithAREnvelopeCollection:self];
}

- (jint)getSize {
  @synchronized(envelopes_) {
    return [((JavaUtilTreeMap *) nil_chk(envelopes_)) size];
  }
}

- (IOSObjectArray *)allEnvelopes {
  @synchronized(envelopes_) {
    IOSObjectArray *scheduledEnvelopes = [((id<JavaUtilCollection>) nil_chk([((JavaUtilTreeMap *) nil_chk(envelopes_)) values])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[envelopes_ size] type:ARScheduledEnvelope_class_()]];
    IOSObjectArray *res = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(scheduledEnvelopes))->size_ type:AREnvelope_class_()];
    for (jint i = 0; i < res->size_; i++) {
      (void) IOSObjectArray_Set(res, i, [((ARScheduledEnvelope *) nil_chk(IOSObjectArray_Get(scheduledEnvelopes, i))) getEnvelope]);
    }
    return res;
  }
}

+ (void)initialize {
  if (self == [AREnvelopeCollection class]) {
    AREnvelopeCollection_NEXT_ID_ = ARRuntime_createAtomicIntWithInt_(
#line 17
    1);
    J2OBJC_SET_INITIALIZED(AREnvelopeCollection)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithAREnvelopeRoot:", "EnvelopeCollection", NULL, 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "getTopKey", NULL, "J", 0x1, NULL, NULL },
    { "putEnvelopeWithAREnvelope:withLong:", "putEnvelope", "J", 0x1, NULL, NULL },
    { "removeEnvelopeWithAREnvelope:withAREnvelopeCollection_EnvelopeComparator:", "removeEnvelope", "V", 0x1, NULL, NULL },
    { "putEnvelopeOnceWithAREnvelope:withLong:withAREnvelopeCollection_EnvelopeComparator:", "putEnvelopeOnce", "J", 0x1, NULL, NULL },
    { "fetchEnvelopeWithLong:", "fetchEnvelope", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeCollection$FetchResult;", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "getSize", NULL, "I", 0x1, NULL, NULL },
    { "allEnvelopes", NULL, "[Lim.actor.runtime.actors.mailbox.Envelope;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NEXT_ID_", NULL, 0x1a, "Lim.actor.runtime.threading.AtomicIntegerCompat;", &AREnvelopeCollection_NEXT_ID_, NULL, .constantValue.asLong = 0 },
    { "envelopes_", NULL, 0x12, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Long;Lim/actor/runtime/actors/mailbox/collections/ScheduledEnvelope;>;", .constantValue.asLong = 0 },
    { "root_", NULL, 0x2, "Lim.actor.runtime.actors.mailbox.collections.EnvelopeRoot;", NULL, NULL, .constantValue.asLong = 0 },
    { "id__", "id", 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "topKey_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.runtime.actors.mailbox.collections.EnvelopeCollection$EnvelopeComparator;", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeCollection$FetchResult;"};
  static const J2ObjcClassInfo _AREnvelopeCollection = { 2, "EnvelopeCollection", "im.actor.runtime.actors.mailbox.collections", NULL, 0x1, 10, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_AREnvelopeCollection;
}

@end


#line 27
void AREnvelopeCollection_initWithAREnvelopeRoot_(AREnvelopeCollection *self, AREnvelopeRoot *root) {
  (void) NSObject_init(self);
  self->envelopes_ = new_JavaUtilTreeMap_init();
  
#line 28
  self->id__ = [((ARAtomicIntegerCompat *) nil_chk(AREnvelopeCollection_NEXT_ID_)) getAndIncrement];
  self->root_ = root;
  self->topKey_ = 0LL;
  [((AREnvelopeRoot *) nil_chk(self->root_)) attachCollectionWithAREnvelopeCollection:self];
}


#line 27
AREnvelopeCollection *new_AREnvelopeCollection_initWithAREnvelopeRoot_(AREnvelopeRoot *root) {
  AREnvelopeCollection *self = [AREnvelopeCollection alloc];
  AREnvelopeCollection_initWithAREnvelopeRoot_(self, root);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AREnvelopeCollection)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.java"


#line 171
@implementation AREnvelopeCollection_EnvelopeComparator

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "equalsWithAREnvelope:withAREnvelope:", "equals", "Z", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _AREnvelopeCollection_EnvelopeComparator = { 2, "EnvelopeComparator", "im.actor.runtime.actors.mailbox.collections", "EnvelopeCollection", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_AREnvelopeCollection_EnvelopeComparator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AREnvelopeCollection_EnvelopeComparator)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/collections/EnvelopeCollection.java"

J2OBJC_INITIALIZED_DEFN(AREnvelopeCollection_FetchResult)


#line 175
@implementation AREnvelopeCollection_FetchResult


#line 179
+ (AREnvelopeCollection_FetchResult *)envelopeWithARScheduledEnvelope:(ARScheduledEnvelope *)envelope {
  return AREnvelopeCollection_FetchResult_envelopeWithARScheduledEnvelope_(envelope);
}


#line 191
+ (AREnvelopeCollection_FetchResult *)delayWithLong:(jlong)delay {
  return AREnvelopeCollection_FetchResult_delayWithLong_(delay);
}


#line 206
- (instancetype)initWithARScheduledEnvelope:(ARScheduledEnvelope *)envelope {
  AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(self, envelope);
  return self;
}


#line 210
- (instancetype)initWithLong:(jlong)delay {
  AREnvelopeCollection_FetchResult_initWithLong_(self, delay);
  return self;
}


#line 214
- (ARScheduledEnvelope *)getEnvelope {
  return envelope_;
}

- (jlong)getDelay {
  return delay_;
}

- (void)updateWithARScheduledEnvelope:(ARScheduledEnvelope *)envelope
                             withLong:(jlong)delay {
  self->envelope_ = envelope;
  self->delay_ = delay;
}


#line 227
- (void)recycle {
  [((ARThreadLocalCompat *) nil_chk(AREnvelopeCollection_FetchResult_RESULT_CACHE_)) setWithId:self];
}

+ (void)initialize {
  if (self == [AREnvelopeCollection_FetchResult class]) {
    AREnvelopeCollection_FetchResult_RESULT_CACHE_ = ARRuntime_createThreadLocal();
    J2OBJC_SET_INITIALIZED(AREnvelopeCollection_FetchResult)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "envelopeWithARScheduledEnvelope:", "envelope", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeCollection$FetchResult;", 0x9, NULL, NULL },
    { "delayWithLong:", "delay", "Lim.actor.runtime.actors.mailbox.collections.EnvelopeCollection$FetchResult;", 0x9, NULL, NULL },
    { "initWithARScheduledEnvelope:", "FetchResult", NULL, 0x2, NULL, NULL },
    { "initWithLong:", "FetchResult", NULL, 0x2, NULL, NULL },
    { "getEnvelope", NULL, "Lim.actor.runtime.actors.mailbox.collections.ScheduledEnvelope;", 0x1, NULL, NULL },
    { "getDelay", NULL, "J", 0x1, NULL, NULL },
    { "updateWithARScheduledEnvelope:withLong:", "update", "V", 0x1, NULL, NULL },
    { "recycle", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RESULT_CACHE_", NULL, 0xa, "Lim.actor.runtime.threading.ThreadLocalCompat;", &AREnvelopeCollection_FetchResult_RESULT_CACHE_, "Lim/actor/runtime/threading/ThreadLocalCompat<Lim/actor/runtime/actors/mailbox/collections/EnvelopeCollection$FetchResult;>;", .constantValue.asLong = 0 },
    { "envelope_", NULL, 0x2, "Lim.actor.runtime.actors.mailbox.collections.ScheduledEnvelope;", NULL, NULL, .constantValue.asLong = 0 },
    { "delay_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _AREnvelopeCollection_FetchResult = { 2, "FetchResult", "im.actor.runtime.actors.mailbox.collections", "EnvelopeCollection", 0x9, 8, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_AREnvelopeCollection_FetchResult;
}

@end


#line 179
AREnvelopeCollection_FetchResult *AREnvelopeCollection_FetchResult_envelopeWithARScheduledEnvelope_(ARScheduledEnvelope *envelope) {
  AREnvelopeCollection_FetchResult_initialize();
  
#line 180
  AREnvelopeCollection_FetchResult *res = [((ARThreadLocalCompat *) nil_chk(AREnvelopeCollection_FetchResult_RESULT_CACHE_)) get];
  if (res != nil) {
    [AREnvelopeCollection_FetchResult_RESULT_CACHE_ remove];
    [res updateWithARScheduledEnvelope:envelope withLong:0];
  }
  else {
    
#line 185
    res = new_AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(envelope);
  }
  
#line 188
  return res;
}


#line 191
AREnvelopeCollection_FetchResult *AREnvelopeCollection_FetchResult_delayWithLong_(jlong delay) {
  AREnvelopeCollection_FetchResult_initialize();
  
#line 192
  AREnvelopeCollection_FetchResult *res = [((ARThreadLocalCompat *) nil_chk(AREnvelopeCollection_FetchResult_RESULT_CACHE_)) get];
  if (res != nil) {
    [AREnvelopeCollection_FetchResult_RESULT_CACHE_ remove];
    [res updateWithARScheduledEnvelope:nil withLong:delay];
  }
  else {
    
#line 197
    res = new_AREnvelopeCollection_FetchResult_initWithLong_(delay);
  }
  
#line 200
  return res;
}


#line 206
void AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(AREnvelopeCollection_FetchResult *self, ARScheduledEnvelope *envelope) {
  (void) NSObject_init(self);
  
#line 207
  self->envelope_ = envelope;
}


#line 206
AREnvelopeCollection_FetchResult *new_AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(ARScheduledEnvelope *envelope) {
  AREnvelopeCollection_FetchResult *self = [AREnvelopeCollection_FetchResult alloc];
  AREnvelopeCollection_FetchResult_initWithARScheduledEnvelope_(self, envelope);
  return self;
}


#line 210
void AREnvelopeCollection_FetchResult_initWithLong_(AREnvelopeCollection_FetchResult *self, jlong delay) {
  (void) NSObject_init(self);
  
#line 211
  self->delay_ = delay;
}


#line 210
AREnvelopeCollection_FetchResult *new_AREnvelopeCollection_FetchResult_initWithLong_(jlong delay) {
  AREnvelopeCollection_FetchResult *self = [AREnvelopeCollection_FetchResult alloc];
  AREnvelopeCollection_FetchResult_initWithLong_(self, delay);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AREnvelopeCollection_FetchResult)

#pragma clang diagnostic pop
