//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/ActorDispatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorContext.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorScope.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/ActorTime.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/actors/TraceInterface.h"
#include "im/actor/runtime/actors/dispatch/AbstractDispatcher.h"
#include "im/actor/runtime/actors/mailbox/ActorDispatcher.h"
#include "im/actor/runtime/actors/mailbox/ActorEndpoint.h"
#include "im/actor/runtime/actors/mailbox/Envelope.h"
#include "im/actor/runtime/actors/mailbox/Mailbox.h"
#include "im/actor/runtime/actors/mailbox/MailboxesQueue.h"
#include "im/actor/runtime/actors/messages/DeadLetter.h"
#include "im/actor/runtime/actors/messages/PoisonPill.h"
#include "im/actor/runtime/actors/messages/StartActor.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARActorDispatcher () {
 @public
  id LOCK_;
  JavaUtilHashMap *endpoints_;
  JavaUtilHashMap *scopes_;
  ARActorSystem *actorSystem_;
  NSString *name_;
  ImActorRuntimeActorsDispatchAbstractDispatcher *dispatcher_;
}

- (jboolean)isDisconnectedWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                       withId:(id)message
                               withARActorRef:(ARActorRef *)sender;

@end

J2OBJC_FIELD_SETTER(ARActorDispatcher, LOCK_, id)
J2OBJC_FIELD_SETTER(ARActorDispatcher, endpoints_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ARActorDispatcher, scopes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ARActorDispatcher, actorSystem_, ARActorSystem *)
J2OBJC_FIELD_SETTER(ARActorDispatcher, name_, NSString *)
J2OBJC_FIELD_SETTER(ARActorDispatcher, dispatcher_, ImActorRuntimeActorsDispatchAbstractDispatcher *)

__attribute__((unused)) static jboolean ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(ARActorDispatcher *self, ARActorEndpoint *endpoint, id message, ARActorRef *sender);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/mailbox/ActorDispatcher.java"


#line 24
@implementation ARActorDispatcher


#line 34
- (instancetype)initWithNSString:(NSString *)name
               withARActorSystem:(ARActorSystem *)actorSystem {
  ARActorDispatcher_initWithNSString_withARActorSystem_(self, name, actorSystem);
  return self;
}


#line 44
- (void)initDispatcherWithImActorRuntimeActorsDispatchAbstractDispatcher:(ImActorRuntimeActorsDispatchAbstractDispatcher *)dispatcher {
  if (self->dispatcher_ != nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Double dispatcher init");
  }
  self->dispatcher_ = dispatcher;
}

- (ARActorRef *)referenceActorWithNSString:(NSString *)path
                               withARProps:(ARProps *)props {
  @synchronized(LOCK_) {
    if ([((JavaUtilHashMap *) nil_chk(scopes_)) containsKeyWithId:path]) {
      return [((ARActorScope *) nil_chk([scopes_ getWithId:path])) getActorRef];
    }
    
#line 57
    ARMailbox *mailbox = [((ARProps *) nil_chk(props)) createMailboxWithARMailboxesQueue:[((ImActorRuntimeActorsDispatchAbstractDispatcher *) nil_chk(dispatcher_)) getQueue]];
    
#line 59
    ARActorEndpoint *endpoint = [((JavaUtilHashMap *) nil_chk(endpoints_)) getWithId:path];
    if (endpoint == nil) {
      endpoint = new_ARActorEndpoint_initWithNSString_(path);
      (void) [endpoints_ putWithId:path withId:endpoint];
    }
    
#line 65
    ARActorScope *scope = new_ARActorScope_initWithARActorSystem_withARMailbox_withARActorDispatcher_withNSString_withARProps_withARActorEndpoint_(actorSystem_, mailbox, self, path, props, endpoint);
    [((ARActorEndpoint *) nil_chk(endpoint)) connectWithARMailbox:mailbox withARActorScope:scope];
    (void) [scopes_ putWithId:[scope getPath] withId:scope];
    
#line 70
    [((ARActorRef *) nil_chk([scope getActorRef])) sendWithId:JreLoadStatic(ARStartActor, INSTANCE_)];
    return [scope getActorRef];
  }
}


#line 75
- (void)killGracefullyWithARActorScope:(ARActorScope *)scope {
  [((ARActor *) nil_chk([((ARActorScope *) nil_chk(scope)) getActor])) postStop];
  [scope onActorDie];
  {
    IOSObjectArray *a__ = [((ARMailbox *) nil_chk([scope getMailbox])) allEnvelopes];
    AREnvelope * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AREnvelope * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AREnvelope *e = *b__++;
      
#line 80
      if ([((AREnvelope *) nil_chk(e)) getSender] != nil) {
        [((ARActorRef *) nil_chk([e getSender])) sendWithId:new_ARDeadLetter_initWithId_([e getMessage])];
      }
    }
  }
  
#line 84
  [((ARMailbox *) nil_chk([scope getMailbox])) clear];
  @synchronized(LOCK_) {
    (void) [((JavaUtilHashMap *) nil_chk(scopes_)) removeWithId:[scope getPath]];
    (void) [((JavaUtilHashMap *) nil_chk(endpoints_)) removeWithId:[scope getPath]];
    [((ARMailboxesQueue *) nil_chk([((ImActorRuntimeActorsDispatchAbstractDispatcher *) nil_chk(dispatcher_)) getQueue])) disconnectMailboxWithARMailbox:[scope getMailbox]];
  }
}


#line 92
- (jboolean)isDisconnectedWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                       withId:(id)message
                               withARActorRef:(ARActorRef *)sender {
  return ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(self, endpoint, message, sender);
}


#line 105
- (void)sendMessageAtTimeWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                      withId:(id)message
                                    withLong:(jlong)time
                              withARActorRef:(ARActorRef *)sender {
  if (!ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(self, endpoint, message, sender)) {
    [((ARMailbox *) nil_chk([((ARActorEndpoint *) nil_chk(endpoint)) getMailbox])) scheduleWithAREnvelope:new_AREnvelope_initWithId_withARActorScope_withARMailbox_withARActorRef_(message, [endpoint getScope], [endpoint getMailbox], sender) withLong:time];
  }
}


#line 111
- (void)sendMessageNowWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                   withId:(id)message
                           withARActorRef:(ARActorRef *)sender {
  if (!ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(self, endpoint, message, sender)) {
    [((ARMailbox *) nil_chk([((ARActorEndpoint *) nil_chk(endpoint)) getMailbox])) scheduleWithAREnvelope:new_AREnvelope_initWithId_withARActorScope_withARMailbox_withARActorRef_(message, [endpoint getScope], [endpoint getMailbox], sender) withLong:0];
  }
}


#line 117
- (void)sendMessageOnceAtTimeWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                          withId:(id)message
                                        withLong:(jlong)time
                                  withARActorRef:(ARActorRef *)sender {
  if (!ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(self, endpoint, message, sender)) {
    [((ARMailbox *) nil_chk([((ARActorEndpoint *) nil_chk(endpoint)) getMailbox])) scheduleOnceWithAREnvelope:new_AREnvelope_initWithId_withARActorScope_withARMailbox_withARActorRef_(message, [endpoint getScope], [endpoint getMailbox], sender) withLong:time];
  }
}


#line 123
- (void)sendMessageOnceNowWithARActorEndpoint:(ARActorEndpoint *)endpoint
                                       withId:(id)message
                               withARActorRef:(ARActorRef *)sender {
  if (!ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(self, endpoint, message, sender)) {
    [((ARMailbox *) nil_chk([((ARActorEndpoint *) nil_chk(endpoint)) getMailbox])) scheduleOnceWithAREnvelope:new_AREnvelope_initWithId_withARActorScope_withARMailbox_withARActorRef_(message, [endpoint getScope], [endpoint getMailbox], sender) withLong:0];
  }
}


#line 129
- (void)cancelSendWithARActorEndpoint:(ARActorEndpoint *)endpoint
                               withId:(id)message
                       withARActorRef:(ARActorRef *)sender {
  if (![((ARActorEndpoint *) nil_chk(endpoint)) isDisconnected]) {
    [((ARMailbox *) nil_chk([endpoint getMailbox])) unscheduleWithAREnvelope:new_AREnvelope_initWithId_withARActorScope_withARMailbox_withARActorRef_(message, [endpoint getScope], [endpoint getMailbox], sender)];
  }
}


#line 136
- (NSString *)getName {
  return name_;
}


#line 145
- (void)processEnvelopeWithAREnvelope:(AREnvelope *)envelope {
  
#line 147
  ARActorScope *scope = [((AREnvelope *) nil_chk(envelope)) getScope];
  
#line 151
  if ([((ARActorSystem *) nil_chk(actorSystem_)) getTraceInterface] != nil) {
    [((id<ARTraceInterface>) nil_chk([actorSystem_ getTraceInterface])) onEnvelopeDeliveredWithAREnvelope:envelope];
  }
  
#line 155
  jlong start = ARActorTime_currentTime();
  jboolean isDisconnected = false;
  
#line 158
  if ([((ARActorScope *) nil_chk(scope)) getActor] == nil) {
    if ([envelope getMessage] == JreLoadStatic(ARPoisonPill, INSTANCE_)) {
      
#line 161
      return;
    }
    @try {
      ARActor *actor = [((ARProps *) nil_chk([scope getProps])) create];
      [((ARActor *) nil_chk(actor)) initActorWithNSString:[scope getPath] withARActorContext:new_ARActorContext_initWithARActorScope_(scope) withARMailbox:[scope getMailbox]];
      [actor preStart];
      [scope onActorCreatedWithARActor:actor];
    }
    @catch (
#line 168
    JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      if ([envelope getSender] != nil) {
        [((ARActorRef *) nil_chk([envelope getSender])) sendWithId:new_ARDeadLetter_initWithId_(@"Unable to create actor")];
      }
      return;
    }
  }
  
#line 177
  @try {
    if ([envelope getMessage] == JreLoadStatic(ARStartActor, INSTANCE_)) {
      
#line 180
      return;
    }
    else
#line 181
    if ([envelope getMessage] == JreLoadStatic(ARPoisonPill, INSTANCE_)) {
      isDisconnected = true;
      [((ARActor *) nil_chk([scope getActor])) postStop];
      [scope onActorDie];
      {
        IOSObjectArray *a__ =
#line 185
        [((ARMailbox *) nil_chk([scope getMailbox])) allEnvelopes];
        AREnvelope * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        AREnvelope * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          AREnvelope *e = *b__++;
          
#line 186
          if ([((AREnvelope *) nil_chk(e)) getSender] != nil) {
            [((ARActorRef *) nil_chk([e getSender])) sendWithId:new_ARDeadLetter_initWithId_([e getMessage])];
          }
        }
      }
      
#line 190
      [((ARMailbox *) nil_chk([scope getMailbox])) clear];
      @synchronized(LOCK_) {
        (void) [((JavaUtilHashMap *) nil_chk(scopes_)) removeWithId:[scope getPath]];
        (void) [((JavaUtilHashMap *) nil_chk(endpoints_)) removeWithId:[scope getPath]];
        [((ARMailboxesQueue *) nil_chk([((ImActorRuntimeActorsDispatchAbstractDispatcher *) nil_chk(dispatcher_)) getQueue])) disconnectMailboxWithARMailbox:[scope getMailbox]];
      }
    }
    else {
      
#line 197
      [scope setSenderWithARActorRef:[envelope getSender]];
      if ([JavaLangRunnable_class_() isInstance:[envelope getMessage]]) {
        [((id<JavaLangRunnable>) nil_chk(((id<JavaLangRunnable>) check_protocol_cast([envelope getMessage], JavaLangRunnable_class_())))) run];
        return;
      }
      [((ARActor *) nil_chk([scope getActor])) onReceiveWithId:[envelope getMessage]];
    }
  }
  @catch (
#line 204
  JavaLangException *e) {
    if ([actorSystem_ getTraceInterface] != nil) {
      [((id<ARTraceInterface>) nil_chk([actorSystem_ getTraceInterface])) onActorDieWithARActorRef:[scope getActorRef] withAREnvelope:envelope withJavaLangException:e];
    }
    [scope onActorDie];
    isDisconnected = true;
    @synchronized(LOCK_) {
      (void) [((JavaUtilHashMap *) nil_chk(scopes_)) removeWithId:[scope getPath]];
      (void) [((JavaUtilHashMap *) nil_chk(endpoints_)) removeWithId:[scope getPath]];
      [((ARMailboxesQueue *) nil_chk([((ImActorRuntimeActorsDispatchAbstractDispatcher *) nil_chk(dispatcher_)) getQueue])) disconnectMailboxWithARMailbox:[scope getMailbox]];
    }
  }
  @finally {
    
#line 216
    if ([actorSystem_ getTraceInterface] != nil) {
      [((id<ARTraceInterface>) nil_chk([actorSystem_ getTraceInterface])) onEnvelopeProcessedWithAREnvelope:envelope withLong:ARActorTime_currentTime() - start];
    }
    if (!isDisconnected) {
      [((ARMailboxesQueue *) nil_chk([((ImActorRuntimeActorsDispatchAbstractDispatcher *) nil_chk(dispatcher_)) getQueue])) unlockMailboxWithARMailbox:[envelope getMailbox]];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withARActorSystem:", "ActorDispatcher", NULL, 0x1, NULL, NULL },
    { "initDispatcherWithImActorRuntimeActorsDispatchAbstractDispatcher:", "initDispatcher", "V", 0x4, NULL, NULL },
    { "referenceActorWithNSString:withARProps:", "referenceActor", "Lim.actor.runtime.actors.ActorRef;", 0x11, NULL, NULL },
    { "killGracefullyWithARActorScope:", "killGracefully", "V", 0x11, NULL, NULL },
    { "isDisconnectedWithARActorEndpoint:withId:withARActorRef:", "isDisconnected", "Z", 0x2, NULL, NULL },
    { "sendMessageAtTimeWithARActorEndpoint:withId:withLong:withARActorRef:", "sendMessageAtTime", "V", 0x11, NULL, NULL },
    { "sendMessageNowWithARActorEndpoint:withId:withARActorRef:", "sendMessageNow", "V", 0x11, NULL, NULL },
    { "sendMessageOnceAtTimeWithARActorEndpoint:withId:withLong:withARActorRef:", "sendMessageOnceAtTime", "V", 0x11, NULL, NULL },
    { "sendMessageOnceNowWithARActorEndpoint:withId:withARActorRef:", "sendMessageOnceNow", "V", 0x11, NULL, NULL },
    { "cancelSendWithARActorEndpoint:withId:withARActorRef:", "cancelSend", "V", 0x11, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "processEnvelopeWithAREnvelope:", "processEnvelope", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOCK_", NULL, 0x12, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "endpoints_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lim/actor/runtime/actors/mailbox/ActorEndpoint;>;", .constantValue.asLong = 0 },
    { "scopes_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lim/actor/runtime/actors/ActorScope;>;", .constantValue.asLong = 0 },
    { "actorSystem_", NULL, 0x12, "Lim.actor.runtime.actors.ActorSystem;", NULL, NULL, .constantValue.asLong = 0 },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "dispatcher_", NULL, 0x2, "Lim.actor.runtime.actors.dispatch.AbstractDispatcher;", NULL, "Lim/actor/runtime/actors/dispatch/AbstractDispatcher<Lim/actor/runtime/actors/mailbox/Envelope;Lim/actor/runtime/actors/mailbox/MailboxesQueue;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARActorDispatcher = { 2, "ActorDispatcher", "im.actor.runtime.actors.mailbox", NULL, 0x401, 12, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARActorDispatcher;
}

@end


#line 34
void ARActorDispatcher_initWithNSString_withARActorSystem_(ARActorDispatcher *self, NSString *name, ARActorSystem *actorSystem) {
  (void) NSObject_init(self);
  self->LOCK_ = new_NSObject_init();
  self->endpoints_ = new_JavaUtilHashMap_init();
  self->scopes_ = new_JavaUtilHashMap_init();
  
#line 35
  self->name_ = name;
  self->actorSystem_ = actorSystem;
}


#line 92
jboolean ARActorDispatcher_isDisconnectedWithARActorEndpoint_withId_withARActorRef_(ARActorDispatcher *self, ARActorEndpoint *endpoint, id message, ARActorRef *sender) {
  if ([((ARActorEndpoint *) nil_chk(endpoint)) isDisconnected]) {
    if (sender != nil) {
      if ([((ARActorSystem *) nil_chk(self->actorSystem_)) getTraceInterface] != nil) {
        [((id<ARTraceInterface>) nil_chk([self->actorSystem_ getTraceInterface])) onDeadLetterWithARActorRef:sender withId:message];
      }
      [sender sendWithId:new_ARDeadLetter_initWithId_(message)];
    }
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARActorDispatcher)

#pragma clang diagnostic pop
