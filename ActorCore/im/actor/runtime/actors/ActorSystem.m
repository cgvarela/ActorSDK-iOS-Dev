//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/ActorSystem.java
//

#include "J2ObjC_source.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSelection.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/actors/ThreadPriority.h"
#include "im/actor/runtime/actors/TraceInterface.h"
#include "im/actor/runtime/actors/mailbox/ActorDispatcher.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARActorSystem () {
 @public
  JavaUtilHashMap *dispatchers_;
  id<ARTraceInterface> traceInterface_;
}

@end

J2OBJC_FIELD_SETTER(ARActorSystem, dispatchers_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ARActorSystem, traceInterface_, id<ARTraceInterface>)

static ARActorSystem *ARActorSystem_mainSystem_;
J2OBJC_STATIC_FIELD_GETTER(ARActorSystem, mainSystem_, ARActorSystem *)

static NSString *ARActorSystem_DEFAULT_DISPATCHER_ = @"default";
J2OBJC_STATIC_FIELD_GETTER(ARActorSystem, DEFAULT_DISPATCHER_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/ActorSystem.java"

J2OBJC_INITIALIZED_DEFN(ARActorSystem)


#line 15
@implementation ARActorSystem


#line 24
+ (ARActorSystem *)system {
  return ARActorSystem_system();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 37
- (instancetype)init {
  ARActorSystem_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 45
- (instancetype)initWithBoolean:(jboolean)addDefaultDispatcher {
  ARActorSystem_initWithBoolean_(self, addDefaultDispatcher);
  return self;
}


#line 57
- (void)addDispatcherWithNSString:(NSString *)dispatcherId
                          withInt:(jint)threadsCount {
  @synchronized(dispatchers_) {
    if ([((JavaUtilHashMap *) nil_chk(dispatchers_)) containsKeyWithId:dispatcherId]) {
      return;
    }
    
#line 63
    ARActorDispatcher *dispatcher = ARRuntime_createDispatcherWithNSString_withInt_withARThreadPriorityEnum_withARActorSystem_(dispatcherId, threadsCount, JreLoadStatic(ARThreadPriorityEnum, LOW), self);
    (void) [dispatchers_ putWithId:dispatcherId withId:dispatcher];
  }
}


#line 73
- (void)addDispatcherWithNSString:(NSString *)dispatcherId {
  @synchronized(dispatchers_) {
    if ([((JavaUtilHashMap *) nil_chk(dispatchers_)) containsKeyWithId:dispatcherId]) {
      return;
    }
    
#line 79
    ARActorDispatcher *dispatcher = ARRuntime_createDefaultDispatcherWithNSString_withARThreadPriorityEnum_withARActorSystem_(dispatcherId, JreLoadStatic(ARThreadPriorityEnum, LOW), self);
    [self addDispatcherWithNSString:dispatcherId withARActorDispatcher:dispatcher];
  }
}


#line 90
- (void)addDispatcherWithNSString:(NSString *)dispatcherId
            withARActorDispatcher:(ARActorDispatcher *)dispatcher {
  @synchronized(dispatchers_) {
    if ([((JavaUtilHashMap *) nil_chk(dispatchers_)) containsKeyWithId:dispatcherId]) {
      return;
    }
    (void) [dispatchers_ putWithId:dispatcherId withId:dispatcher];
  }
}


#line 99
- (ARActorRef *)actorOfWithARActorSelection:(ARActorSelection *)selection {
  return [self actorOfWithARProps:[((ARActorSelection *) nil_chk(selection)) getProps] withNSString:[selection getPath]];
}


#line 110
- (ARActorRef *)actorOfWithARProps:(ARProps *)props
                      withNSString:(NSString *)path {
  NSString *dispatcherId = [((ARProps *) nil_chk(props)) getDispatcher] == nil ? ARActorSystem_DEFAULT_DISPATCHER_ : [props getDispatcher];
  
#line 113
  ARActorDispatcher *mailboxesDispatcher;
  @synchronized(dispatchers_) {
    if (![((JavaUtilHashMap *) nil_chk(dispatchers_)) containsKeyWithId:dispatcherId]) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C", @"Unknown dispatcherId '", dispatcherId, '\''));
    }
    mailboxesDispatcher = [dispatchers_ getWithId:dispatcherId];
  }
  
#line 121
  return [((ARActorDispatcher *) nil_chk(mailboxesDispatcher)) referenceActorWithNSString:path withARProps:props];
}


#line 129
- (id<ARTraceInterface>)getTraceInterface {
  return traceInterface_;
}


#line 138
- (void)setTraceInterfaceWithARTraceInterface:(id<ARTraceInterface>)traceInterface {
  self->traceInterface_ = traceInterface;
}

+ (void)initialize {
  if (self == [ARActorSystem class]) {
    ARActorSystem_mainSystem_ = new_ARActorSystem_init();
    J2OBJC_SET_INITIALIZED(ARActorSystem)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "system", NULL, "Lim.actor.runtime.actors.ActorSystem;", 0x9, NULL, NULL },
    { "init", "ActorSystem", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:", "ActorSystem", NULL, 0x1, NULL, NULL },
    { "addDispatcherWithNSString:withInt:", "addDispatcher", "V", 0x1, NULL, NULL },
    { "addDispatcherWithNSString:", "addDispatcher", "V", 0x1, NULL, NULL },
    { "addDispatcherWithNSString:withARActorDispatcher:", "addDispatcher", "V", 0x1, NULL, NULL },
    { "actorOfWithARActorSelection:", "actorOf", "Lim.actor.runtime.actors.ActorRef;", 0x1, NULL, "<T:Lim/actor/runtime/actors/Actor;>(Lim/actor/runtime/actors/ActorSelection;)Lim/actor/runtime/actors/ActorRef;" },
    { "actorOfWithARProps:withNSString:", "actorOf", "Lim.actor.runtime.actors.ActorRef;", 0x1, NULL, NULL },
    { "getTraceInterface", NULL, "Lim.actor.runtime.actors.TraceInterface;", 0x1, NULL, NULL },
    { "setTraceInterfaceWithARTraceInterface:", "setTraceInterface", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mainSystem_", NULL, 0x1a, "Lim.actor.runtime.actors.ActorSystem;", &ARActorSystem_mainSystem_, NULL, .constantValue.asLong = 0 },
    { "DEFAULT_DISPATCHER_", NULL, 0x1a, "Ljava.lang.String;", &ARActorSystem_DEFAULT_DISPATCHER_, NULL, .constantValue.asLong = 0 },
    { "dispatchers_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lim/actor/runtime/actors/mailbox/ActorDispatcher;>;", .constantValue.asLong = 0 },
    { "traceInterface_", NULL, 0x2, "Lim.actor.runtime.actors.TraceInterface;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARActorSystem = { 2, "ActorSystem", "im.actor.runtime.actors", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARActorSystem;
}

@end


#line 24
ARActorSystem *ARActorSystem_system() {
  ARActorSystem_initialize();
  
#line 25
  return ARActorSystem_mainSystem_;
}


#line 37
void ARActorSystem_init(ARActorSystem *self) {
  (void) ARActorSystem_initWithBoolean_(self, true);
}


#line 37
ARActorSystem *new_ARActorSystem_init() {
  ARActorSystem *self = [ARActorSystem alloc];
  ARActorSystem_init(self);
  return self;
}


#line 45
void ARActorSystem_initWithBoolean_(ARActorSystem *self, jboolean addDefaultDispatcher) {
  (void) NSObject_init(self);
  self->dispatchers_ = new_JavaUtilHashMap_init();
  
#line 46
  if (addDefaultDispatcher) {
    [self addDispatcherWithNSString:ARActorSystem_DEFAULT_DISPATCHER_];
  }
}


#line 45
ARActorSystem *new_ARActorSystem_initWithBoolean_(jboolean addDefaultDispatcher) {
  ARActorSystem *self = [ARActorSystem alloc];
  ARActorSystem_initWithBoolean_(self, addDefaultDispatcher);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARActorSystem)

#pragma clang diagnostic pop
