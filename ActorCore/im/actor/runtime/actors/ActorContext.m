//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/ActorContext.java
//

#include "J2ObjC_source.h"
#include "im/actor/runtime/actors/ActorContext.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorScope.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/mailbox/ActorDispatcher.h"
#include "java/lang/Exception.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARActorContext () {
 @public
  ARActorScope *actorScope_;
}

@end

J2OBJC_FIELD_SETTER(ARActorContext, actorScope_, ARActorScope *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//im/actor/runtime/actors/ActorContext.java"


#line 11
@implementation ARActorContext


#line 20
- (instancetype)initWithARActorScope:(ARActorScope *)scope {
  ARActorContext_initWithARActorScope_(self, scope);
  return self;
}


#line 29
- (ARActorRef *)getSelf {
  return [((ARActorScope *) nil_chk(actorScope_)) getActorRef];
}


#line 38
- (ARActorSystem *)getSystem {
  return [((ARActorScope *) nil_chk(actorScope_)) getActorSystem];
}


#line 48
- (ARActorRef *)sender {
  return [((ARActorScope *) nil_chk(actorScope_)) getSender];
}


#line 55
- (void)stopSelf {
  @try {
    [((ARActorDispatcher *) nil_chk([((ARActorScope *) nil_chk(actorScope_)) getDispatcher])) killGracefullyWithARActorScope:actorScope_];
  }
  @catch (
#line 58
  JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARActorScope:", "ActorContext", NULL, 0x1, NULL, NULL },
    { "getSelf", NULL, "Lim.actor.runtime.actors.ActorRef;", 0x1, NULL, NULL },
    { "getSystem", NULL, "Lim.actor.runtime.actors.ActorSystem;", 0x1, NULL, NULL },
    { "sender", NULL, "Lim.actor.runtime.actors.ActorRef;", 0x1, NULL, NULL },
    { "stopSelf", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "actorScope_", NULL, 0x12, "Lim.actor.runtime.actors.ActorScope;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARActorContext = { 2, "ActorContext", "im.actor.runtime.actors", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARActorContext;
}

@end


#line 20
void ARActorContext_initWithARActorScope_(ARActorContext *self, ARActorScope *scope) {
  (void) NSObject_init(self);
  
#line 21
  self->actorScope_ = scope;
}


#line 20
ARActorContext *new_ARActorContext_initWithARActorScope_(ARActorScope *scope) {
  ARActorContext *self = [ARActorContext alloc];
  ARActorContext_initWithARActorScope_(self, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARActorContext)

#pragma clang diagnostic pop
