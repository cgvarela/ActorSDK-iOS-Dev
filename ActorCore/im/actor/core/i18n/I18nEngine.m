//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/i18n/I18nEngine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/j2objc/annotations/ObjectiveCName.h"
#include "im/actor/core/entity/Avatar.h"
#include "im/actor/core/entity/ContentDescription.h"
#include "im/actor/core/entity/ContentType.h"
#include "im/actor/core/entity/Dialog.h"
#include "im/actor/core/entity/Message.h"
#include "im/actor/core/entity/Notification.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/PeerType.h"
#include "im/actor/core/entity/Sex.h"
#include "im/actor/core/entity/User.h"
#include "im/actor/core/entity/content/AbsContent.h"
#include "im/actor/core/entity/content/ServiceContent.h"
#include "im/actor/core/entity/content/ServiceGroupAvatarChanged.h"
#include "im/actor/core/entity/content/ServiceGroupCreated.h"
#include "im/actor/core/entity/content/ServiceGroupTitleChanged.h"
#include "im/actor/core/entity/content/ServiceGroupUserInvited.h"
#include "im/actor/core/entity/content/ServiceGroupUserJoined.h"
#include "im/actor/core/entity/content/ServiceGroupUserKicked.h"
#include "im/actor/core/entity/content/ServiceGroupUserLeave.h"
#include "im/actor/core/entity/content/ServiceUserRegistered.h"
#include "im/actor/core/entity/content/TextContent.h"
#include "im/actor/core/i18n/I18nEngine.h"
#include "im/actor/core/i18n/LocaleLoader.h"
#include "im/actor/core/modules/Authentication.h"
#include "im/actor/core/modules/Errors.h"
#include "im/actor/core/modules/Modules.h"
#include "im/actor/core/modules/internal/UsersModule.h"
#include "im/actor/core/network/RpcException.h"
#include "im/actor/core/util/JavaUtil.h"
#include "im/actor/core/viewmodel/UserPresence.h"
#include "im/actor/runtime/LocaleRuntime.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/storage/KeyValueEngine.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACI18nEngine () {
 @public
  ACModules *modules_;
  id<ARLocaleRuntime> runtime_;
  JavaUtilHashMap *locale_;
  IOSObjectArray *MONTHS_SHORT_;
  IOSObjectArray *MONTHS_;
}

- (NSString *)formatTwoDigitWithInt:(jint)v;

+ (jboolean)areSameDaysWithLong:(jlong)a
                       withLong:(jlong)b;

- (NSString *)getTemplateNamedWithInt:(jint)senderId
                         withNSString:(NSString *)baseString;

- (NSString *)getTemplateWithInt:(jint)senderId
                    withNSString:(NSString *)baseString;

- (ACUser *)getUserWithInt:(jint)uid;

@end

J2OBJC_FIELD_SETTER(ACI18nEngine, modules_, ACModules *)
J2OBJC_FIELD_SETTER(ACI18nEngine, runtime_, id<ARLocaleRuntime>)
J2OBJC_FIELD_SETTER(ACI18nEngine, locale_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ACI18nEngine, MONTHS_SHORT_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ACI18nEngine, MONTHS_, IOSObjectArray *)

static NSString *ACI18nEngine_TAG_ = @"I18nEngine";
J2OBJC_STATIC_FIELD_GETTER(ACI18nEngine, TAG_, NSString *)

static IOSObjectArray *ACI18nEngine_SUPPORTED_LOCALES_;
J2OBJC_STATIC_FIELD_GETTER(ACI18nEngine, SUPPORTED_LOCALES_, IOSObjectArray *)

__attribute__((unused)) static NSString *ACI18nEngine_formatTwoDigitWithInt_(ACI18nEngine *self, jint v);

__attribute__((unused)) static jboolean ACI18nEngine_areSameDaysWithLong_withLong_(jlong a, jlong b);

__attribute__((unused)) static NSString *ACI18nEngine_getTemplateNamedWithInt_withNSString_(ACI18nEngine *self, jint senderId, NSString *baseString);

__attribute__((unused)) static NSString *ACI18nEngine_getTemplateWithInt_withNSString_(ACI18nEngine *self, jint senderId, NSString *baseString);

__attribute__((unused)) static ACUser *ACI18nEngine_getUserWithInt_(ACI18nEngine *self, jint uid);

@interface ACI18nEngine_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithLong:(jlong)lhs
               withLong:(jlong)rhs;

- (jint)compareWithId:(ACMessage *)lhs
               withId:(ACMessage *)rhs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ACI18nEngine_$1)

__attribute__((unused)) static void ACI18nEngine_$1_init(ACI18nEngine_$1 *self);

__attribute__((unused)) static ACI18nEngine_$1 *new_ACI18nEngine_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACI18nEngine_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/i18n/I18nEngine.java"

J2OBJC_INITIALIZED_DEFN(ACI18nEngine)


#line 40
@implementation ACI18nEngine


#line 54
- (instancetype)initWithModules:(ACModules *)modules {
  ACI18nEngine_initWithModules_(self, modules);
  return self;
}


#line 105
- (NSString *)formatTwoDigitWithInt:(jint)v {
  return ACI18nEngine_formatTwoDigitWithInt_(self, v);
}


#line 118
+ (jboolean)areSameDaysWithLong:(jlong)a
                       withLong:(jlong)b {
  return ACI18nEngine_areSameDaysWithLong_withLong_(a, b);
}


#line 132
- (NSString *)formatShortDate:(jlong)date {
  
#line 134
  jlong delta = [new_JavaUtilDate_init() getTime] - date;
  if (delta < 60 * 1000) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortNow"];
  }
  else
#line 137
  if (delta < 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortMinutes"])) replace:@"{minutes}" withSequence:JreStrcat("J", delta / 60000)];
  }
  else
#line 139
  if (delta < 24 * 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortHours"])) replace:@"{hours}" withSequence:JreStrcat("J", delta / 3600000)];
  }
  else
#line 141
  if (delta < 2 * 24 * 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortYesterday"])) replace:@"{hours}" withSequence:JreStrcat("J", delta / 3600000)];
  }
  else {
    JavaUtilDate *date1 = new_JavaUtilDate_initWithLong_(date);
    jint month = [date1 getMonth];
    jint d = [date1 getDate];
    return JreStrcat("IC$", d, ' ', [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(MONTHS_SHORT_), month))) uppercaseString]);
  }
}


#line 153
- (NSString *)formatTyping {
  return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"Typing"];
}


#line 158
- (NSString *)formatTypingWithName:(NSString *)name {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TypingUser"])) replace:@"{user}" withSequence:name];
}


#line 163
- (NSString *)formatTypingWithCount:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TypingMultiple"])) replace:@"{count}" withSequence:JreStrcat("I", count)];
}


#line 168
- (NSString *)formatFileSize:(jint)bytes {
  if (bytes < 0) {
    bytes = 0;
  }
  
#line 173
  if (bytes < 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileB"])) replace:@"{bytes}" withSequence:JreStrcat("I", bytes)];
  }
  else
#line 175
  if (bytes < 1024 * 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileKb"])) replace:@"{kbytes}" withSequence:JreStrcat("I", (bytes / 1024))];
  }
  else
#line 177
  if (bytes < 1024 * 1024 * 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileMb"])) replace:@"{mbytes}" withSequence:JreStrcat("I", (bytes / (1024 * 1024)))];
  }
  else {
    
#line 180
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileGb"])) replace:@"{gbytes}" withSequence:JreStrcat("I", (bytes / (1024 * 1024 * 1024)))];
  }
}


#line 185
- (NSString *)formatTime:(jlong)date {
  return [((id<ARLocaleRuntime>) nil_chk(runtime_)) formatTimeWithLong:date];
}


#line 190
- (NSString *)formatDate:(jlong)date {
  return [((id<ARLocaleRuntime>) nil_chk(runtime_)) formatDate:date];
}


#line 195
- (NSString *)formatPresence:(ACUserPresence *)value
                     withSex:(ACSexEnum *)sex {
  if (value == nil) {
    return nil;
  }
  
#line 200
  if ([((ACUserPresence *) nil_chk(value)) getState] == JreLoadStatic(ACUserPresence_StateEnum, OFFLINE)) {
    
#line 202
    jlong currentTime = ARRuntime_getCurrentSyncedTime() / 1000LL;
    jint delta = (jint) (currentTime - [value getLastSeen]);
    if (delta < 60) {
      ARLog_dWithNSString_withNSString_(ACI18nEngine_TAG_, @"formatPresence: onlineNow");
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineNowMale"] && [locale_ containsKeyWithId:@"OnlineNowFemale"]) {
        return sex == JreLoadStatic(ACSexEnum, UNKNOWN) ?
#line 208
        [locale_ getWithId:@"OnlineNow"] :
#line 209
        sex == JreLoadStatic(ACSexEnum, MALE) ?
#line 210
        [locale_ getWithId:@"OnlineNowMale"] :
#line 211
        [locale_ getWithId:@"OnlineNowFemale"];
      }
      else {
        
#line 213
        return [locale_ getWithId:@"OnlineNow"];
      }
    }
    else
#line 215
    if (delta < 24 * 60 * 60) {
      
#line 217
      NSString *time = [self formatTime:[value getLastSeen] * 1000LL];
      if (ACI18nEngine_areSameDaysWithLong_withLong_([value getLastSeen] * 1000LL, [new_JavaUtilDate_init() getTime])) {
        if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenTodayMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenTodayMale"]) {
          return [(sex == JreLoadStatic(ACSexEnum, UNKNOWN) ?
#line 221
          [locale_ getWithId:@"OnlineLastSeenToday"] :
#line 222
          sex == JreLoadStatic(ACSexEnum, MALE) ?
#line 223
          [locale_ getWithId:@"OnlineLastSeenTodayMale"] :
#line 224
          [locale_ getWithId:@"OnlineLastSeenTodayFemale"]) replace:@"{time}" withSequence:time];
        }
        else {
          
#line 226
          return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenToday"])) replace:@"{time}" withSequence:time];
        }
      }
      else {
        
#line 229
        if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenYesterdayMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenYesterdayMale"]) {
          return [(sex == JreLoadStatic(ACSexEnum, UNKNOWN) ?
#line 231
          [locale_ getWithId:@"OnlineLastSeenYesterday"] :
#line 232
          sex == JreLoadStatic(ACSexEnum, MALE) ?
#line 233
          [locale_ getWithId:@"OnlineLastSeenYesterdayMale"] :
#line 234
          [locale_ getWithId:@"OnlineLastSeenYesterdayFemale"]) replace:@"{time}" withSequence:time];
        }
        else {
          
#line 236
          return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenYesterday"])) replace:@"{time}" withSequence:time];
        }
      }
    }
    else
#line 239
    if (delta < 14 * 24 * 60 * 60) {
      
#line 241
      NSString *time = [self formatTime:[value getLastSeen] * 1000LL];
      NSString *date = [self formatDate:[value getLastSeen] * 1000LL];
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenDateTimeMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenDateTimeMale"]) {
        return [((NSString *) nil_chk([(sex == JreLoadStatic(ACSexEnum, UNKNOWN) ?
#line 245
        [locale_ getWithId:@"OnlineLastSeenDateTime"] :
#line 246
        sex == JreLoadStatic(ACSexEnum, MALE) ?
#line 247
        [locale_ getWithId:@"OnlineLastSeenDateTimeMale"] :
#line 248
        [locale_ getWithId:@"OnlineLastSeenDateTimeFemale"]) replace:
#line 249
        @"{time}" withSequence:time])) replace:
#line 250
        @"{date}" withSequence:date];
      }
      else {
        
#line 252
        return [((NSString *) nil_chk([((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenDateTime"])) replace:
#line 253
        @"{time}" withSequence:time])) replace:
#line 254
        @"{date}" withSequence:date];
      }
    }
    else
#line 256
    if (delta < 6 * 30 * 24 * 60 * 60) {
      NSString *date = [self formatDate:[value getLastSeen] * 1000LL];
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenDateMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenDateMale"]) {
        return [(sex == JreLoadStatic(ACSexEnum, UNKNOWN) ?
#line 260
        [locale_ getWithId:@"OnlineLastSeenDate"] :
#line 261
        sex == JreLoadStatic(ACSexEnum, MALE) ?
#line 262
        [locale_ getWithId:@"OnlineLastSeenDateMale"] :
#line 263
        [locale_ getWithId:@"OnlineLastSeenDateFemale"]) replace:
#line 264
        @"{date}" withSequence:date];
      }
      else {
        
#line 266
        return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenDate"])) replace:
#line 267
        @"{date}" withSequence:date];
      }
    }
    else {
      
#line 270
      return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"OnlineOff"];
    }
  }
  else
#line 272
  if ([value getState] == JreLoadStatic(ACUserPresence_StateEnum, ONLINE)) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"OnlineOn"];
  }
  
#line 276
  return nil;
}


#line 280
- (NSString *)formatDuration:(jint)duration {
  if (duration < 60) {
    return JreStrcat("$C$", ACI18nEngine_formatTwoDigitWithInt_(self, 0), ':', ACI18nEngine_formatTwoDigitWithInt_(self, duration));
  }
  else
#line 283
  if (duration < 60 * 60) {
    return JreStrcat("$C$", ACI18nEngine_formatTwoDigitWithInt_(self, duration / 60), ':', ACI18nEngine_formatTwoDigitWithInt_(self, duration % 60));
  }
  else {
    
#line 286
    return JreStrcat("$C$C$", ACI18nEngine_formatTwoDigitWithInt_(self, duration / 3600), ':', ACI18nEngine_formatTwoDigitWithInt_(self, duration / 60), ':', ACI18nEngine_formatTwoDigitWithInt_(self, duration % 60));
  }
}


#line 291
- (NSString *)formatGroupMembers:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"GroupMembers"])) replace:@"{count}" withSequence:JreStrcat("I", count)];
}


#line 296
- (NSString *)formatGroupOnline:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"GroupOnline"])) replace:@"{count}" withSequence:JreStrcat("I", count)];
}


#line 301
- (NSString *)formatDialogText:(ACDialog *)dialog {
  if ([((ACDialog *) nil_chk(dialog)) getSenderId] == 0) {
    return @"";
  }
  else {
    
#line 305
    NSString *contentText = [self formatContentTextWithSenderId:[dialog getSenderId] withContentType:
#line 306
    [dialog getMessageType] withText:[dialog getText] withRelatedUid:[dialog getRelatedUid]];
    if ([((ACPeer *) nil_chk([dialog getPeer])) getPeerType] == JreLoadStatic(ACPeerTypeEnum, GROUP)) {
      if (![self isLargeDialogMessage:[dialog getMessageType]]) {
        return JreStrcat("$$$", [self formatPerformerNameWithUid:[dialog getSenderId]], @": ", contentText);
      }
      else {
        
#line 311
        return contentText;
      }
    }
    else {
      
#line 314
      return contentText;
    }
  }
}


#line 320
- (NSString *)formatNotificationText:(ACNotification *)pendingNotification {
  return [self formatContentTextWithSenderId:[((ACNotification *) nil_chk(pendingNotification)) getSender] withContentType:
#line 322
  [((ACContentDescription *) nil_chk([pendingNotification getContentDescription])) getContentType] withText:
#line 323
  [((ACContentDescription *) nil_chk([pendingNotification getContentDescription])) getText] withRelatedUid:
#line 324
  [((ACContentDescription *) nil_chk([pendingNotification getContentDescription])) getRelatedUser]];
}


#line 328
- (NSString *)formatContentTextWithSenderId:(jint)senderId
                            withContentType:(ACContentTypeEnum *)contentType
                                   withText:(NSString *)text
                             withRelatedUid:(jint)relatedUid {
  switch ([contentType ordinal]) {
    case ACContentType_TEXT:
    return text;
    case ACContentType_DOCUMENT:
    if (text == nil || ((jint) [text length]) == 0) {
      return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentDocument"];
    }
    return text;
    case ACContentType_DOCUMENT_PHOTO:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentPhoto"];
    case ACContentType_DOCUMENT_VIDEO:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentVideo"];
    case ACContentType_SERVICE:
    return text;
    case ACContentType_SERVICE_REGISTERED:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceRegistered");
    case ACContentType_SERVICE_CREATED:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupCreated");
    case ACContentType_SERVICE_ADD:
    return [((NSString *) nil_chk(ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAdded"))) replace:
#line 349
    @"{name_added}" withSequence:[self getSubjectNameWithUid:relatedUid]];
    case ACContentType_SERVICE_LEAVE:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupLeaved");
    case ACContentType_SERVICE_KICK:
    return [((NSString *) nil_chk(ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupKicked"))) replace:
#line 354
    @"{name_kicked}" withSequence:[self getSubjectNameWithUid:relatedUid]];
    case ACContentType_SERVICE_AVATAR:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarChanged");
    case ACContentType_SERVICE_AVATAR_REMOVED:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarRemoved");
    case ACContentType_SERVICE_TITLE:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupTitle");
    case ACContentType_SERVICE_JOINED:
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupJoined");
    case ACContentType_NONE:
    return @"";
    default:
    case ACContentType_UNKNOWN_CONTENT:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentUnsupported"];
  }
}


#line 372
- (jboolean)isLargeDialogMessage:(ACContentTypeEnum *)contentType {
  switch ([contentType ordinal]) {
    case ACContentType_SERVICE:
    case ACContentType_SERVICE_AVATAR:
    case ACContentType_SERVICE_AVATAR_REMOVED:
    case ACContentType_SERVICE_CREATED:
    case ACContentType_SERVICE_TITLE:
    case ACContentType_SERVICE_LEAVE:
    case ACContentType_SERVICE_REGISTERED:
    case ACContentType_SERVICE_KICK:
    case ACContentType_SERVICE_ADD:
    case ACContentType_SERVICE_JOINED:
    return true;
    default:
    return false;
  }
}


#line 391
- (NSString *)formatFullServiceMessageWithSenderId:(jint)senderId
                                       withContent:(ACServiceContent *)content {
  if ([content isKindOfClass:[ACServiceUserRegistered class]]) {
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceRegisteredFull");
  }
  else
#line 394
  if ([content isKindOfClass:[ACServiceGroupCreated class]]) {
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupCreatedFull");
  }
  else
#line 396
  if ([content isKindOfClass:[ACServiceGroupUserInvited class]]) {
    return [((NSString *) nil_chk(ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAdded"))) replace:
#line 398
    @"{name_added}" withSequence:
#line 399
    [self getSubjectNameWithUid:[((ACServiceGroupUserInvited *) nil_chk(((ACServiceGroupUserInvited *) check_class_cast(content, [ACServiceGroupUserInvited class])))) getAddedUid]]];
  }
  else
#line 400
  if ([content isKindOfClass:[ACServiceGroupUserKicked class]]) {
    return [((NSString *) nil_chk(ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupKicked"))) replace:
#line 402
    @"{name_kicked}" withSequence:
#line 403
    [self getSubjectNameWithUid:[((ACServiceGroupUserKicked *) nil_chk(((ACServiceGroupUserKicked *) check_class_cast(content, [ACServiceGroupUserKicked class])))) getKickedUid]]];
  }
  else
#line 404
  if ([content isKindOfClass:[ACServiceGroupUserLeave class]]) {
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupLeaved");
  }
  else
#line 406
  if ([content isKindOfClass:[ACServiceGroupTitleChanged class]]) {
    return [((NSString *) nil_chk(ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupTitleFull"))) replace:
#line 408
    @"{title}" withSequence:
#line 409
    [((ACServiceGroupTitleChanged *) nil_chk(((ACServiceGroupTitleChanged *) check_class_cast(content, [ACServiceGroupTitleChanged class])))) getNewTitle]];
  }
  else
#line 410
  if ([content isKindOfClass:[ACServiceGroupAvatarChanged class]]) {
    if ([((ACServiceGroupAvatarChanged *) nil_chk(((ACServiceGroupAvatarChanged *) check_class_cast(content, [ACServiceGroupAvatarChanged class])))) getNewAvatar] != nil) {
      return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarChanged");
    }
    else {
      
#line 414
      return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarRemoved");
    }
  }
  else
#line 416
  if ([content isKindOfClass:[ACServiceGroupUserJoined class]]) {
    return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupJoined");
  }
  
#line 420
  return [((ACServiceContent *) nil_chk(content)) getCompatText];
}


#line 424
- (NSString *)formatErrorTextWithTag:(NSString *)tag {
  return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:ACErrors_mapErrorWithNSString_(tag)];
}


#line 429
- (NSString *)formatErrorTextWithError:(id)o {
  if ([o isKindOfClass:[ACRpcException class]]) {
    ACRpcException *e = (ACRpcException *) check_class_cast(o, [ACRpcException class]);
    NSString *res = ACErrors_mapErrorWithNSString_withNSString_([((ACRpcException *) nil_chk(e)) getTag], nil);
    if (res != nil) {
      return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:res];
    }
    else {
      
#line 436
      if ([((NSString *) nil_chk([e getMessage])) isEqual:@""]) {
        return [e getTag];
      }
      else {
        
#line 439
        return [e getMessage];
      }
    }
  }
  else
#line 442
  if ([o isKindOfClass:[JavaLangException class]]) {
    return [((JavaLangException *) nil_chk(((JavaLangException *) check_class_cast(o, [JavaLangException class])))) getMessage];
  }
  else {
    
#line 445
    return JreStrcat("@", o);
  }
}


#line 450
- (NSString *)formatPerformerNameWithUid:(jint)uid {
  if (uid == [((ACAuthentication *) nil_chk([((ACModules *) nil_chk(modules_)) getAuthModule])) myUid]) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"You"];
  }
  else {
    
#line 454
    return [((ACUser *) nil_chk(ACI18nEngine_getUserWithInt_(self, uid))) getName];
  }
}


#line 459
- (NSString *)getSubjectNameWithUid:(jint)uid {
  if (uid == [((ACAuthentication *) nil_chk([((ACModules *) nil_chk(modules_)) getAuthModule])) myUid]) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"Thee"];
  }
  else {
    
#line 463
    return [((ACUser *) nil_chk(ACI18nEngine_getUserWithInt_(self, uid))) getName];
  }
}


#line 468
- (NSString *)formatMessagesExport:(IOSObjectArray *)messages {
  NSString *text = @"";
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(messages, new_ACI18nEngine_$1_init());
  
#line 482
  if (((IOSObjectArray *) nil_chk(messages))->size_ == 1) {
    {
      IOSObjectArray *a__ =
#line 483
      messages;
      ACMessage * const *b__ = a__->buffer_;
      ACMessage * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ACMessage *model = *b__++;
        
#line 484
        if (!([[((ACMessage *) nil_chk(model)) getContent] isKindOfClass:[ACTextContent class]])) {
          continue;
        }
        (void) JreStrAppendStrong(&text, "$", [((ACTextContent *) nil_chk(((ACTextContent *) check_class_cast([model getContent], [ACTextContent class])))) getText]);
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ =
#line 490
      messages;
      ACMessage * const *b__ = a__->buffer_;
      ACMessage * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ACMessage *model = *b__++;
        
#line 491
        if (!([[((ACMessage *) nil_chk(model)) getContent] isKindOfClass:[ACTextContent class]])) {
          continue;
        }
        if (((jint) [text length]) > 0) {
          (void) JreStrAppendStrong(&text, "$", @"\n");
        }
        (void) JreStrAppendStrong(&text, "$$", [((ACUser *) nil_chk(ACI18nEngine_getUserWithInt_(self, [model getSenderId]))) getName], @": ");
        (void) JreStrAppendStrong(&text, "$", [((ACTextContent *) nil_chk(((ACTextContent *) check_class_cast([model getContent], [ACTextContent class])))) getText]);
      }
    }
  }
  
#line 501
  return text;
}


#line 505
- (NSString *)formatFastName:(NSString *)name {
  if (((jint) [((NSString *) nil_chk(name)) length]) > 1) {
    if (JavaLangCharacter_isLetterWithChar_([name charAtWithInt:0])) {
      return [((NSString *) nil_chk([name substring:0 endIndex:1])) uppercaseString];
    }
    else {
      
#line 510
      return @"#";
    }
  }
  else {
    
#line 513
    return @"#";
  }
}


#line 517
- (NSString *)getTemplateNamedWithInt:(jint)senderId
                         withNSString:(NSString *)baseString {
  return ACI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, baseString);
}

- (NSString *)getTemplateWithInt:(jint)senderId
                    withNSString:(NSString *)baseString {
  return ACI18nEngine_getTemplateWithInt_withNSString_(self, senderId, baseString);
}


#line 539
- (ACUser *)getUserWithInt:(jint)uid {
  return ACI18nEngine_getUserWithInt_(self, uid);
}

+ (void)initialize {
  if (self == [ACI18nEngine class]) {
    ACI18nEngine_SUPPORTED_LOCALES_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 44
      @"Ru", @"Ar", @"Cn", @"Pt" } count:4 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(ACI18nEngine)
    }
  }

+ (IOSObjectArray *)__annotations_initWithACModules_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"initWithModules:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatShortDateWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatShortDate:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatTyping {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatTyping"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatTypingWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatTypingWithName:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatTypingWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatTypingWithCount:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatFileSizeWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatFileSize:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatTimeWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatTime:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatDateWithLong_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatDate:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatPresenceWithACUserPresence_withACSexEnum_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatPresence:withSex:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatDurationWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatDuration:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatGroupMembersWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatGroupMembers:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatGroupOnlineWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatGroupOnline:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatDialogTextWithACDialog_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatDialogText:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatNotificationTextWithACNotification_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatNotificationText:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatContentTextWithInt_withACContentTypeEnum_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatContentTextWithSenderId:withContentType:withText:withRelatedUid:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_isLargeDialogMessageWithACContentTypeEnum_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"isLargeDialogMessage:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatFullServiceMessageWithInt_withACServiceContent_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatFullServiceMessageWithSenderId:withContent:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatErrorTextWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatErrorTextWithTag:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatErrorTextWithId_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatErrorTextWithError:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatPerformerNameWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatPerformerNameWithUid:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_getSubjectNameWithInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"getSubjectNameWithUid:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatMessagesExportWithACMessageArray_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatMessagesExport:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_formatFastNameWithNSString_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[ComGoogleJ2objcAnnotationsObjectiveCName alloc] initWithValue:@"formatFastName:"] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithModules:", "I18nEngine", NULL, 0x1, NULL, NULL },
    { "formatTwoDigitWithInt:", "formatTwoDigit", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "areSameDaysWithLong:withLong:", "areSameDays", "Z", 0xa, NULL, NULL },
    { "formatShortDate:", "formatShortDate", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatTyping", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatTypingWithName:", "formatTyping", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatTypingWithCount:", "formatTyping", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatFileSize:", "formatFileSize", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatTime:", "formatTime", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatDate:", "formatDate", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatPresence:withSex:", "formatPresence", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatDuration:", "formatDuration", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatGroupMembers:", "formatGroupMembers", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatGroupOnline:", "formatGroupOnline", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatDialogText:", "formatDialogText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatNotificationText:", "formatNotificationText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatContentTextWithSenderId:withContentType:withText:withRelatedUid:", "formatContentText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLargeDialogMessage:", "isLargeDialogMessage", "Z", 0x1, NULL, NULL },
    { "formatFullServiceMessageWithSenderId:withContent:", "formatFullServiceMessage", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatErrorTextWithTag:", "formatErrorText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatErrorTextWithError:", "formatErrorText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatPerformerNameWithUid:", "formatPerformerName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSubjectNameWithUid:", "getSubjectName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatMessagesExport:", "formatMessagesExport", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatFastName:", "formatFastName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTemplateNamedWithInt:withNSString:", "getTemplateNamed", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getTemplateWithInt:withNSString:", "getTemplate", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getUserWithInt:", "getUser", "Lim.actor.core.entity.User;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACI18nEngine_TAG_, NULL, .constantValue.asLong = 0 },
    { "SUPPORTED_LOCALES_", NULL, 0x1a, "[Ljava.lang.String;", &ACI18nEngine_SUPPORTED_LOCALES_, NULL, .constantValue.asLong = 0 },
    { "modules_", NULL, 0x12, "Lim.actor.core.modules.Modules;", NULL, NULL, .constantValue.asLong = 0 },
    { "runtime_", NULL, 0x12, "Lim.actor.runtime.LocaleRuntime;", NULL, NULL, .constantValue.asLong = 0 },
    { "locale_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "MONTHS_SHORT_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "MONTHS_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACI18nEngine = { 2, "I18nEngine", "im.actor.core.i18n", NULL, 0x1, 28, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACI18nEngine;
}

@end


#line 54
void ACI18nEngine_initWithModules_(ACI18nEngine *self, ACModules *modules) {
  (void) NSObject_init(self);
  
#line 55
  self->modules_ = modules;
  self->runtime_ = ARRuntime_getLocaleRuntime();
  
#line 59
  self->locale_ = new_JavaUtilHashMap_init();
  NSString *currentLocale = [((id<ARLocaleRuntime>) nil_chk(self->runtime_)) getCurrentLocale];
  jboolean isLoaded = false;
  if (currentLocale != nil) {
    if (ACJavaUtil_containsWithNSStringArray_withNSString_(ACI18nEngine_SUPPORTED_LOCALES_, currentLocale)) {
      [self->locale_ putAllWithJavaUtilMap:ACLocaleLoader_loadPropertiesFileWithNSString_(JreStrcat("$$$", @"AppText_", currentLocale, @".properties"))];
      [self->locale_ putAllWithJavaUtilMap:ACLocaleLoader_loadPropertiesFileWithNSString_(JreStrcat("$$$", @"Months_", currentLocale, @".properties"))];
      isLoaded = true;
    }
  }
  if (!isLoaded) {
    [self->locale_ putAllWithJavaUtilMap:ACLocaleLoader_loadPropertiesFileWithNSString_(@"AppText.properties")];
    [self->locale_ putAllWithJavaUtilMap:ACLocaleLoader_loadPropertiesFileWithNSString_(@"Months.properties")];
  }
  
#line 74
  self->MONTHS_SHORT_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 75
    [self->locale_ getWithId:@"JanShort"],
#line 76
    [self->locale_ getWithId:@"FebShort"],
#line 77
    [self->locale_ getWithId:@"MarShort"],
#line 78
    [self->locale_ getWithId:@"AprShort"],
#line 79
    [self->locale_ getWithId:@"MayShort"],
#line 80
    [self->locale_ getWithId:@"JunShort"],
#line 81
    [self->locale_ getWithId:@"JulShort"],
#line 82
    [self->locale_ getWithId:@"AugShort"],
#line 83
    [self->locale_ getWithId:@"SepShort"],
#line 84
    [self->locale_ getWithId:@"OctShort"],
#line 85
    [self->locale_ getWithId:@"NovShort"],
#line 86
    [self->locale_ getWithId:@"DecShort"] } count:12 type:NSString_class_()];
    
#line 89
    self->MONTHS_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 90
      [self->locale_ getWithId:@"JanFull"],
#line 91
      [self->locale_ getWithId:@"FebFull"],
#line 92
      [self->locale_ getWithId:@"MarFull"],
#line 93
      [self->locale_ getWithId:@"AprFull"],
#line 94
      [self->locale_ getWithId:@"MayFull"],
#line 95
      [self->locale_ getWithId:@"JunFull"],
#line 96
      [self->locale_ getWithId:@"JulFull"],
#line 97
      [self->locale_ getWithId:@"AugFull"],
#line 98
      [self->locale_ getWithId:@"SepFull"],
#line 99
      [self->locale_ getWithId:@"OctFull"],
#line 100
      [self->locale_ getWithId:@"NovFull"],
#line 101
      [self->locale_ getWithId:@"DecFull"] } count:12 type:NSString_class_()];
    }


#line 54
ACI18nEngine *new_ACI18nEngine_initWithModules_(ACModules *modules) {
  ACI18nEngine *self = [ACI18nEngine alloc];
  ACI18nEngine_initWithModules_(self, modules);
  return self;
}


#line 105
NSString *ACI18nEngine_formatTwoDigitWithInt_(ACI18nEngine *self, jint v) {
  if (v < 0) {
    return @"00";
  }
  else
#line 108
  if (v < 10) {
    return JreStrcat("CI", '0', v);
  }
  else
#line 110
  if (v < 100) {
    return JreStrcat("I", v);
  }
  else {
    
#line 113
    NSString *res = JreStrcat("I", v);
    return [res substring:((jint) [res length]) - 2];
  }
}


#line 118
jboolean ACI18nEngine_areSameDaysWithLong_withLong_(jlong a, jlong b) {
  ACI18nEngine_initialize();
  
#line 119
  JavaUtilDate *date1 = new_JavaUtilDate_initWithLong_(a);
  jint y1 = [date1 getYear];
  jint m1 = [date1 getMonth];
  jint d1 = [date1 getDate];
  JavaUtilDate *date2 = new_JavaUtilDate_initWithLong_(b);
  jint y2 = [date2 getYear];
  jint m2 = [date2 getMonth];
  jint d2 = [date2 getDate];
  
#line 128
  return y1 == y2 && m1 == m2 && d1 == d2;
}


#line 517
NSString *ACI18nEngine_getTemplateNamedWithInt_withNSString_(ACI18nEngine *self, jint senderId, NSString *baseString) {
  return [((NSString *) nil_chk(ACI18nEngine_getTemplateWithInt_withNSString_(self, senderId, baseString))) replace:@"{name}" withSequence:
#line 519
  [self formatPerformerNameWithUid:senderId]];
}


#line 522
NSString *ACI18nEngine_getTemplateWithInt_withNSString_(ACI18nEngine *self, jint senderId, NSString *baseString) {
  if (senderId == [((ACAuthentication *) nil_chk([((ACModules *) nil_chk(self->modules_)) getAuthModule])) myUid]) {
    if ([((JavaUtilHashMap *) nil_chk(self->locale_)) containsKeyWithId:JreStrcat("$$", baseString, @"You")]) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"You")];
    }
  }
  if ([((JavaUtilHashMap *) nil_chk(self->locale_)) containsKeyWithId:JreStrcat("$$", baseString, @"Male")] && [self->locale_ containsKeyWithId:JreStrcat("$$", baseString, @"Female")]) {
    ACUser *u = ACI18nEngine_getUserWithInt_(self, senderId);
    if ([((ACUser *) nil_chk(u)) getSex] == JreLoadStatic(ACSexEnum, MALE)) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"Male")];
    }
    else
#line 532
    if ([u getSex] == JreLoadStatic(ACSexEnum, FEMALE)) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"Female")];
    }
  }
  return [self->locale_ getWithId:baseString];
}


#line 539
ACUser *ACI18nEngine_getUserWithInt_(ACI18nEngine *self, jint uid) {
  return [((id<ARKeyValueEngine>) nil_chk([((ACUsersModule *) nil_chk([((ACModules *) nil_chk(self->modules_)) getUsersModule])) getUsersStorage])) getValueWithKey:uid];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACI18nEngine)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/i18n/I18nEngine.java"

@implementation ACI18nEngine_$1


#line 472
- (jint)compareWithLong:(jlong)lhs
               withLong:(jlong)rhs {
  return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);
}

- (jint)compareWithId:(ACMessage *)lhs
               withId:(ACMessage *)rhs {
  return [self compareWithLong:[((ACMessage *) nil_chk(lhs)) getEngineSort] withLong:[((ACMessage *) nil_chk(rhs)) getEngineSort]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACI18nEngine_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithLong:withLong:", "compare", "I", 0x0, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACI18nEngine", "formatMessagesExport:" };
  static const J2ObjcClassInfo _ACI18nEngine_$1 = { 2, "", "im.actor.core.i18n", "I18nEngine", 0x8008, 3, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lim/actor/core/entity/Message;>;" };
  return &_ACI18nEngine_$1;
}

@end

void ACI18nEngine_$1_init(ACI18nEngine_$1 *self) {
  (void) NSObject_init(self);
}

ACI18nEngine_$1 *new_ACI18nEngine_$1_init() {
  ACI18nEngine_$1 *self = [ACI18nEngine_$1 alloc];
  ACI18nEngine_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACI18nEngine_$1)

#pragma clang diagnostic pop
