//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserLink.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/core/viewmodel/UserLink.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUserLink () {
 @public
  NSString *title_;
  NSString *url_;
}

@end

J2OBJC_FIELD_SETTER(ACUserLink, title_, NSString *)
J2OBJC_FIELD_SETTER(ACUserLink, url_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserLink.java"


#line 5
@implementation ACUserLink

@synthesize title = title_;
@synthesize url = url_;


#line 12
- (instancetype)initWithNSString:(NSString *)title
                    withNSString:(NSString *)url {
  ACUserLink_initWithNSString_withNSString_(self, title, url);
  return self;
}


#line 17
- (NSString *)getTitle {
  return title_;
}

- (NSString *)getUrl {
  return url_;
}


#line 26
- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self getClass] != [o getClass]) return false;
  
#line 30
  ACUserLink *userWeb = (ACUserLink *) check_class_cast(o, [ACUserLink class]);
  
#line 32
  if (title_ != nil ? ![title_ isEqual:((ACUserLink *) nil_chk(userWeb))->title_] : ((ACUserLink *) nil_chk(userWeb))->title_ != nil) return false;
  return !(url_ != nil ? ![url_ isEqual:((ACUserLink *) nil_chk(userWeb))->url_] : ((ACUserLink *) nil_chk(userWeb))->url_ != nil);
}

- (NSUInteger)hash {
  jint result = title_ != nil ? ((jint) [title_ hash]) : 0;
  result = 31 * result + (url_ != nil ? ((jint) [url_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "UserLink", NULL, 0x1, NULL, NULL },
    { "getTitle", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getUrl", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "title_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "url_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUserLink = { 2, "UserLink", "im.actor.core.viewmodel", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUserLink;
}

@end


#line 12
void ACUserLink_initWithNSString_withNSString_(ACUserLink *self, NSString *title, NSString *url) {
  (void) NSObject_init(self);
  
#line 13
  self->title_ = title;
  self->url_ = url;
}


#line 12
ACUserLink *new_ACUserLink_initWithNSString_withNSString_(NSString *title, NSString *url) {
  ACUserLink *self = [ACUserLink alloc];
  ACUserLink_initWithNSString_withNSString_(self, title, url);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUserLink)

#pragma clang diagnostic pop
