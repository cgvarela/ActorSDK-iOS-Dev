//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserEmail.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/core/viewmodel/UserEmail.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUserEmail () {
 @public
  NSString *email_;
  NSString *title_;
}

@end

J2OBJC_FIELD_SETTER(ACUserEmail, email_, NSString *)
J2OBJC_FIELD_SETTER(ACUserEmail, title_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserEmail.java"


#line 5
@implementation ACUserEmail

@synthesize email = email_;
@synthesize title = title_;


#line 12
- (instancetype)initWithNSString:(NSString *)email
                    withNSString:(NSString *)title {
  ACUserEmail_initWithNSString_withNSString_(self, email, title);
  return self;
}


#line 17
- (NSString *)getEmail {
  return email_;
}

- (NSString *)getTitle {
  return title_;
}


#line 26
- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self getClass] != [o getClass]) return false;
  
#line 30
  ACUserEmail *userEmail = (ACUserEmail *) check_class_cast(o, [ACUserEmail class]);
  
#line 32
  if (![((NSString *) nil_chk(email_)) isEqual:((ACUserEmail *) nil_chk(userEmail))->email_]) return false;
  return !(title_ != nil ? ![title_ isEqual:userEmail->title_] : userEmail->title_ != nil);
}

- (NSUInteger)hash {
  jint result = ((jint) [((NSString *) nil_chk(email_)) hash]);
  result = 31 * result + (title_ != nil ? ((jint) [title_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "UserEmail", NULL, 0x1, NULL, NULL },
    { "getEmail", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitle", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "email_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "title_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUserEmail = { 2, "UserEmail", "im.actor.core.viewmodel", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUserEmail;
}

@end


#line 12
void ACUserEmail_initWithNSString_withNSString_(ACUserEmail *self, NSString *email, NSString *title) {
  (void) NSObject_init(self);
  
#line 13
  self->email_ = email;
  self->title_ = title;
}


#line 12
ACUserEmail *new_ACUserEmail_initWithNSString_withNSString_(NSString *email, NSString *title) {
  ACUserEmail *self = [ACUserEmail alloc];
  ACUserEmail_initWithNSString_withNSString_(self, email, title);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUserEmail)

#pragma clang diagnostic pop
