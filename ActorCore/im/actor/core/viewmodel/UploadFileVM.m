//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/modules/Modules.h"
#include "im/actor/core/modules/internal/FilesModule.h"
#include "im/actor/core/viewmodel/UploadFileCallback.h"
#include "im/actor/core/viewmodel/UploadFileVM.h"
#include "im/actor/core/viewmodel/UploadFileVMCallback.h"
#include "im/actor/runtime/mvvm/AsyncVM.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUploadFileVM () {
 @public
  jlong rid_;
  ACModules *modules_;
  id<ACUploadFileVMCallback> vmCallback_;
  id<ACUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadFileVM, modules_, ACModules *)
J2OBJC_FIELD_SETTER(ACUploadFileVM, vmCallback_, id<ACUploadFileVMCallback>)
J2OBJC_FIELD_SETTER(ACUploadFileVM, callback_, id<ACUploadFileCallback>)

@interface ACUploadFileVM_NotUploading : NSObject

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadFileVM_NotUploading)

__attribute__((unused)) static void ACUploadFileVM_NotUploading_initWithACUploadFileVM_(ACUploadFileVM_NotUploading *self, ACUploadFileVM *outer$);

__attribute__((unused)) static ACUploadFileVM_NotUploading *new_ACUploadFileVM_NotUploading_initWithACUploadFileVM_(ACUploadFileVM *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadFileVM_NotUploading)

@interface ACUploadFileVM_Uploading : NSObject {
 @public
  jfloat progress_;
}

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$
                             withFloat:(jfloat)progress;

- (jfloat)getProgress;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadFileVM_Uploading)

__attribute__((unused)) static void ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(ACUploadFileVM_Uploading *self, ACUploadFileVM *outer$, jfloat progress);

__attribute__((unused)) static ACUploadFileVM_Uploading *new_ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(ACUploadFileVM *outer$, jfloat progress) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadFileVM_Uploading)

@interface ACUploadFileVM_Uploaded : NSObject

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadFileVM_Uploaded)

__attribute__((unused)) static void ACUploadFileVM_Uploaded_initWithACUploadFileVM_(ACUploadFileVM_Uploaded *self, ACUploadFileVM *outer$);

__attribute__((unused)) static ACUploadFileVM_Uploaded *new_ACUploadFileVM_Uploaded_initWithACUploadFileVM_(ACUploadFileVM *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadFileVM_Uploaded)

@interface ACUploadFileVM_$1 : NSObject < ACUploadFileCallback > {
 @public
  ACUploadFileVM *this$0_;
}

- (void)onNotUploading;

- (void)onUploading:(jfloat)progress;

- (void)onUploaded;

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadFileVM_$1)

J2OBJC_FIELD_SETTER(ACUploadFileVM_$1, this$0_, ACUploadFileVM *)

__attribute__((unused)) static void ACUploadFileVM_$1_initWithACUploadFileVM_(ACUploadFileVM_$1 *self, ACUploadFileVM *outer$);

__attribute__((unused)) static ACUploadFileVM_$1 *new_ACUploadFileVM_$1_initWithACUploadFileVM_(ACUploadFileVM *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadFileVM_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java"


#line 15
@implementation ACUploadFileVM


#line 29
- (instancetype)initWithLong:(jlong)rid
  withACUploadFileVMCallback:(id<ACUploadFileVMCallback>)vmCallback
               withACModules:(ACModules *)modules {
  ACUploadFileVM_initWithLong_withACUploadFileVMCallback_withACModules_(self, rid, vmCallback, modules);
  return self;
}


#line 53
- (void)onObjectReceivedWithId:(id)obj {
  if ([obj isKindOfClass:[ACUploadFileVM_NotUploading class]]) {
    [((id<ACUploadFileVMCallback>) nil_chk(vmCallback_)) onNotUploaded];
  }
  else
#line 56
  if ([obj isKindOfClass:[ACUploadFileVM_Uploading class]]) {
    [((id<ACUploadFileVMCallback>) nil_chk(vmCallback_)) onUploading:[((ACUploadFileVM_Uploading *) nil_chk(((ACUploadFileVM_Uploading *) check_class_cast(obj, [ACUploadFileVM_Uploading class])))) getProgress]];
  }
  else
#line 58
  if ([obj isKindOfClass:[ACUploadFileVM_Uploaded class]]) {
    [((id<ACUploadFileVMCallback>) nil_chk(vmCallback_)) onUploaded];
  }
}


#line 68
- (void)detach {
  [super detach];
  [((ACFilesModule *) nil_chk([((ACModules *) nil_chk(modules_)) getFilesModule])) unbindUploadFileWithLong:rid_ withACUploadFileCallback:callback_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACUploadFileVMCallback:withACModules:", "UploadFileVM", NULL, 0x1, NULL, NULL },
    { "onObjectReceivedWithId:", "onObjectReceived", "V", 0x4, NULL, NULL },
    { "detach", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "modules_", NULL, 0x2, "Lim.actor.core.modules.Modules;", NULL, NULL, .constantValue.asLong = 0 },
    { "vmCallback_", NULL, 0x2, "Lim.actor.core.viewmodel.UploadFileVMCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.viewmodel.UploadFileVM$NotUploading;", "Lim.actor.core.viewmodel.UploadFileVM$Uploading;", "Lim.actor.core.viewmodel.UploadFileVM$Uploaded;"};
  static const J2ObjcClassInfo _ACUploadFileVM = { 2, "UploadFileVM", "im.actor.core.viewmodel", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_ACUploadFileVM;
}

@end


#line 29
void ACUploadFileVM_initWithLong_withACUploadFileVMCallback_withACModules_(ACUploadFileVM *self, jlong rid, id<ACUploadFileVMCallback> vmCallback, ACModules *modules) {
  (void) ARAsyncVM_init(self);
  
#line 30
  self->rid_ = rid;
  self->modules_ = modules;
  self->vmCallback_ = vmCallback;
  self->callback_ = new_ACUploadFileVM_$1_initWithACUploadFileVM_(self);
  
#line 49
  [((ACFilesModule *) nil_chk([((ACModules *) nil_chk(modules)) getFilesModule])) bindUploadFileWithLong:rid withACUploadFileCallback:self->callback_];
}


#line 29
ACUploadFileVM *new_ACUploadFileVM_initWithLong_withACUploadFileVMCallback_withACModules_(jlong rid, id<ACUploadFileVMCallback> vmCallback, ACModules *modules) {
  ACUploadFileVM *self = [ACUploadFileVM alloc];
  ACUploadFileVM_initWithLong_withACUploadFileVMCallback_withACModules_(self, rid, vmCallback, modules);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadFileVM)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java"


#line 73
@implementation ACUploadFileVM_NotUploading

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$ {
  ACUploadFileVM_NotUploading_initWithACUploadFileVM_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACUploadFileVM:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACUploadFileVM_NotUploading = { 2, "NotUploading", "im.actor.core.viewmodel", "UploadFileVM", 0x2, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadFileVM_NotUploading;
}

@end

void ACUploadFileVM_NotUploading_initWithACUploadFileVM_(ACUploadFileVM_NotUploading *self, ACUploadFileVM *outer$) {
  (void) NSObject_init(self);
}

ACUploadFileVM_NotUploading *new_ACUploadFileVM_NotUploading_initWithACUploadFileVM_(ACUploadFileVM *outer$) {
  ACUploadFileVM_NotUploading *self = [ACUploadFileVM_NotUploading alloc];
  ACUploadFileVM_NotUploading_initWithACUploadFileVM_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadFileVM_NotUploading)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java"


#line 77
@implementation ACUploadFileVM_Uploading


#line 80
- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$
                             withFloat:(jfloat)progress {
  ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(self, outer$, progress);
  return self;
}


#line 84
- (jfloat)getProgress {
  return progress_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACUploadFileVM:withFloat:", "Uploading", NULL, 0x2, NULL, NULL },
    { "getProgress", NULL, "F", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "progress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadFileVM_Uploading = { 2, "Uploading", "im.actor.core.viewmodel", "UploadFileVM", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadFileVM_Uploading;
}

@end


#line 80
void ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(ACUploadFileVM_Uploading *self, ACUploadFileVM *outer$, jfloat progress) {
  (void) NSObject_init(self);
  
#line 81
  self->progress_ = progress;
}


#line 80
ACUploadFileVM_Uploading *new_ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(ACUploadFileVM *outer$, jfloat progress) {
  ACUploadFileVM_Uploading *self = [ACUploadFileVM_Uploading alloc];
  ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(self, outer$, progress);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadFileVM_Uploading)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java"


#line 89
@implementation ACUploadFileVM_Uploaded

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$ {
  ACUploadFileVM_Uploaded_initWithACUploadFileVM_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACUploadFileVM:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACUploadFileVM_Uploaded = { 2, "Uploaded", "im.actor.core.viewmodel", "UploadFileVM", 0x2, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadFileVM_Uploaded;
}

@end

void ACUploadFileVM_Uploaded_initWithACUploadFileVM_(ACUploadFileVM_Uploaded *self, ACUploadFileVM *outer$) {
  (void) NSObject_init(self);
}

ACUploadFileVM_Uploaded *new_ACUploadFileVM_Uploaded_initWithACUploadFileVM_(ACUploadFileVM *outer$) {
  ACUploadFileVM_Uploaded *self = [ACUploadFileVM_Uploaded alloc];
  ACUploadFileVM_Uploaded_initWithACUploadFileVM_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadFileVM_Uploaded)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UploadFileVM.java"

@implementation ACUploadFileVM_$1


#line 35
- (void)onNotUploading {
  [this$0_ postWithId:new_ACUploadFileVM_NotUploading_initWithACUploadFileVM_(this$0_)];
}


#line 40
- (void)onUploading:(jfloat)progress {
  [this$0_ postWithId:new_ACUploadFileVM_Uploading_initWithACUploadFileVM_withFloat_(this$0_, progress)];
}


#line 45
- (void)onUploaded {
  [this$0_ postWithId:new_ACUploadFileVM_Uploaded_initWithACUploadFileVM_(this$0_)];
}

- (instancetype)initWithACUploadFileVM:(ACUploadFileVM *)outer$ {
  ACUploadFileVM_$1_initWithACUploadFileVM_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onNotUploading", NULL, "V", 0x1, NULL, NULL },
    { "onUploading:", "onUploading", "V", 0x1, NULL, NULL },
    { "onUploaded", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileVM:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileVM;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadFileVM", "initWithLong:withACUploadFileVMCallback:withACModules:" };
  static const J2ObjcClassInfo _ACUploadFileVM_$1 = { 2, "", "im.actor.core.viewmodel", "UploadFileVM", 0x8008, 4, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadFileVM_$1;
}

@end

void ACUploadFileVM_$1_initWithACUploadFileVM_(ACUploadFileVM_$1 *self, ACUploadFileVM *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadFileVM_$1 *new_ACUploadFileVM_$1_initWithACUploadFileVM_(ACUploadFileVM *outer$) {
  ACUploadFileVM_$1 *self = [ACUploadFileVM_$1 alloc];
  ACUploadFileVM_$1_initWithACUploadFileVM_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadFileVM_$1)

#pragma clang diagnostic pop
