//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserTypingVM.java
//

#include "J2ObjC_source.h"
#include "im/actor/core/viewmodel/UserTypingVM.h"
#include "im/actor/runtime/mvvm/ValueModel.h"
#include "java/lang/Boolean.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUserTypingVM () {
 @public
  jint uid_;
  ARValueModel *userTyping_;
}

@end

J2OBJC_FIELD_SETTER(ACUserTypingVM, userTyping_, ARValueModel *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/viewmodel/UserTypingVM.java"


#line 14
@implementation ACUserTypingVM

@synthesize uid = uid_;
@synthesize userTyping = userTyping_;


#line 20
- (instancetype)initWithInt:(jint)uid {
  ACUserTypingVM_initWithInt_(self, uid);
  return self;
}

- (jint)getUid {
  return uid_;
}

- (ARValueModel *)getTyping {
  return userTyping_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "UserTypingVM", NULL, 0x1, NULL, NULL },
    { "getUid", NULL, "I", 0x1, NULL, NULL },
    { "getTyping", NULL, "Lim.actor.runtime.mvvm.ValueModel;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "uid_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "userTyping_", NULL, 0x2, "Lim.actor.runtime.mvvm.ValueModel;", NULL, "Lim/actor/runtime/mvvm/ValueModel<Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUserTypingVM = { 2, "UserTypingVM", "im.actor.core.viewmodel", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUserTypingVM;
}

@end


#line 20
void ACUserTypingVM_initWithInt_(ACUserTypingVM *self, jint uid) {
  (void) NSObject_init(self);
  
#line 21
  self->uid_ = uid;
  self->userTyping_ = new_ARValueModel_initWithNSString_withId_(JreStrcat("$I$", @"user.", uid, @".typing"), JavaLangBoolean_valueOfWithBoolean_(false));
}


#line 20
ACUserTypingVM *new_ACUserTypingVM_initWithInt_(jint uid) {
  ACUserTypingVM *self = [ACUserTypingVM alloc];
  ACUserTypingVM_initWithInt_(self, uid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUserTypingVM)

#pragma clang diagnostic pop
