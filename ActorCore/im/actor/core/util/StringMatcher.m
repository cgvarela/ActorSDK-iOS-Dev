//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/util/StringMatcher.java
//

#include "J2ObjC_source.h"
#include "im/actor/core/util/StringMatch.h"
#include "im/actor/core/util/StringMatcher.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/util/StringMatcher.java"


#line 6
@implementation ACStringMatcher

+ (id<JavaUtilList>)findMatchesWithNSString:(NSString *)text
                               withNSString:(NSString *)query {
  return ACStringMatcher_findMatchesWithNSString_withNSString_(text, query);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACStringMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "findMatchesWithNSString:withNSString:", "findMatches", "Ljava.util.List;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACStringMatcher = { 2, "StringMatcher", "im.actor.core.util", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACStringMatcher;
}

@end


#line 8
id<JavaUtilList> ACStringMatcher_findMatchesWithNSString_withNSString_(NSString *text, NSString *query) {
  ACStringMatcher_initialize();
  
#line 9
  text = [((NSString *) nil_chk(text)) lowercaseString];
  query = [((NSString *) nil_chk(query)) lowercaseString];
  
#line 12
  JavaUtilArrayList *matches = new_JavaUtilArrayList_init();
  
#line 14
  if ([((NSString *) nil_chk(text)) hasPrefix:query]) {
    [matches addWithId:new_ACStringMatch_initWithInt_withInt_(0, ((jint) [((NSString *) nil_chk(query)) length]))];
  }
  
#line 18
  jint index = [text indexOfString:JreStrcat("C$", ' ', query)];
  if (index >= 0) {
    [matches addWithId:new_ACStringMatch_initWithInt_withInt_(index + 1, ((jint) [((NSString *) nil_chk(query)) length]))];
  }
  
#line 23
  return matches;
}

void ACStringMatcher_init(ACStringMatcher *self) {
  (void) NSObject_init(self);
}

ACStringMatcher *new_ACStringMatcher_init() {
  ACStringMatcher *self = [ACStringMatcher alloc];
  ACStringMatcher_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACStringMatcher)

#pragma clang diagnostic pop
