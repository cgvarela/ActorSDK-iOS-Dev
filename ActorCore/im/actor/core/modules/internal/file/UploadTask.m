//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/Configuration.h"
#include "im/actor/core/api/ApiFileLocation.h"
#include "im/actor/core/api/rpc/RequestCommitFileUpload.h"
#include "im/actor/core/api/rpc/RequestGetFileUploadPartUrl.h"
#include "im/actor/core/api/rpc/RequestGetFileUploadUrl.h"
#include "im/actor/core/api/rpc/ResponseCommitFileUpload.h"
#include "im/actor/core/api/rpc/ResponseGetFileUploadPartUrl.h"
#include "im/actor/core/api/rpc/ResponseGetFileUploadUrl.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/file/UploadManager.h"
#include "im/actor/core/modules/internal/file/UploadTask.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/network/RpcCallback.h"
#include "im/actor/core/network/RpcException.h"
#include "im/actor/runtime/HTTP.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/Storage.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/crypto/CRC32.h"
#include "im/actor/runtime/files/FileReadCallback.h"
#include "im/actor/runtime/files/FileSystemReference.h"
#include "im/actor/runtime/files/InputFile.h"
#include "im/actor/runtime/files/OutputFile.h"
#include "im/actor/runtime/http/FileUploadCallback.h"
#include "java/lang/Runnable.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACUploadTask_SIM_BLOCKS_COUNT 4
#define ACUploadTask_NOTIFY_THROTTLE 1000

@interface ACUploadTask () {
 @public
  NSString *TAG_;
  jboolean LOG_;
  jlong rid_;
  NSString *fileName_;
  NSString *descriptor_;
  jboolean isWriteToDestProvider_;
  id<ARFileSystemReference> srcReference_;
  id<ARInputFile> inputFile_;
  id<ARFileSystemReference> destReference_;
  id<AROutputFile> outputFile_;
  ARActorRef *manager_;
  jboolean isCompleted_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint uploaded_;
  jint uploadCount_;
  jlong lastNotifyDate_;
  IOSByteArray *uploadConfig_;
  ARCRC32 *crc32_;
  jfloat currentProgress_;
}

- (void)startUpload;

- (void)checkQueue;

- (void)loadPartWithInt:(jint)blockIndex;

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)performReportProgress;

- (void)reportCompleteWithACFileReference:(ACFileReference *)location
                withARFileSystemReference:(id<ARFileSystemReference>)reference;

@end

J2OBJC_FIELD_SETTER(ACUploadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadTask, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadTask, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadTask, srcReference_, id<ARFileSystemReference>)
J2OBJC_FIELD_SETTER(ACUploadTask, inputFile_, id<ARInputFile>)
J2OBJC_FIELD_SETTER(ACUploadTask, destReference_, id<ARFileSystemReference>)
J2OBJC_FIELD_SETTER(ACUploadTask, outputFile_, id<AROutputFile>)
J2OBJC_FIELD_SETTER(ACUploadTask, manager_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACUploadTask, uploadConfig_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ACUploadTask, crc32_, ARCRC32 *)

J2OBJC_STATIC_FIELD_GETTER(ACUploadTask, SIM_BLOCKS_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(ACUploadTask, NOTIFY_THROTTLE, jint)

__attribute__((unused)) static void ACUploadTask_startUpload(ACUploadTask *self);

__attribute__((unused)) static void ACUploadTask_checkQueue(ACUploadTask *self);

__attribute__((unused)) static void ACUploadTask_loadPartWithInt_(ACUploadTask *self, jint blockIndex);

__attribute__((unused)) static void ACUploadTask_uploadPartWithInt_withInt_withByteArray_(ACUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data);

__attribute__((unused)) static void ACUploadTask_reportError(ACUploadTask *self);

__attribute__((unused)) static void ACUploadTask_reportProgressWithFloat_(ACUploadTask *self, jfloat progress);

__attribute__((unused)) static void ACUploadTask_performReportProgress(ACUploadTask *self);

__attribute__((unused)) static void ACUploadTask_reportCompleteWithACFileReference_withARFileSystemReference_(ACUploadTask *self, ACFileReference *location, id<ARFileSystemReference> reference);

@interface ACUploadTask_NotifyProgress : NSObject

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_NotifyProgress)

__attribute__((unused)) static void ACUploadTask_NotifyProgress_initWithACUploadTask_(ACUploadTask_NotifyProgress *self, ACUploadTask *outer$);

__attribute__((unused)) static ACUploadTask_NotifyProgress *new_ACUploadTask_NotifyProgress_initWithACUploadTask_(ACUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_NotifyProgress)

@interface ACUploadTask_$1 : NSObject < ACRpcCallback > {
 @public
  ACUploadTask *this$0_;
}

- (void)onResult:(ARResponseGetFileUploadUrl *)response;

- (void)onError:(ACRpcException *)e;

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$1)

J2OBJC_FIELD_SETTER(ACUploadTask_$1, this$0_, ACUploadTask *)

__attribute__((unused)) static void ACUploadTask_$1_initWithACUploadTask_(ACUploadTask_$1 *self, ACUploadTask *outer$);

__attribute__((unused)) static ACUploadTask_$1 *new_ACUploadTask_$1_initWithACUploadTask_(ACUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$1)

@interface ACUploadTask_$2 : NSObject < ACRpcCallback > {
 @public
  ACUploadTask *this$0_;
}

- (void)onResult:(ARResponseCommitFileUpload *)response;

- (void)onError:(ACRpcException *)e;

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$2)

J2OBJC_FIELD_SETTER(ACUploadTask_$2, this$0_, ACUploadTask *)

__attribute__((unused)) static void ACUploadTask_$2_initWithACUploadTask_(ACUploadTask_$2 *self, ACUploadTask *outer$);

__attribute__((unused)) static ACUploadTask_$2 *new_ACUploadTask_$2_initWithACUploadTask_(ACUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$2)

@interface ACUploadTask_$3 : NSObject < ARFileReadCallback > {
 @public
  ACUploadTask *this$0_;
  jint val$blockIndex_;
  jint val$finalSize_;
}

- (void)onFileReadWithOffset:(jint)fileOffset
                    withData:(IOSByteArray *)data
              withDataOffset:(jint)offset
                  withLength:(jint)len;

- (void)onFileReadError;

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$
                             withInt:(jint)capture$0
                             withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$3)

J2OBJC_FIELD_SETTER(ACUploadTask_$3, this$0_, ACUploadTask *)

__attribute__((unused)) static void ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(ACUploadTask_$3 *self, ACUploadTask *outer$, jint capture$0, jint capture$1);

__attribute__((unused)) static ACUploadTask_$3 *new_ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(ACUploadTask *outer$, jint capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$3)

@interface ACUploadTask_$3_$1 : NSObject < JavaLangRunnable > {
 @public
  ACUploadTask_$3 *this$0_;
  jint val$fileOffset_;
  IOSByteArray *val$data_;
}

- (void)run;

- (instancetype)initWithACUploadTask_$3:(ACUploadTask_$3 *)outer$
                                withInt:(jint)capture$0
                          withByteArray:(IOSByteArray *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$3_$1)

J2OBJC_FIELD_SETTER(ACUploadTask_$3_$1, this$0_, ACUploadTask_$3 *)
J2OBJC_FIELD_SETTER(ACUploadTask_$3_$1, val$data_, IOSByteArray *)

__attribute__((unused)) static void ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(ACUploadTask_$3_$1 *self, ACUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1);

__attribute__((unused)) static ACUploadTask_$3_$1 *new_ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(ACUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$3_$1)

@interface ACUploadTask_$3_$2 : NSObject < JavaLangRunnable > {
 @public
  ACUploadTask_$3 *this$0_;
}

- (void)run;

- (instancetype)initWithACUploadTask_$3:(ACUploadTask_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$3_$2)

J2OBJC_FIELD_SETTER(ACUploadTask_$3_$2, this$0_, ACUploadTask_$3 *)

__attribute__((unused)) static void ACUploadTask_$3_$2_initWithACUploadTask_$3_(ACUploadTask_$3_$2 *self, ACUploadTask_$3 *outer$);

__attribute__((unused)) static ACUploadTask_$3_$2 *new_ACUploadTask_$3_$2_initWithACUploadTask_$3_(ACUploadTask_$3 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$3_$2)

@interface ACUploadTask_$4 : NSObject < ACRpcCallback > {
 @public
  ACUploadTask *this$0_;
  IOSByteArray *val$data_;
  jint val$blockIndex_;
}

- (void)onResult:(ARResponseGetFileUploadPartUrl *)response;

- (void)onError:(ACRpcException *)e;

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$
                       withByteArray:(IOSByteArray *)capture$0
                             withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$4)

J2OBJC_FIELD_SETTER(ACUploadTask_$4, this$0_, ACUploadTask *)
J2OBJC_FIELD_SETTER(ACUploadTask_$4, val$data_, IOSByteArray *)

__attribute__((unused)) static void ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(ACUploadTask_$4 *self, ACUploadTask *outer$, IOSByteArray *capture$0, jint capture$1);

__attribute__((unused)) static ACUploadTask_$4 *new_ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(ACUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$4)

@interface ACUploadTask_$4_$1 : NSObject < ARFileUploadCallback > {
 @public
  ACUploadTask_$4 *this$0_;
}

- (void)onUploaded;

- (void)onUploadFailure;

- (instancetype)initWithACUploadTask_$4:(ACUploadTask_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$4_$1)

J2OBJC_FIELD_SETTER(ACUploadTask_$4_$1, this$0_, ACUploadTask_$4 *)

__attribute__((unused)) static void ACUploadTask_$4_$1_initWithACUploadTask_$4_(ACUploadTask_$4_$1 *self, ACUploadTask_$4 *outer$);

__attribute__((unused)) static ACUploadTask_$4_$1 *new_ACUploadTask_$4_$1_initWithACUploadTask_$4_(ACUploadTask_$4 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$4_$1)

@interface ACUploadTask_$4_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  ACUploadTask_$4_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithACUploadTask_$4_$1:(ACUploadTask_$4_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$4_$1_$1)

J2OBJC_FIELD_SETTER(ACUploadTask_$4_$1_$1, this$0_, ACUploadTask_$4_$1 *)

__attribute__((unused)) static void ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1_$1 *self, ACUploadTask_$4_$1 *outer$);

__attribute__((unused)) static ACUploadTask_$4_$1_$1 *new_ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$4_$1_$1)

@interface ACUploadTask_$4_$1_$2 : NSObject < JavaLangRunnable > {
 @public
  ACUploadTask_$4_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithACUploadTask_$4_$1:(ACUploadTask_$4_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadTask_$4_$1_$2)

J2OBJC_FIELD_SETTER(ACUploadTask_$4_$1_$2, this$0_, ACUploadTask_$4_$1 *)

__attribute__((unused)) static void ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1_$2 *self, ACUploadTask_$4_$1 *outer$);

__attribute__((unused)) static ACUploadTask_$4_$1_$2 *new_ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadTask_$4_$1_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"


#line 29
@implementation ACUploadTask


#line 64
- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)descriptor
                withNSString:(NSString *)fileName
              withARActorRef:(ARActorRef *)manager
         withACModuleContext:(id<ACModuleContext>)context {
  ACUploadTask_initWithLong_withNSString_withNSString_withARActorRef_withACModuleContext_(self, rid, descriptor, fileName, manager, context);
  return self;
}


#line 75
- (void)preStart {
  isWriteToDestProvider_ = ARStorage_isFsPersistent();
  
#line 78
  srcReference_ = ARStorage_fileFromDescriptorWithNSString_(descriptor_);
  if (srcReference_ == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(TAG_, @"Error during file reference creating");
    }
    ACUploadTask_reportError(self);
    return;
  }
  
#line 87
  if (isWriteToDestProvider_) {
    destReference_ = ARStorage_createTempFile();
    if (destReference_ == nil) {
      if (LOG_) {
        ARLog_wWithNSString_withNSString_(TAG_, @"Error during file dest reference creating");
      }
      ACUploadTask_reportError(self);
      return;
    }
  }
  
#line 98
  inputFile_ = [((id<ARFileSystemReference>) nil_chk(srcReference_)) openRead];
  if (inputFile_ == nil) {
    if (LOG_) {
      ARLog_wWithNSString_withNSString_(TAG_, @"Error during file open");
    }
    ACUploadTask_reportError(self);
    return;
  }
  
#line 107
  if (isWriteToDestProvider_) {
    outputFile_ = [((id<ARFileSystemReference>) nil_chk(destReference_)) openWriteWithSize:[srcReference_ getSize]];
    if (outputFile_ == nil) {
      [((id<ARInputFile>) nil_chk(inputFile_)) close];
      if (LOG_) {
        ARLog_wWithNSString_withNSString_(TAG_, @"Error during dest file open");
      }
      ACUploadTask_reportError(self);
      return;
    }
  }
  
#line 119
  crc32_ = new_ARCRC32_init();
  
#line 121
  ACUploadTask_startUpload(self);
}


#line 125
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACUploadTask_NotifyProgress class]]) {
    ACUploadTask_performReportProgress(self);
  }
  else {
    
#line 129
    [super onReceiveWithId:message];
  }
}


#line 133
- (void)startUpload {
  ACUploadTask_startUpload(self);
}


#line 165
- (void)checkQueue {
  ACUploadTask_checkQueue(self);
}


#line 220
- (void)loadPartWithInt:(jint)blockIndex {
  ACUploadTask_loadPartWithInt_(self, blockIndex);
}


#line 284
- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data {
  ACUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, offset, data);
}


#line 333
- (void)reportError {
  ACUploadTask_reportError(self);
}


#line 344
- (void)reportProgressWithFloat:(jfloat)progress {
  ACUploadTask_reportProgressWithFloat_(self, progress);
}


#line 362
- (void)performReportProgress {
  ACUploadTask_performReportProgress(self);
}


#line 369
- (void)reportCompleteWithACFileReference:(ACFileReference *)location
                withARFileSystemReference:(id<ARFileSystemReference>)reference {
  ACUploadTask_reportCompleteWithACFileReference_withARFileSystemReference_(self, location, reference);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:withNSString:withARActorRef:withACModuleContext:", "UploadTask", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
    { "startUpload", NULL, "V", 0x2, NULL, NULL },
    { "checkQueue", NULL, "V", 0x2, NULL, NULL },
    { "loadPartWithInt:", "loadPart", "V", 0x2, NULL, NULL },
    { "uploadPartWithInt:withInt:withByteArray:", "uploadPart", "V", 0x2, NULL, NULL },
    { "reportError", NULL, "V", 0x2, NULL, NULL },
    { "reportProgressWithFloat:", "reportProgress", "V", 0x2, NULL, NULL },
    { "performReportProgress", NULL, "V", 0x2, NULL, NULL },
    { "reportCompleteWithACFileReference:withARFileSystemReference:", "reportComplete", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SIM_BLOCKS_COUNT", "SIM_BLOCKS_COUNT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACUploadTask_SIM_BLOCKS_COUNT },
    { "NOTIFY_THROTTLE", "NOTIFY_THROTTLE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACUploadTask_NOTIFY_THROTTLE },
    { "TAG_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "LOG_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "descriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isWriteToDestProvider_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "srcReference_", NULL, 0x2, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "inputFile_", NULL, 0x2, "Lim.actor.runtime.files.InputFile;", NULL, NULL, .constantValue.asLong = 0 },
    { "destReference_", NULL, 0x2, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "outputFile_", NULL, 0x2, "Lim.actor.runtime.files.OutputFile;", NULL, NULL, .constantValue.asLong = 0 },
    { "manager_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "isCompleted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "blockSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blocksCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextBlock_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "uploaded_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "uploadCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastNotifyDate_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "uploadConfig_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "crc32_", NULL, 0x2, "Lim.actor.runtime.crypto.CRC32;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentProgress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.file.UploadTask$NotifyProgress;"};
  static const J2ObjcClassInfo _ACUploadTask = { 2, "UploadTask", "im.actor.core.modules.internal.file", NULL, 0x1, 11, methods, 23, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ACUploadTask;
}

@end


#line 64
void ACUploadTask_initWithLong_withNSString_withNSString_withARActorRef_withACModuleContext_(ACUploadTask *self, jlong rid, NSString *descriptor, NSString *fileName, ARActorRef *manager, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->isWriteToDestProvider_ =
#line 41
  false;
  self->isCompleted_ =
#line 50
  false;
  self->blockSize_ =
#line 52
  128 * 1024;
  self->nextBlock_ =
#line 54
  0;
  
#line 66
  self->LOG_ = [((ACConfiguration *) nil_chk([((id<ACModuleContext>) nil_chk(context)) getConfiguration])) isEnableFilesLogging];
  self->rid_ = rid;
  self->fileName_ = fileName;
  self->descriptor_ = descriptor;
  self->manager_ = manager;
  self->TAG_ = JreStrcat("$JC", @"UploadTask{", rid, '}');
}


#line 64
ACUploadTask *new_ACUploadTask_initWithLong_withNSString_withNSString_withARActorRef_withACModuleContext_(jlong rid, NSString *descriptor, NSString *fileName, ARActorRef *manager, id<ACModuleContext> context) {
  ACUploadTask *self = [ACUploadTask alloc];
  ACUploadTask_initWithLong_withNSString_withNSString_withARActorRef_withACModuleContext_(self, rid, descriptor, fileName, manager, context);
  return self;
}


#line 133
void ACUploadTask_startUpload(ACUploadTask *self) {
  self->blocksCount_ = [((id<ARFileSystemReference>) nil_chk(self->srcReference_)) getSize] / self->blockSize_;
  if ([self->srcReference_ getSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  
#line 139
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting uploading ", self->blocksCount_, @" blocks"));
    ARLog_dWithNSString_withNSString_(self->TAG_, @"Requesting upload config...");
  }
  
#line 144
  [self requestWithACRequest:new_ARRequestGetFileUploadUrl_initWithInt_([self->srcReference_ getSize]) withACRpcCallback:new_ACUploadTask_$1_initWithACUploadTask_(self)];
}


#line 165
void ACUploadTask_checkQueue(ACUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  
#line 170
  if (self->nextBlock_ == self->blocksCount_ && self->uploadCount_ == 0) {
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(self->TAG_, @"Completing...");
    }
    jlong crc = [((ARCRC32 *) nil_chk(self->crc32_)) getValue];
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$J", @"Src #", crc));
      
#line 178
      ARLog_dWithNSString_withNSString_(self->TAG_, @"Closing files...");
    }
    [((id<ARInputFile>) nil_chk(self->inputFile_)) close];
    if (self->isWriteToDestProvider_) {
      [((id<AROutputFile>) nil_chk(self->outputFile_)) close];
    }
    
#line 185
    [self requestWithACRequest:new_ARRequestCommitFileUpload_initWithByteArray_withNSString_(self->uploadConfig_, self->fileName_) withACRpcCallback:new_ACUploadTask_$2_initWithACUploadTask_(self)];
    
#line 212
    return;
  }
  
#line 215
  if (self->nextBlock_ < self->blocksCount_ && self->uploadCount_ < ACUploadTask_SIM_BLOCKS_COUNT) {
    ACUploadTask_loadPartWithInt_(self, self->nextBlock_++);
  }
}


#line 220
void ACUploadTask_loadPartWithInt_(ACUploadTask *self, jint blockIndex) {
  jint size = self->blockSize_;
  jint fileOffset = blockIndex * self->blockSize_;
  if ((blockIndex + 1) * self->blockSize_ > [((id<ARFileSystemReference>) nil_chk(self->srcReference_)) getSize]) {
    size = [self->srcReference_ getSize] - blockIndex * self->blockSize_;
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:size];
  
#line 228
  jint finalSize = size;
  
#line 230
  [((id<ARInputFile>) nil_chk(self->inputFile_)) readWithOffset:fileOffset withData:data withDataOffset:0 withLength:size withCallback:new_ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(self, blockIndex, finalSize)];
}


#line 284
void ACUploadTask_uploadPartWithInt_withInt_withByteArray_(ACUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data) {
  [self requestWithACRequest:new_ARRequestGetFileUploadPartUrl_initWithInt_withInt_withByteArray_(blockIndex, self->blockSize_, self->uploadConfig_) withACRpcCallback:new_ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(self, data, blockIndex)];
}


#line 333
void ACUploadTask_reportError(ACUploadTask *self) {
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, @"Reporting error");
  }
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = true;
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACUploadManager_UploadTaskError_initWithLong_(self->rid_)];
}

void ACUploadTask_reportProgressWithFloat_(ACUploadTask *self, jfloat progress) {
  if (self->isCompleted_) {
    return;
  }
  
#line 349
  if (progress > self->currentProgress_) {
    self->currentProgress_ = progress;
  }
  
#line 353
  jlong delta = ARRuntime_getActorTime() - self->lastNotifyDate_;
  if (delta > ACUploadTask_NOTIFY_THROTTLE) {
    self->lastNotifyDate_ = ARRuntime_getActorTime();
    [((ARActorRef *) nil_chk([self self__])) sendWithId:new_ACUploadTask_NotifyProgress_initWithACUploadTask_(self)];
  }
  else {
    
#line 358
    [((ARActorRef *) nil_chk([self self__])) sendOnceWithId:new_ACUploadTask_NotifyProgress_initWithACUploadTask_(self) withLong:delta];
  }
}


#line 362
void ACUploadTask_performReportProgress(ACUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACUploadManager_UploadTaskProgress_initWithLong_withFloat_(self->rid_, self->currentProgress_)];
}

void ACUploadTask_reportCompleteWithACFileReference_withARFileSystemReference_(ACUploadTask *self, ACFileReference *location, id<ARFileSystemReference> reference) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = true;
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACUploadManager_UploadTaskComplete_initWithLong_withACFileReference_withARFileSystemReference_(self->rid_, location, reference)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"


#line 377
@implementation ACUploadTask_NotifyProgress

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$ {
  ACUploadTask_NotifyProgress_initWithACUploadTask_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACUploadTask:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACUploadTask_NotifyProgress = { 2, "NotifyProgress", "im.actor.core.modules.internal.file", "UploadTask", 0x2, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadTask_NotifyProgress;
}

@end

void ACUploadTask_NotifyProgress_initWithACUploadTask_(ACUploadTask_NotifyProgress *self, ACUploadTask *outer$) {
  (void) NSObject_init(self);
}

ACUploadTask_NotifyProgress *new_ACUploadTask_NotifyProgress_initWithACUploadTask_(ACUploadTask *outer$) {
  ACUploadTask_NotifyProgress *self = [ACUploadTask_NotifyProgress alloc];
  ACUploadTask_NotifyProgress_initWithACUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_NotifyProgress)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$1


#line 147
- (void)onResult:(ARResponseGetFileUploadUrl *)response {
  if (this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config loaded");
  }
  this$0_->uploadConfig_ = [((ARResponseGetFileUploadUrl *) nil_chk(response)) getUploadKey];
  ACUploadTask_checkQueue(this$0_);
}


#line 156
- (void)onError:(ACRpcException *)e {
  if (this$0_->LOG_) {
    ARLog_wWithNSString_withNSString_(this$0_->TAG_, @"Upload config load error");
  }
  ACUploadTask_reportError(this$0_);
}

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$ {
  ACUploadTask_$1_initWithACUploadTask_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onResult:", "onResult", "V", 0x1, NULL, NULL },
    { "onError:", "onError", "V", 0x1, NULL, NULL },
    { "initWithACUploadTask:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask", "startUpload" };
  static const J2ObjcClassInfo _ACUploadTask_$1 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/core/network/RpcCallback<Lim/actor/core/api/rpc/ResponseGetFileUploadUrl;>;" };
  return &_ACUploadTask_$1;
}

@end

void ACUploadTask_$1_initWithACUploadTask_(ACUploadTask_$1 *self, ACUploadTask *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$1 *new_ACUploadTask_$1_initWithACUploadTask_(ACUploadTask *outer$) {
  ACUploadTask_$1 *self = [ACUploadTask_$1 alloc];
  ACUploadTask_$1_initWithACUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$2


#line 187
- (void)onResult:(ARResponseCommitFileUpload *)response {
  if (this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload completed...");
  }
  
#line 192
  ACFileReference *location = new_ACFileReference_initWithARApiFileLocation_withNSString_withInt_([((ARResponseCommitFileUpload *) nil_chk(response)) getUploadedFileLocation], this$0_->fileName_,
#line 193
  [((id<ARFileSystemReference>) nil_chk(this$0_->srcReference_)) getSize]);
  
#line 195
  if (this$0_->isWriteToDestProvider_) {
    id<ARFileSystemReference> reference = ARStorage_commitTempFileWithARFileSystemReference_withLong_withNSString_(this$0_->destReference_, [location getFileId],
#line 197
    [location getFileName]);
    ACUploadTask_reportCompleteWithACFileReference_withARFileSystemReference_(this$0_, location, reference);
  }
  else {
    
#line 200
    ACUploadTask_reportCompleteWithACFileReference_withARFileSystemReference_(this$0_, location, this$0_->srcReference_);
  }
}


#line 205
- (void)onError:(ACRpcException *)e {
  if (this$0_->LOG_) {
    ARLog_wWithNSString_withNSString_(this$0_->TAG_, @"Upload complete error");
  }
  ACUploadTask_reportError(this$0_);
}

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$ {
  ACUploadTask_$2_initWithACUploadTask_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onResult:", "onResult", "V", 0x1, NULL, NULL },
    { "onError:", "onError", "V", 0x1, NULL, NULL },
    { "initWithACUploadTask:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask", "checkQueue" };
  static const J2ObjcClassInfo _ACUploadTask_$2 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/core/network/RpcCallback<Lim/actor/core/api/rpc/ResponseCommitFileUpload;>;" };
  return &_ACUploadTask_$2;
}

@end

void ACUploadTask_$2_initWithACUploadTask_(ACUploadTask_$2 *self, ACUploadTask *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$2 *new_ACUploadTask_$2_initWithACUploadTask_(ACUploadTask *outer$) {
  ACUploadTask_$2 *self = [ACUploadTask_$2 alloc];
  ACUploadTask_$2_initWithACUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$3


#line 232
- (void)onFileReadWithOffset:(jint)fileOffset
                    withData:(IOSByteArray *)data
              withDataOffset:(jint)offset
                  withLength:(jint)len {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(self, fileOffset, data)];
}


#line 267
- (void)onFileReadError {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACUploadTask_$3_$2_initWithACUploadTask_$3_(self)];
}

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$
                             withInt:(jint)capture$0
                             withInt:(jint)capture$1 {
  ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onFileReadWithOffset:withData:withDataOffset:withLength:", "onFileRead", "V", 0x1, NULL, NULL },
    { "onFileReadError", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask:withInt:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$blockIndex_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "val$finalSize_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask", "loadPartWithInt:" };
  static const J2ObjcClassInfo _ACUploadTask_$3 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask", 0x8008, 3, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$3;
}

@end

void ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(ACUploadTask_$3 *self, ACUploadTask *outer$, jint capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$blockIndex_ = capture$0;
  self->val$finalSize_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadTask_$3 *new_ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(ACUploadTask *outer$, jint capture$0, jint capture$1) {
  ACUploadTask_$3 *self = [ACUploadTask_$3 alloc];
  ACUploadTask_$3_initWithACUploadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$3)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$3_$1


#line 235
- (void)run {
  if (this$0_->this$0_->isCompleted_) {
    return;
  }
  if (this$0_->this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->val$blockIndex_, @" read"));
  }
  
#line 243
  if (this$0_->this$0_->isWriteToDestProvider_) {
    if (![((id<AROutputFile>) nil_chk(this$0_->this$0_->outputFile_)) writeWithOffset:val$fileOffset_ withData:val$data_ withDataOffset:0 withLength:this$0_->val$finalSize_]) {
      if (this$0_->this$0_->LOG_) {
        ARLog_wWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"write #", this$0_->val$blockIndex_, @" error"));
      }
      ACUploadTask_reportError(this$0_->this$0_);
      return;
    }
  }
  
#line 253
  [((ARCRC32 *) nil_chk(this$0_->this$0_->crc32_)) updateWithByteArray:val$data_ withInt:0 withInt:this$0_->val$finalSize_];
  
#line 255
  if (this$0_->this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I", @"Starting block upload #", this$0_->val$blockIndex_));
  }
  
#line 259
  this$0_->this$0_->uploadCount_++;
  ACUploadTask_uploadPartWithInt_withInt_withByteArray_(this$0_->this$0_, this$0_->val$blockIndex_, val$fileOffset_, val$data_);
  ACUploadTask_checkQueue(this$0_->this$0_);
}

- (instancetype)initWithACUploadTask_$3:(ACUploadTask_$3 *)outer$
                                withInt:(jint)capture$0
                          withByteArray:(IOSByteArray *)capture$1 {
  ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask_$3:withInt:withByteArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask$3;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$fileOffset_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "val$data_", NULL, 0x1012, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask_$3", "onFileReadWithOffset:withData:withDataOffset:withLength:" };
  static const J2ObjcClassInfo _ACUploadTask_$3_$1 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask$", 0x8008, 2, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$3_$1;
}

@end

void ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(ACUploadTask_$3_$1 *self, ACUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) {
  self->this$0_ = outer$;
  self->val$fileOffset_ = capture$0;
  self->val$data_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadTask_$3_$1 *new_ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(ACUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) {
  ACUploadTask_$3_$1 *self = [ACUploadTask_$3_$1 alloc];
  ACUploadTask_$3_$1_initWithACUploadTask_$3_withInt_withByteArray_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$3_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$3_$2


#line 270
- (void)run {
  if (this$0_->this$0_->isCompleted_) {
    return;
  }
  if (this$0_->this$0_->LOG_) {
    ARLog_wWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->val$blockIndex_, @" read failure"));
  }
  ACUploadTask_reportError(this$0_->this$0_);
}

- (instancetype)initWithACUploadTask_$3:(ACUploadTask_$3 *)outer$ {
  ACUploadTask_$3_$2_initWithACUploadTask_$3_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask_$3:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask$3;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask_$3", "onFileReadError" };
  static const J2ObjcClassInfo _ACUploadTask_$3_$2 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask$", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$3_$2;
}

@end

void ACUploadTask_$3_$2_initWithACUploadTask_$3_(ACUploadTask_$3_$2 *self, ACUploadTask_$3 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$3_$2 *new_ACUploadTask_$3_$2_initWithACUploadTask_$3_(ACUploadTask_$3 *outer$) {
  ACUploadTask_$3_$2 *self = [ACUploadTask_$3_$2 alloc];
  ACUploadTask_$3_$2_initWithACUploadTask_$3_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$3_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$4


#line 288
- (void)onResult:(ARResponseGetFileUploadPartUrl *)response {
  ARHTTP_putMethodWithNSString_withByteArray_withARFileUploadCallback_([((ARResponseGetFileUploadPartUrl *) nil_chk(response)) getUrl], val$data_, new_ACUploadTask_$4_$1_initWithACUploadTask_$4_(self));
}


#line 324
- (void)onError:(ACRpcException *)e {
  if (this$0_->LOG_) {
    ARLog_wWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$I$", @"Get Block #", val$blockIndex_, @" url failure"));
  }
  ACUploadTask_reportError(this$0_);
}

- (instancetype)initWithACUploadTask:(ACUploadTask *)outer$
                       withByteArray:(IOSByteArray *)capture$0
                             withInt:(jint)capture$1 {
  ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onResult:", "onResult", "V", 0x1, NULL, NULL },
    { "onError:", "onError", "V", 0x1, NULL, NULL },
    { "initWithACUploadTask:withByteArray:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$data_", NULL, 0x1012, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "val$blockIndex_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask", "uploadPartWithInt:withInt:withByteArray:" };
  static const J2ObjcClassInfo _ACUploadTask_$4 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask", 0x8008, 3, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/core/network/RpcCallback<Lim/actor/core/api/rpc/ResponseGetFileUploadPartUrl;>;" };
  return &_ACUploadTask_$4;
}

@end

void ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(ACUploadTask_$4 *self, ACUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$data_ = capture$0;
  self->val$blockIndex_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadTask_$4 *new_ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(ACUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) {
  ACUploadTask_$4 *self = [ACUploadTask_$4 alloc];
  ACUploadTask_$4_initWithACUploadTask_withByteArray_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$4)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$4_$1


#line 291
- (void)onUploaded {
  [((ARActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:new_ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(self)];
}


#line 309
- (void)onUploadFailure {
  [((ARActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:new_ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(self)];
}

- (instancetype)initWithACUploadTask_$4:(ACUploadTask_$4 *)outer$ {
  ACUploadTask_$4_$1_initWithACUploadTask_$4_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onUploaded", NULL, "V", 0x1, NULL, NULL },
    { "onUploadFailure", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask_$4:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask$4;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask_$4", "onResult:" };
  static const J2ObjcClassInfo _ACUploadTask_$4_$1 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask$", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$4_$1;
}

@end

void ACUploadTask_$4_$1_initWithACUploadTask_$4_(ACUploadTask_$4_$1 *self, ACUploadTask_$4 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$4_$1 *new_ACUploadTask_$4_$1_initWithACUploadTask_$4_(ACUploadTask_$4 *outer$) {
  ACUploadTask_$4_$1 *self = [ACUploadTask_$4_$1 alloc];
  ACUploadTask_$4_$1_initWithACUploadTask_$4_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$4_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$4_$1_$1


#line 294
- (void)run {
  if (this$0_->this$0_->this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->this$0_->val$blockIndex_, @" uploaded"));
  }
  this$0_->this$0_->this$0_->uploadCount_--;
  this$0_->this$0_->this$0_->uploaded_++;
  
#line 301
  ACUploadTask_reportProgressWithFloat_(this$0_->this$0_->this$0_, this$0_->this$0_->this$0_->uploaded_ / (jfloat) this$0_->this$0_->this$0_->blocksCount_);
  
#line 303
  ACUploadTask_checkQueue(this$0_->this$0_->this$0_);
}

- (instancetype)initWithACUploadTask_$4_$1:(ACUploadTask_$4_$1 *)outer$ {
  ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask_$4_$1:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask$4$1;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask_$4_$1", "onUploaded" };
  static const J2ObjcClassInfo _ACUploadTask_$4_$1_$1 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask$$", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$4_$1_$1;
}

@end

void ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1_$1 *self, ACUploadTask_$4_$1 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$4_$1_$1 *new_ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1 *outer$) {
  ACUploadTask_$4_$1_$1 *self = [ACUploadTask_$4_$1_$1 alloc];
  ACUploadTask_$4_$1_$1_initWithACUploadTask_$4_$1_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$4_$1_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadTask.java"

@implementation ACUploadTask_$4_$1_$2


#line 312
- (void)run {
  if (this$0_->this$0_->this$0_->LOG_) {
    ARLog_wWithNSString_withNSString_(this$0_->this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->this$0_->val$blockIndex_, @" upload failure"));
  }
  ACUploadTask_reportError(this$0_->this$0_->this$0_);
}

- (instancetype)initWithACUploadTask_$4_$1:(ACUploadTask_$4_$1 *)outer$ {
  ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadTask_$4_$1:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadTask$4$1;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadTask_$4_$1", "onUploadFailure" };
  static const J2ObjcClassInfo _ACUploadTask_$4_$1_$2 = { 2, "", "im.actor.core.modules.internal.file", "UploadTask$$", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadTask_$4_$1_$2;
}

@end

void ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1_$2 *self, ACUploadTask_$4_$1 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACUploadTask_$4_$1_$2 *new_ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(ACUploadTask_$4_$1 *outer$) {
  ACUploadTask_$4_$1_$2 *self = [ACUploadTask_$4_$1_$2 alloc];
  ACUploadTask_$4_$1_$2_initWithACUploadTask_$4_$1_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadTask_$4_$1_$2)

#pragma clang diagnostic pop
