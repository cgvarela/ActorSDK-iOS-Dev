//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/Configuration.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/FilesModule.h"
#include "im/actor/core/modules/internal/file/DownloadManager.h"
#include "im/actor/core/modules/internal/file/DownloadTask.h"
#include "im/actor/core/modules/internal/file/entity/Downloaded.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/modules/utils/RandomUtils.h"
#include "im/actor/core/viewmodel/FileCallback.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/Storage.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorCreator.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/actors/messages/PoisonPill.h"
#include "im/actor/runtime/files/FileSystemReference.h"
#include "im/actor/runtime/storage/KeyValueEngine.h"
#include <j2objc/java/lang/Runnable.h>
#include <j2objc/java/util/ArrayList.h>

@class ACDownloadManager_QueueItem;

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACDownloadManager_SIM_MAX_DOWNLOADS 2

@interface ACDownloadManager () {
 @public
  jboolean LOG_;
  JavaUtilArrayList *queue_;
  id<ARKeyValueEngine> downloaded_;
}

- (void)checkQueue;

- (ACDownloadManager_QueueItem *)findItemWithLong:(jlong)id_;

- (void)promoteWithLong:(jlong)id_;

@end

J2OBJC_FIELD_SETTER(ACDownloadManager, queue_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ACDownloadManager, downloaded_, id<ARKeyValueEngine>)

static NSString *ACDownloadManager_TAG_ = @"DownloadManager";
J2OBJC_STATIC_FIELD_GETTER(ACDownloadManager, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ACDownloadManager, SIM_MAX_DOWNLOADS, jint)

__attribute__((unused)) static void ACDownloadManager_checkQueue(ACDownloadManager *self);

__attribute__((unused)) static ACDownloadManager_QueueItem *ACDownloadManager_findItemWithLong_(ACDownloadManager *self, jlong id_);

__attribute__((unused)) static void ACDownloadManager_promoteWithLong_(ACDownloadManager *self, jlong id_);

@interface ACDownloadManager_QueueItem : NSObject {
 @public
  ACFileReference *fileReference_;
  jboolean isStopped_;
  JavaUtilArrayList *callbacks_;
  jboolean isStarted_;
  jfloat progress_;
  ARActorRef *taskRef_;
}

- (instancetype)initWithACDownloadManager:(ACDownloadManager *)outer$
                      withACFileReference:(ACFileReference *)fileReference;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_QueueItem)

J2OBJC_FIELD_SETTER(ACDownloadManager_QueueItem, fileReference_, ACFileReference *)
J2OBJC_FIELD_SETTER(ACDownloadManager_QueueItem, callbacks_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ACDownloadManager_QueueItem, taskRef_, ARActorRef *)

__attribute__((unused)) static void ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(ACDownloadManager_QueueItem *self, ACDownloadManager *outer$, ACFileReference *fileReference);

__attribute__((unused)) static ACDownloadManager_QueueItem *new_ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(ACDownloadManager *outer$, ACFileReference *fileReference) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_QueueItem)

@interface ACDownloadManager_RequestState () {
 @public
  jlong fileId_;
  id<ACFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACDownloadManager_RequestState, callback_, id<ACFileCallback>)

@interface ACDownloadManager_BindDownload () {
 @public
  ACFileReference *fileReference_;
  jboolean isAutostart_;
  id<ACFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACDownloadManager_BindDownload, fileReference_, ACFileReference *)
J2OBJC_FIELD_SETTER(ACDownloadManager_BindDownload, callback_, id<ACFileCallback>)

@interface ACDownloadManager_StartDownload () {
 @public
  ACFileReference *fileReference_;
}

@end

J2OBJC_FIELD_SETTER(ACDownloadManager_StartDownload, fileReference_, ACFileReference *)

@interface ACDownloadManager_CancelDownload () {
 @public
  jlong fileId_;
}

@end

@interface ACDownloadManager_UnbindDownload () {
 @public
  jlong fileId_;
  jboolean isAutocancel_;
  id<ACFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACDownloadManager_UnbindDownload, callback_, id<ACFileCallback>)

@interface ACDownloadManager_OnDownloadProgress () {
 @public
  jlong fileId_;
  jfloat progress_;
}

@end

@interface ACDownloadManager_OnDownloaded () {
 @public
  jlong fileId_;
  id<ARFileSystemReference> reference_;
}

@end

J2OBJC_FIELD_SETTER(ACDownloadManager_OnDownloaded, reference_, id<ARFileSystemReference>)

@interface ACDownloadManager_OnDownloadedError () {
 @public
  jlong fileId_;
}

@end

@interface ACDownloadManager_$1 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
  id<ARFileSystemReference> val$fileSystemReference_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$1)

J2OBJC_FIELD_SETTER(ACDownloadManager_$1, val$callback_, id<ACFileCallback>)
J2OBJC_FIELD_SETTER(ACDownloadManager_$1, val$fileSystemReference_, id<ARFileSystemReference>)

__attribute__((unused)) static void ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$1 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1);

__attribute__((unused)) static ACDownloadManager_$1 *new_ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$1)

@interface ACDownloadManager_$2 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$2)

J2OBJC_FIELD_SETTER(ACDownloadManager_$2, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$2_initWithACFileCallback_(ACDownloadManager_$2 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$2 *new_ACDownloadManager_$2_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$2)

@interface ACDownloadManager_$3 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$3)

J2OBJC_FIELD_SETTER(ACDownloadManager_$3, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$3_initWithACFileCallback_withFloat_(ACDownloadManager_$3 *self, id<ACFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACDownloadManager_$3 *new_ACDownloadManager_$3_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$3)

@interface ACDownloadManager_$4 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$4)

J2OBJC_FIELD_SETTER(ACDownloadManager_$4, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$4_initWithACFileCallback_(ACDownloadManager_$4 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$4 *new_ACDownloadManager_$4_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$4)

@interface ACDownloadManager_$5 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$5)

J2OBJC_FIELD_SETTER(ACDownloadManager_$5, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$5_initWithACFileCallback_(ACDownloadManager_$5 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$5 *new_ACDownloadManager_$5_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$5)

@interface ACDownloadManager_$6 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
  id<ARFileSystemReference> val$fileSystemReference_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$6)

J2OBJC_FIELD_SETTER(ACDownloadManager_$6, val$callback_, id<ACFileCallback>)
J2OBJC_FIELD_SETTER(ACDownloadManager_$6, val$fileSystemReference_, id<ARFileSystemReference>)

__attribute__((unused)) static void ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$6 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1);

__attribute__((unused)) static ACDownloadManager_$6 *new_ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$6)

@interface ACDownloadManager_$7 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$7)

J2OBJC_FIELD_SETTER(ACDownloadManager_$7, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$7_initWithACFileCallback_(ACDownloadManager_$7 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$7 *new_ACDownloadManager_$7_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$7)

@interface ACDownloadManager_$8 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$8)

J2OBJC_FIELD_SETTER(ACDownloadManager_$8, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$8_initWithACFileCallback_(ACDownloadManager_$8 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$8 *new_ACDownloadManager_$8_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$8)

@interface ACDownloadManager_$9 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$9)

J2OBJC_FIELD_SETTER(ACDownloadManager_$9, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$9_initWithACFileCallback_(ACDownloadManager_$9 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$9 *new_ACDownloadManager_$9_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$9)

@interface ACDownloadManager_$10 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$10)

J2OBJC_FIELD_SETTER(ACDownloadManager_$10, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$10_initWithACFileCallback_withFloat_(ACDownloadManager_$10 *self, id<ACFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACDownloadManager_$10 *new_ACDownloadManager_$10_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$10)

@interface ACDownloadManager_$11 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$11)

J2OBJC_FIELD_SETTER(ACDownloadManager_$11, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$11_initWithACFileCallback_(ACDownloadManager_$11 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$11 *new_ACDownloadManager_$11_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$11)

@interface ACDownloadManager_$12 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$12)

J2OBJC_FIELD_SETTER(ACDownloadManager_$12, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$12_initWithACFileCallback_(ACDownloadManager_$12 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$12 *new_ACDownloadManager_$12_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$12)

@interface ACDownloadManager_$13 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$13)

J2OBJC_FIELD_SETTER(ACDownloadManager_$13, val$callback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$13_initWithACFileCallback_(ACDownloadManager_$13 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$13 *new_ACDownloadManager_$13_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$13)

@interface ACDownloadManager_$14 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$c_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$14)

J2OBJC_FIELD_SETTER(ACDownloadManager_$14, val$c_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$14_initWithACFileCallback_(ACDownloadManager_$14 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$14 *new_ACDownloadManager_$14_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$14)

@interface ACDownloadManager_$15 : NSObject < ARActorCreator > {
 @public
  ACDownloadManager *this$0_;
  ACDownloadManager_QueueItem *val$finalPendingQueue_;
}

- (ACDownloadTask *)create;

- (instancetype)initWithACDownloadManager:(ACDownloadManager *)outer$
          withACDownloadManager_QueueItem:(ACDownloadManager_QueueItem *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$15)

J2OBJC_FIELD_SETTER(ACDownloadManager_$15, this$0_, ACDownloadManager *)
J2OBJC_FIELD_SETTER(ACDownloadManager_$15, val$finalPendingQueue_, ACDownloadManager_QueueItem *)

__attribute__((unused)) static void ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(ACDownloadManager_$15 *self, ACDownloadManager *outer$, ACDownloadManager_QueueItem *capture$0);

__attribute__((unused)) static ACDownloadManager_$15 *new_ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(ACDownloadManager *outer$, ACDownloadManager_QueueItem *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$15)

@interface ACDownloadManager_$16 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$fileCallback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$16)

J2OBJC_FIELD_SETTER(ACDownloadManager_$16, val$fileCallback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$16_initWithACFileCallback_withFloat_(ACDownloadManager_$16 *self, id<ACFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACDownloadManager_$16 *new_ACDownloadManager_$16_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$16)

@interface ACDownloadManager_$17 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$fileCallback_;
  id<ARFileSystemReference> val$reference_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$17)

J2OBJC_FIELD_SETTER(ACDownloadManager_$17, val$fileCallback_, id<ACFileCallback>)
J2OBJC_FIELD_SETTER(ACDownloadManager_$17, val$reference_, id<ARFileSystemReference>)

__attribute__((unused)) static void ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$17 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1);

__attribute__((unused)) static ACDownloadManager_$17 *new_ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$17)

@interface ACDownloadManager_$18 : NSObject < JavaLangRunnable > {
 @public
  id<ACFileCallback> val$fileCallback_;
}

- (void)run;

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadManager_$18)

J2OBJC_FIELD_SETTER(ACDownloadManager_$18, val$fileCallback_, id<ACFileCallback>)

__attribute__((unused)) static void ACDownloadManager_$18_initWithACFileCallback_(ACDownloadManager_$18 *self, id<ACFileCallback> capture$0);

__attribute__((unused)) static ACDownloadManager_$18 *new_ACDownloadManager_$18_initWithACFileCallback_(id<ACFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadManager_$18)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 24
@implementation ACDownloadManager


#line 35
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACDownloadManager_initWithACModuleContext_(self, context);
  return self;
}

- (void)preStart {
  [super preStart];
  downloaded_ = [((ACFilesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getFilesModule])) getDownloadedEngine];
  LOG_ = [((ACConfiguration *) nil_chk([self config])) isEnableFilesLogging];
}


#line 48
- (void)requestStateWithLong:(jlong)fileId
          withACFileCallback:(id<ACFileCallback>)callback {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"Requesting state file #", fileId));
  }
  
#line 53
  ACDownloaded *downloaded1 = [((id<ARKeyValueEngine>) nil_chk(downloaded_)) getValueWithKey:fileId];
  if (downloaded1 != nil) {
    
#line 56
    id<ARFileSystemReference> reference = ARStorage_fileFromDescriptorWithNSString_([downloaded1 getDescriptor]);
    jboolean isExist = [((id<ARFileSystemReference>) nil_chk(reference)) isExist];
    jint fileSize = [reference getSize];
    if (isExist && fileSize == [downloaded1 getFileSize]) {
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Downloaded");
      }
      id<ARFileSystemReference> fileSystemReference = ARStorage_fileFromDescriptorWithNSString_([downloaded1 getDescriptor]);
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(callback, fileSystemReference));
      
#line 70
      return;
    }
    else {
      
#line 72
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- File is corrupted");
        if (!isExist) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- File not found");
        }
        if (fileSize != [downloaded1 getFileSize]) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$I$I", @"- Incorrect file size. Expected: ", [downloaded1 getFileSize], @", got: ", fileSize));
        }
      }
      [downloaded_ removeItemWithKey:[downloaded1 getFileId]];
    }
  }
  
#line 85
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$2_initWithACFileCallback_(callback));
  }
  else {
    
#line 95
    if (queueItem->isStarted_) {
      jfloat progress = queueItem->progress_;
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$3_initWithACFileCallback_withFloat_(callback, progress));
    }
    else
#line 104
    if (queueItem->isStopped_) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$4_initWithACFileCallback_(callback));
    }
    else {
      
#line 112
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$5_initWithACFileCallback_(callback));
    }
  }
}


#line 122
- (void)bindDownloadWithACFileReference:(ACFileReference *)fileReference
                            withBoolean:(jboolean)autoStart
                     withACFileCallback:(id<ACFileCallback>)callback {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"Binding file #", [((ACFileReference *) nil_chk(fileReference)) getFileId]));
  }
  ACDownloaded *downloaded1 = [((id<ARKeyValueEngine>) nil_chk(downloaded_)) getValueWithKey:[((ACFileReference *) nil_chk(fileReference)) getFileId]];
  if (downloaded1 != nil) {
    id<ARFileSystemReference> reference = ARStorage_fileFromDescriptorWithNSString_([downloaded1 getDescriptor]);
    jboolean isExist = [((id<ARFileSystemReference>) nil_chk(reference)) isExist];
    jint fileSize = [reference getSize];
    if (isExist && fileSize == [downloaded1 getFileSize]) {
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Downloaded");
      }
      id<ARFileSystemReference> fileSystemReference = ARStorage_fileFromDescriptorWithNSString_([downloaded1 getDescriptor]);
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(callback, fileSystemReference));
      
#line 142
      return;
    }
    else {
      
#line 144
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- File is corrupted");
        if (!isExist) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- File not found");
        }
        if (fileSize != [downloaded1 getFileSize]) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$I$I", @"- Incorrect file size. Expected: ", [downloaded1 getFileSize], @", got: ", fileSize));
        }
      }
      [downloaded_ removeItemWithKey:[downloaded1 getFileId]];
    }
  }
  
#line 157
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, [fileReference getFileId]);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Adding to queue");
    }
    
#line 163
    queueItem = new_ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(self, fileReference);
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) addWithId:callback];
    
#line 166
    if (autoStart) {
      queueItem->isStopped_ = false;
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$7_initWithACFileCallback_(callback));
    }
    else {
      
#line 175
      queueItem->isStopped_ = true;
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$8_initWithACFileCallback_(callback));
    }
    
#line 184
    [((JavaUtilArrayList *) nil_chk(queue_)) addWithInt:0 withId:queueItem];
  }
  else {
    
#line 186
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Promoting in queue");
    
#line 188
    ACDownloadManager_promoteWithLong_(self, [fileReference getFileId]);
    
#line 190
    if (![((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) containsWithId:callback]) {
      [queueItem->callbacks_ addWithId:callback];
    }
    
#line 194
    if (queueItem->isStopped_) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$9_initWithACFileCallback_(callback));
    }
    else {
      
#line 202
      if (queueItem->isStarted_) {
        jfloat progress = queueItem->progress_;
        ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$10_initWithACFileCallback_withFloat_(callback, progress));
      }
      else {
        
#line 211
        ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$11_initWithACFileCallback_(callback));
      }
    }
  }
  
#line 221
  ACDownloadManager_checkQueue(self);
}


#line 224
- (void)startDownloadWithACFileReference:(ACFileReference *)fileReference {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"Starting download #", [((ACFileReference *) nil_chk(fileReference)) getFileId]));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, [((ACFileReference *) nil_chk(fileReference)) getFileId]);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Adding to queue");
    }
    queueItem = new_ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(self, fileReference);
    queueItem->isStopped_ = false;
    [((JavaUtilArrayList *) nil_chk(queue_)) addWithInt:0 withId:queueItem];
  }
  else {
    
#line 237
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Promoting in queue");
    }
    if (queueItem->isStopped_) {
      queueItem->isStopped_ = false;
      for (id<ACFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
        ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$12_initWithACFileCallback_(callback));
      }
    }
    
#line 251
    ACDownloadManager_promoteWithLong_(self, [fileReference getFileId]);
  }
  
#line 254
  ACDownloadManager_checkQueue(self);
}


#line 257
- (void)cancelDownloadWithLong:(jlong)fileId {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"Stopping download #", fileId));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Not present in queue");
    }
  }
  else {
    
#line 267
    if (queueItem->isStarted_) {
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Stopping actor");
      }
      [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = false;
    }
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Marking as stopped");
    }
    queueItem->isStopped_ = true;
    
#line 280
    for (id<ACFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$13_initWithACFileCallback_(callback));
    }
  }
  
#line 290
  ACDownloadManager_checkQueue(self);
}

- (void)unbindDownloadWithLong:(jlong)fileId
                   withBoolean:(jboolean)autoCancel
            withACFileCallback:(id<ACFileCallback>)callback {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"Unbind file #", fileId));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Not present in queue");
    }
  }
  else {
    
#line 303
    if (autoCancel) {
      if (queueItem->isStarted_) {
        if (LOG_) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Stopping actor");
        }
        [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
        queueItem->taskRef_ = nil;
        queueItem->isStarted_ = false;
      }
      
#line 313
      if (!queueItem->isStopped_) {
        if (LOG_) {
          ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Marking as stopped");
        }
        queueItem->isStopped_ = true;
        
#line 319
        for (id<ACFileCallback> __strong c in nil_chk(queueItem->callbacks_)) {
          if (c != callback) {
            ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$14_initWithACFileCallback_(c));
          }
        }
      }
      
#line 330
      [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
    }
    else {
      
#line 332
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Removing callback");
      }
      [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) removeWithId:callback];
    }
  }
  
#line 339
  ACDownloadManager_checkQueue(self);
}


#line 344
- (void)checkQueue {
  ACDownloadManager_checkQueue(self);
}


#line 391
- (void)onDownloadProgressWithLong:(jlong)fileId
                         withFloat:(jfloat)progress {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$JCF", @"onDownloadProgress file #", fileId, ' ', progress));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  
#line 400
  if (!((ACDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 404
  queueItem->progress_ = progress;
  
#line 406
  for (id<ACFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$16_initWithACFileCallback_withFloat_(fileCallback, progress));
  }
}


#line 416
- (void)onDownloadedWithLong:(jlong)fileId
   withARFileSystemReference:(id<ARFileSystemReference>)reference {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"onDownloaded file #", fileId));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  
#line 425
  if (!((ACDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 429
  [((id<ARKeyValueEngine>) nil_chk(downloaded_)) addOrUpdateItem:new_ACDownloaded_initWithLong_withInt_withNSString_([((ACFileReference *) nil_chk(queueItem->fileReference_)) getFileId],
#line 430
  [queueItem->fileReference_ getFileSize], [((id<ARFileSystemReference>) nil_chk(reference)) getDescriptor])];
  
#line 432
  [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
  [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  
#line 435
  for (id<ACFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(fileCallback, reference));
  }
  
#line 444
  ACDownloadManager_checkQueue(self);
}


#line 447
- (void)onDownloadErrorWithLong:(jlong)fileId {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"onDownloadError file #", fileId));
  }
  ACDownloadManager_QueueItem *queueItem = ACDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  
#line 456
  if (!((ACDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 460
  [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  queueItem->isStopped_ = true;
  queueItem->isStarted_ = false;
  
#line 464
  for (id<ACFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACDownloadManager_$18_initWithACFileCallback_(fileCallback));
  }
  
#line 473
  ACDownloadManager_checkQueue(self);
}


#line 476
- (ACDownloadManager_QueueItem *)findItemWithLong:(jlong)id_ {
  return ACDownloadManager_findItemWithLong_(self, id_);
}


#line 485
- (void)promoteWithLong:(jlong)id_ {
  ACDownloadManager_promoteWithLong_(self, id_);
}


#line 516
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACDownloadManager_BindDownload class]]) {
    ACDownloadManager_BindDownload *requestDownload = (ACDownloadManager_BindDownload *) check_class_cast(message, [ACDownloadManager_BindDownload class]);
    [self bindDownloadWithACFileReference:[((ACDownloadManager_BindDownload *) nil_chk(requestDownload)) getFileReference] withBoolean:
#line 520
    [requestDownload isAutostart] withACFileCallback:
#line 521
    [requestDownload getCallback]];
  }
  else
#line 522
  if ([message isKindOfClass:[ACDownloadManager_CancelDownload class]]) {
    ACDownloadManager_CancelDownload *cancelDownload = (ACDownloadManager_CancelDownload *) check_class_cast(message, [ACDownloadManager_CancelDownload class]);
    [self cancelDownloadWithLong:[((ACDownloadManager_CancelDownload *) nil_chk(cancelDownload)) getFileId]];
  }
  else
#line 525
  if ([message isKindOfClass:[ACDownloadManager_UnbindDownload class]]) {
    ACDownloadManager_UnbindDownload *unbindDownload = (ACDownloadManager_UnbindDownload *) check_class_cast(message, [ACDownloadManager_UnbindDownload class]);
    [self unbindDownloadWithLong:[((ACDownloadManager_UnbindDownload *) nil_chk(unbindDownload)) getFileId] withBoolean:[unbindDownload isAutocancel] withACFileCallback:[unbindDownload getCallback]];
  }
  else
#line 528
  if ([message isKindOfClass:[ACDownloadManager_StartDownload class]]) {
    ACDownloadManager_StartDownload *startDownload = (ACDownloadManager_StartDownload *) check_class_cast(message, [ACDownloadManager_StartDownload class]);
    [self startDownloadWithACFileReference:[((ACDownloadManager_StartDownload *) nil_chk(startDownload)) getFileReference]];
  }
  else
#line 531
  if ([message isKindOfClass:[ACDownloadManager_OnDownloadProgress class]]) {
    ACDownloadManager_OnDownloadProgress *downloadProgress = (ACDownloadManager_OnDownloadProgress *) check_class_cast(message, [ACDownloadManager_OnDownloadProgress class]);
    [self onDownloadProgressWithLong:[((ACDownloadManager_OnDownloadProgress *) nil_chk(downloadProgress)) getFileId] withFloat:[downloadProgress getProgress]];
  }
  else
#line 534
  if ([message isKindOfClass:[ACDownloadManager_OnDownloaded class]]) {
    ACDownloadManager_OnDownloaded *onDownloaded = (ACDownloadManager_OnDownloaded *) check_class_cast(message, [ACDownloadManager_OnDownloaded class]);
    [self onDownloadedWithLong:[((ACDownloadManager_OnDownloaded *) nil_chk(onDownloaded)) getFileId] withARFileSystemReference:[onDownloaded getReference]];
  }
  else
#line 537
  if ([message isKindOfClass:[ACDownloadManager_OnDownloadedError class]]) {
    ACDownloadManager_OnDownloadedError *error = (ACDownloadManager_OnDownloadedError *) check_class_cast(message, [ACDownloadManager_OnDownloadedError class]);
    [self onDownloadErrorWithLong:[((ACDownloadManager_OnDownloadedError *) nil_chk(error)) getFileId]];
  }
  else
#line 540
  if ([message isKindOfClass:[ACDownloadManager_RequestState class]]) {
    ACDownloadManager_RequestState *requestState = (ACDownloadManager_RequestState *) check_class_cast(message, [ACDownloadManager_RequestState class]);
    [self requestStateWithLong:[((ACDownloadManager_RequestState *) nil_chk(requestState)) getFileId] withACFileCallback:[requestState getCallback]];
  }
  else {
    
#line 544
    [self dropWithId:message];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "DownloadManager", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "requestStateWithLong:withACFileCallback:", "requestState", "V", 0x1, NULL, NULL },
    { "bindDownloadWithACFileReference:withBoolean:withACFileCallback:", "bindDownload", "V", 0x1, NULL, NULL },
    { "startDownloadWithACFileReference:", "startDownload", "V", 0x1, NULL, NULL },
    { "cancelDownloadWithLong:", "cancelDownload", "V", 0x1, NULL, NULL },
    { "unbindDownloadWithLong:withBoolean:withACFileCallback:", "unbindDownload", "V", 0x1, NULL, NULL },
    { "checkQueue", NULL, "V", 0x2, NULL, NULL },
    { "onDownloadProgressWithLong:withFloat:", "onDownloadProgress", "V", 0x1, NULL, NULL },
    { "onDownloadedWithLong:withARFileSystemReference:", "onDownloaded", "V", 0x1, NULL, NULL },
    { "onDownloadErrorWithLong:", "onDownloadError", "V", 0x1, NULL, NULL },
    { "findItemWithLong:", "findItem", "Lim.actor.core.modules.internal.file.DownloadManager$QueueItem;", 0x2, NULL, NULL },
    { "promoteWithLong:", "promote", "V", 0x2, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACDownloadManager_TAG_, NULL, .constantValue.asLong = 0 },
    { "SIM_MAX_DOWNLOADS", "SIM_MAX_DOWNLOADS", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACDownloadManager_SIM_MAX_DOWNLOADS },
    { "LOG_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "queue_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lim/actor/core/modules/internal/file/DownloadManager$QueueItem;>;", .constantValue.asLong = 0 },
    { "downloaded_", NULL, 0x2, "Lim.actor.runtime.storage.KeyValueEngine;", NULL, "Lim/actor/runtime/storage/KeyValueEngine<Lim/actor/core/modules/internal/file/entity/Downloaded;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.file.DownloadManager$QueueItem;", "Lim.actor.core.modules.internal.file.DownloadManager$RequestState;", "Lim.actor.core.modules.internal.file.DownloadManager$BindDownload;", "Lim.actor.core.modules.internal.file.DownloadManager$StartDownload;", "Lim.actor.core.modules.internal.file.DownloadManager$CancelDownload;", "Lim.actor.core.modules.internal.file.DownloadManager$UnbindDownload;", "Lim.actor.core.modules.internal.file.DownloadManager$OnDownloadProgress;", "Lim.actor.core.modules.internal.file.DownloadManager$OnDownloaded;", "Lim.actor.core.modules.internal.file.DownloadManager$OnDownloadedError;"};
  static const J2ObjcClassInfo _ACDownloadManager = { 2, "DownloadManager", "im.actor.core.modules.internal.file", NULL, 0x1, 14, methods, 5, fields, 0, NULL, 9, inner_classes, NULL, NULL };
  return &_ACDownloadManager;
}

@end


#line 35
void ACDownloadManager_initWithACModuleContext_(ACDownloadManager *self, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->queue_ = new_JavaUtilArrayList_init();
}


#line 35
ACDownloadManager *new_ACDownloadManager_initWithACModuleContext_(id<ACModuleContext> context) {
  ACDownloadManager *self = [ACDownloadManager alloc];
  ACDownloadManager_initWithACModuleContext_(self, context);
  return self;
}


#line 344
void ACDownloadManager_checkQueue(ACDownloadManager *self) {
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Checking queue");
  }
  
#line 349
  jint activeDownloads = 0;
  for (ACDownloadManager_QueueItem * __strong queueItem in nil_chk(self->queue_)) {
    if (((ACDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
      activeDownloads++;
    }
  }
  
#line 356
  if (activeDownloads >= ACDownloadManager_SIM_MAX_DOWNLOADS) {
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- Already have max number of simultaneous downloads");
    }
    return;
  }
  
#line 363
  ACDownloadManager_QueueItem *pendingQueue = nil;
  for (ACDownloadManager_QueueItem * __strong queueItem in self->queue_) {
    if (!((ACDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_ && !queueItem->isStopped_) {
      pendingQueue = queueItem;
      break;
    }
  }
  if (pendingQueue == nil) {
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, @"- No work for downloading");
    }
    return;
  }
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(ACDownloadManager_TAG_, JreStrcat("$J", @"- Starting download file #", [((ACFileReference *) nil_chk(((ACDownloadManager_QueueItem *) nil_chk(pendingQueue))->fileReference_)) getFileId]));
  }
  
#line 380
  ((ACDownloadManager_QueueItem *) nil_chk(pendingQueue))->isStarted_ = true;
  
#line 382
  ACDownloadManager_QueueItem *finalPendingQueue = pendingQueue;
  pendingQueue->taskRef_ = [((ARActorSystem *) nil_chk([self system])) actorOfWithARProps:[((ARProps *) nil_chk(ARProps_createWithIOSClass_withARActorCreator_(ACDownloadTask_class_(), new_ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(self, finalPendingQueue)))) changeDispatcherWithNSString:
#line 388
  @"heavy"] withNSString:JreStrcat("$J", @"actor/download/task_", ACRandomUtils_nextRid())];
}


#line 476
ACDownloadManager_QueueItem *ACDownloadManager_findItemWithLong_(ACDownloadManager *self, jlong id_) {
  for (ACDownloadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if ([((ACFileReference *) nil_chk(((ACDownloadManager_QueueItem *) nil_chk(q))->fileReference_)) getFileId] == id_) {
      return q;
    }
  }
  return nil;
}

void ACDownloadManager_promoteWithLong_(ACDownloadManager *self, jlong id_) {
  for (ACDownloadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if ([((ACFileReference *) nil_chk(((ACDownloadManager_QueueItem *) nil_chk(q))->fileReference_)) getFileId] == id_) {
      if (!q->isStarted_) {
        [self->queue_ removeWithId:q];
        [self->queue_ addWithInt:0 withId:q];
      }
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 497
@implementation ACDownloadManager_QueueItem


#line 508
- (instancetype)initWithACDownloadManager:(ACDownloadManager *)outer$
                      withACFileReference:(ACFileReference *)fileReference {
  ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(self, outer$, fileReference);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACDownloadManager:withACFileReference:", "QueueItem", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileReference_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "isStopped_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "callbacks_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lim/actor/core/viewmodel/FileCallback;>;", .constantValue.asLong = 0 },
    { "isStarted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "progress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "taskRef_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_QueueItem = { 2, "QueueItem", "im.actor.core.modules.internal.file", "DownloadManager", 0x2, 1, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_QueueItem;
}

@end


#line 508
void ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(ACDownloadManager_QueueItem *self, ACDownloadManager *outer$, ACFileReference *fileReference) {
  (void) NSObject_init(self);
  self->callbacks_ = new_JavaUtilArrayList_init();
  
#line 509
  self->fileReference_ = fileReference;
}


#line 508
ACDownloadManager_QueueItem *new_ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(ACDownloadManager *outer$, ACFileReference *fileReference) {
  ACDownloadManager_QueueItem *self = [ACDownloadManager_QueueItem alloc];
  ACDownloadManager_QueueItem_initWithACDownloadManager_withACFileReference_(self, outer$, fileReference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_QueueItem)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 548
@implementation ACDownloadManager_RequestState


#line 552
- (instancetype)initWithLong:(jlong)fileId
          withACFileCallback:(id<ACFileCallback>)callback {
  ACDownloadManager_RequestState_initWithLong_withACFileCallback_(self, fileId, callback);
  return self;
}


#line 557
- (jlong)getFileId {
  return fileId_;
}

- (id<ACFileCallback>)getCallback {
  return callback_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACFileCallback:", "RequestState", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.FileCallback;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_RequestState = { 2, "RequestState", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_RequestState;
}

@end


#line 552
void ACDownloadManager_RequestState_initWithLong_withACFileCallback_(ACDownloadManager_RequestState *self, jlong fileId, id<ACFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 553
  self->fileId_ = fileId;
  self->callback_ = callback;
}


#line 552
ACDownloadManager_RequestState *new_ACDownloadManager_RequestState_initWithLong_withACFileCallback_(jlong fileId, id<ACFileCallback> callback) {
  ACDownloadManager_RequestState *self = [ACDownloadManager_RequestState alloc];
  ACDownloadManager_RequestState_initWithLong_withACFileCallback_(self, fileId, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_RequestState)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 566
@implementation ACDownloadManager_BindDownload


#line 571
- (instancetype)initWithACFileReference:(ACFileReference *)fileReference
                            withBoolean:(jboolean)isAutostart
                     withACFileCallback:(id<ACFileCallback>)callback {
  ACDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(self, fileReference, isAutostart, callback);
  return self;
}


#line 577
- (ACFileReference *)getFileReference {
  return fileReference_;
}

- (jboolean)isAutostart {
  return isAutostart_;
}

- (id<ACFileCallback>)getCallback {
  return callback_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACFileReference:withBoolean:withACFileCallback:", "BindDownload", NULL, 0x1, NULL, NULL },
    { "getFileReference", NULL, "Lim.actor.core.entity.FileReference;", 0x1, NULL, NULL },
    { "isAutostart", NULL, "Z", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.FileCallback;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileReference_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "isAutostart_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_BindDownload = { 2, "BindDownload", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_BindDownload;
}

@end


#line 571
void ACDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(ACDownloadManager_BindDownload *self, ACFileReference *fileReference, jboolean isAutostart, id<ACFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 572
  self->fileReference_ = fileReference;
  self->isAutostart_ = isAutostart;
  self->callback_ = callback;
}


#line 571
ACDownloadManager_BindDownload *new_ACDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(ACFileReference *fileReference, jboolean isAutostart, id<ACFileCallback> callback) {
  ACDownloadManager_BindDownload *self = [ACDownloadManager_BindDownload alloc];
  ACDownloadManager_BindDownload_initWithACFileReference_withBoolean_withACFileCallback_(self, fileReference, isAutostart, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_BindDownload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 590
@implementation ACDownloadManager_StartDownload


#line 593
- (instancetype)initWithACFileReference:(ACFileReference *)fileReference {
  ACDownloadManager_StartDownload_initWithACFileReference_(self, fileReference);
  return self;
}


#line 597
- (ACFileReference *)getFileReference {
  return fileReference_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACFileReference:", "StartDownload", NULL, 0x1, NULL, NULL },
    { "getFileReference", NULL, "Lim.actor.core.entity.FileReference;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileReference_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_StartDownload = { 2, "StartDownload", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_StartDownload;
}

@end


#line 593
void ACDownloadManager_StartDownload_initWithACFileReference_(ACDownloadManager_StartDownload *self, ACFileReference *fileReference) {
  (void) NSObject_init(self);
  
#line 594
  self->fileReference_ = fileReference;
}


#line 593
ACDownloadManager_StartDownload *new_ACDownloadManager_StartDownload_initWithACFileReference_(ACFileReference *fileReference) {
  ACDownloadManager_StartDownload *self = [ACDownloadManager_StartDownload alloc];
  ACDownloadManager_StartDownload_initWithACFileReference_(self, fileReference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_StartDownload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 602
@implementation ACDownloadManager_CancelDownload


#line 605
- (instancetype)initWithLong:(jlong)fileId {
  ACDownloadManager_CancelDownload_initWithLong_(self, fileId);
  return self;
}


#line 609
- (jlong)getFileId {
  return fileId_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "CancelDownload", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_CancelDownload = { 2, "CancelDownload", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_CancelDownload;
}

@end


#line 605
void ACDownloadManager_CancelDownload_initWithLong_(ACDownloadManager_CancelDownload *self, jlong fileId) {
  (void) NSObject_init(self);
  
#line 606
  self->fileId_ = fileId;
}


#line 605
ACDownloadManager_CancelDownload *new_ACDownloadManager_CancelDownload_initWithLong_(jlong fileId) {
  ACDownloadManager_CancelDownload *self = [ACDownloadManager_CancelDownload alloc];
  ACDownloadManager_CancelDownload_initWithLong_(self, fileId);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_CancelDownload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 614
@implementation ACDownloadManager_UnbindDownload


#line 619
- (instancetype)initWithLong:(jlong)fileId
                 withBoolean:(jboolean)isAutocancel
          withACFileCallback:(id<ACFileCallback>)callback {
  ACDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(self, fileId, isAutocancel, callback);
  return self;
}


#line 625
- (jlong)getFileId {
  return fileId_;
}

- (id<ACFileCallback>)getCallback {
  return callback_;
}

- (jboolean)isAutocancel {
  return isAutocancel_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withBoolean:withACFileCallback:", "UnbindDownload", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.FileCallback;", 0x1, NULL, NULL },
    { "isAutocancel", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "isAutocancel_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_UnbindDownload = { 2, "UnbindDownload", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_UnbindDownload;
}

@end


#line 619
void ACDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(ACDownloadManager_UnbindDownload *self, jlong fileId, jboolean isAutocancel, id<ACFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 620
  self->fileId_ = fileId;
  self->isAutocancel_ = isAutocancel;
  self->callback_ = callback;
}


#line 619
ACDownloadManager_UnbindDownload *new_ACDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(jlong fileId, jboolean isAutocancel, id<ACFileCallback> callback) {
  ACDownloadManager_UnbindDownload *self = [ACDownloadManager_UnbindDownload alloc];
  ACDownloadManager_UnbindDownload_initWithLong_withBoolean_withACFileCallback_(self, fileId, isAutocancel, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_UnbindDownload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 638
@implementation ACDownloadManager_OnDownloadProgress


#line 642
- (instancetype)initWithLong:(jlong)fileId
                   withFloat:(jfloat)progress {
  ACDownloadManager_OnDownloadProgress_initWithLong_withFloat_(self, fileId, progress);
  return self;
}


#line 647
- (jlong)getFileId {
  return fileId_;
}

- (jfloat)getProgress {
  return progress_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withFloat:", "OnDownloadProgress", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
    { "getProgress", NULL, "F", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "progress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_OnDownloadProgress = { 2, "OnDownloadProgress", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_OnDownloadProgress;
}

@end


#line 642
void ACDownloadManager_OnDownloadProgress_initWithLong_withFloat_(ACDownloadManager_OnDownloadProgress *self, jlong fileId, jfloat progress) {
  (void) NSObject_init(self);
  
#line 643
  self->fileId_ = fileId;
  self->progress_ = progress;
}


#line 642
ACDownloadManager_OnDownloadProgress *new_ACDownloadManager_OnDownloadProgress_initWithLong_withFloat_(jlong fileId, jfloat progress) {
  ACDownloadManager_OnDownloadProgress *self = [ACDownloadManager_OnDownloadProgress alloc];
  ACDownloadManager_OnDownloadProgress_initWithLong_withFloat_(self, fileId, progress);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_OnDownloadProgress)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 656
@implementation ACDownloadManager_OnDownloaded


#line 660
- (instancetype)initWithLong:(jlong)fileId
   withARFileSystemReference:(id<ARFileSystemReference>)reference {
  ACDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(self, fileId, reference);
  return self;
}


#line 665
- (jlong)getFileId {
  return fileId_;
}

- (id<ARFileSystemReference>)getReference {
  return reference_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withARFileSystemReference:", "OnDownloaded", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
    { "getReference", NULL, "Lim.actor.runtime.files.FileSystemReference;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "reference_", NULL, 0x2, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_OnDownloaded = { 2, "OnDownloaded", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_OnDownloaded;
}

@end


#line 660
void ACDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(ACDownloadManager_OnDownloaded *self, jlong fileId, id<ARFileSystemReference> reference) {
  (void) NSObject_init(self);
  
#line 661
  self->fileId_ = fileId;
  self->reference_ = reference;
}


#line 660
ACDownloadManager_OnDownloaded *new_ACDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(jlong fileId, id<ARFileSystemReference> reference) {
  ACDownloadManager_OnDownloaded *self = [ACDownloadManager_OnDownloaded alloc];
  ACDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_(self, fileId, reference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_OnDownloaded)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"


#line 674
@implementation ACDownloadManager_OnDownloadedError


#line 677
- (instancetype)initWithLong:(jlong)fileId {
  ACDownloadManager_OnDownloadedError_initWithLong_(self, fileId);
  return self;
}


#line 681
- (jlong)getFileId {
  return fileId_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "OnDownloadedError", NULL, 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fileId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACDownloadManager_OnDownloadedError = { 2, "OnDownloadedError", "im.actor.core.modules.internal.file", "DownloadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadManager_OnDownloadedError;
}

@end


#line 677
void ACDownloadManager_OnDownloadedError_initWithLong_(ACDownloadManager_OnDownloadedError *self, jlong fileId) {
  (void) NSObject_init(self);
  
#line 678
  self->fileId_ = fileId;
}


#line 677
ACDownloadManager_OnDownloadedError *new_ACDownloadManager_OnDownloadedError_initWithLong_(jlong fileId) {
  ACDownloadManager_OnDownloadedError *self = [ACDownloadManager_OnDownloadedError alloc];
  ACDownloadManager_OnDownloadedError_initWithLong_(self, fileId);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_OnDownloadedError)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$1


#line 66
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloaded:val$fileSystemReference_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1 {
  ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withARFileSystemReference:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$fileSystemReference_", NULL, 0x1012, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "requestStateWithLong:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$1 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$1;
}

@end

void ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$1 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  self->val$callback_ = capture$0;
  self->val$fileSystemReference_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$1 *new_ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  ACDownloadManager_$1 *self = [ACDownloadManager_$1 alloc];
  ACDownloadManager_$1_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$2


#line 89
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$2_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "requestStateWithLong:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$2 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$2;
}

@end

void ACDownloadManager_$2_initWithACFileCallback_(ACDownloadManager_$2 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$2 *new_ACDownloadManager_$2_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$2 *self = [ACDownloadManager_$2 alloc];
  ACDownloadManager_$2_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$3


#line 99
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:val$progress_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1 {
  ACDownloadManager_$3_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "requestStateWithLong:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$3 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$3;
}

@end

void ACDownloadManager_$3_initWithACFileCallback_withFloat_(ACDownloadManager_$3 *self, id<ACFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$3 *new_ACDownloadManager_$3_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) {
  ACDownloadManager_$3 *self = [ACDownloadManager_$3 alloc];
  ACDownloadManager_$3_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$3)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$4


#line 107
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$4_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "requestStateWithLong:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$4 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$4;
}

@end

void ACDownloadManager_$4_initWithACFileCallback_(ACDownloadManager_$4 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$4 *new_ACDownloadManager_$4_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$4 *self = [ACDownloadManager_$4 alloc];
  ACDownloadManager_$4_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$4)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$5


#line 114
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:0];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$5_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "requestStateWithLong:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$5 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$5;
}

@end

void ACDownloadManager_$5_initWithACFileCallback_(ACDownloadManager_$5 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$5 *new_ACDownloadManager_$5_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$5 *self = [ACDownloadManager_$5 alloc];
  ACDownloadManager_$5_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$5)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$6


#line 138
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloaded:val$fileSystemReference_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1 {
  ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withARFileSystemReference:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$fileSystemReference_", NULL, 0x1012, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$6 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$6;
}

@end

void ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$6 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  self->val$callback_ = capture$0;
  self->val$fileSystemReference_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$6 *new_ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  ACDownloadManager_$6 *self = [ACDownloadManager_$6 alloc];
  ACDownloadManager_$6_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$6)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$7


#line 170
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:0];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$7_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$7 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$7;
}

@end

void ACDownloadManager_$7_initWithACFileCallback_(ACDownloadManager_$7 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$7 *new_ACDownloadManager_$7_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$7 *self = [ACDownloadManager_$7 alloc];
  ACDownloadManager_$7_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$7)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$8


#line 178
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$8_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$8 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$8;
}

@end

void ACDownloadManager_$8_initWithACFileCallback_(ACDownloadManager_$8 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$8 *new_ACDownloadManager_$8_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$8 *self = [ACDownloadManager_$8 alloc];
  ACDownloadManager_$8_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$8)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$9


#line 197
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$9_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$9 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$9;
}

@end

void ACDownloadManager_$9_initWithACFileCallback_(ACDownloadManager_$9 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$9 *new_ACDownloadManager_$9_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$9 *self = [ACDownloadManager_$9 alloc];
  ACDownloadManager_$9_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$9)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$10


#line 206
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:val$progress_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1 {
  ACDownloadManager_$10_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$10 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$10;
}

@end

void ACDownloadManager_$10_initWithACFileCallback_withFloat_(ACDownloadManager_$10 *self, id<ACFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$10 *new_ACDownloadManager_$10_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) {
  ACDownloadManager_$10 *self = [ACDownloadManager_$10 alloc];
  ACDownloadManager_$10_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$10)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$11


#line 213
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:0];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$11_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "bindDownloadWithACFileReference:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$11 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$11;
}

@end

void ACDownloadManager_$11_initWithACFileCallback_(ACDownloadManager_$11 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$11 *new_ACDownloadManager_$11_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$11 *self = [ACDownloadManager_$11 alloc];
  ACDownloadManager_$11_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$11)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$12


#line 245
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onDownloading:0];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$12_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "startDownloadWithACFileReference:" };
  static const J2ObjcClassInfo _ACDownloadManager_$12 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$12;
}

@end

void ACDownloadManager_$12_initWithACFileCallback_(ACDownloadManager_$12 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$12 *new_ACDownloadManager_$12_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$12 *self = [ACDownloadManager_$12 alloc];
  ACDownloadManager_$12_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$12)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$13


#line 283
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$callback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$13_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "cancelDownloadWithLong:" };
  static const J2ObjcClassInfo _ACDownloadManager_$13 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$13;
}

@end

void ACDownloadManager_$13_initWithACFileCallback_(ACDownloadManager_$13 *self, id<ACFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$13 *new_ACDownloadManager_$13_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$13 *self = [ACDownloadManager_$13 alloc];
  ACDownloadManager_$13_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$13)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$14


#line 323
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$c_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$14_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "unbindDownloadWithLong:withBoolean:withACFileCallback:" };
  static const J2ObjcClassInfo _ACDownloadManager_$14 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$14;
}

@end

void ACDownloadManager_$14_initWithACFileCallback_(ACDownloadManager_$14 *self, id<ACFileCallback> capture$0) {
  self->val$c_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$14 *new_ACDownloadManager_$14_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$14 *self = [ACDownloadManager_$14 alloc];
  ACDownloadManager_$14_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$14)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$15


#line 385
- (ACDownloadTask *)create {
  return new_ACDownloadTask_initWithACFileReference_withARActorRef_withACModuleContext_(((ACDownloadManager_QueueItem *) nil_chk(val$finalPendingQueue_))->fileReference_, [this$0_ self__], [this$0_ context]);
}

- (instancetype)initWithACDownloadManager:(ACDownloadManager *)outer$
          withACDownloadManager_QueueItem:(ACDownloadManager_QueueItem *)capture$0 {
  ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lim.actor.core.modules.internal.file.DownloadTask;", 0x1, NULL, NULL },
    { "initWithACDownloadManager:withACDownloadManager_QueueItem:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadManager;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$finalPendingQueue_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadManager$QueueItem;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "checkQueue" };
  static const J2ObjcClassInfo _ACDownloadManager_$15 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/runtime/actors/ActorCreator<Lim/actor/core/modules/internal/file/DownloadTask;>;" };
  return &_ACDownloadManager_$15;
}

@end

void ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(ACDownloadManager_$15 *self, ACDownloadManager *outer$, ACDownloadManager_QueueItem *capture$0) {
  self->this$0_ = outer$;
  self->val$finalPendingQueue_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$15 *new_ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(ACDownloadManager *outer$, ACDownloadManager_QueueItem *capture$0) {
  ACDownloadManager_$15 *self = [ACDownloadManager_$15 alloc];
  ACDownloadManager_$15_initWithACDownloadManager_withACDownloadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$15)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$16


#line 409
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$fileCallback_)) onDownloading:val$progress_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
                             withFloat:(jfloat)capture$1 {
  ACDownloadManager_$16_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$fileCallback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "onDownloadProgressWithLong:withFloat:" };
  static const J2ObjcClassInfo _ACDownloadManager_$16 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$16;
}

@end

void ACDownloadManager_$16_initWithACFileCallback_withFloat_(ACDownloadManager_$16 *self, id<ACFileCallback> capture$0, jfloat capture$1) {
  self->val$fileCallback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$16 *new_ACDownloadManager_$16_initWithACFileCallback_withFloat_(id<ACFileCallback> capture$0, jfloat capture$1) {
  ACDownloadManager_$16 *self = [ACDownloadManager_$16 alloc];
  ACDownloadManager_$16_initWithACFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$16)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$17


#line 438
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$fileCallback_)) onDownloaded:val$reference_];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0
             withARFileSystemReference:(id<ARFileSystemReference>)capture$1 {
  ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:withARFileSystemReference:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$fileCallback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$reference_", NULL, 0x1012, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "onDownloadedWithLong:withARFileSystemReference:" };
  static const J2ObjcClassInfo _ACDownloadManager_$17 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$17;
}

@end

void ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(ACDownloadManager_$17 *self, id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  self->val$fileCallback_ = capture$0;
  self->val$reference_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadManager_$17 *new_ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(id<ACFileCallback> capture$0, id<ARFileSystemReference> capture$1) {
  ACDownloadManager_$17 *self = [ACDownloadManager_$17 alloc];
  ACDownloadManager_$17_initWithACFileCallback_withARFileSystemReference_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$17)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadManager.java"

@implementation ACDownloadManager_$18


#line 467
- (void)run {
  [((id<ACFileCallback>) nil_chk(val$fileCallback_)) onNotDownloaded];
}

- (instancetype)initWithACFileCallback:(id<ACFileCallback>)capture$0 {
  ACDownloadManager_$18_initWithACFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$fileCallback_", NULL, 0x1012, "Lim.actor.core.viewmodel.FileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadManager", "onDownloadErrorWithLong:" };
  static const J2ObjcClassInfo _ACDownloadManager_$18 = { 2, "", "im.actor.core.modules.internal.file", "DownloadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadManager_$18;
}

@end

void ACDownloadManager_$18_initWithACFileCallback_(ACDownloadManager_$18 *self, id<ACFileCallback> capture$0) {
  self->val$fileCallback_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadManager_$18 *new_ACDownloadManager_$18_initWithACFileCallback_(id<ACFileCallback> capture$0) {
  ACDownloadManager_$18 *self = [ACDownloadManager_$18 alloc];
  ACDownloadManager_$18_initWithACFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadManager_$18)

#pragma clang diagnostic pop
