//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/Configuration.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/FilesModule.h"
#include "im/actor/core/modules/internal/file/UploadManager.h"
#include "im/actor/core/modules/internal/file/UploadTask.h"
#include "im/actor/core/modules/internal/file/entity/Downloaded.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/modules/utils/RandomUtils.h"
#include "im/actor/core/viewmodel/UploadFileCallback.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorCreator.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/actors/messages/PoisonPill.h"
#include "im/actor/runtime/files/FileSystemReference.h"
#include "im/actor/runtime/storage/KeyValueEngine.h"
#include <j2objc/java/lang/Runnable.h>
#include <j2objc/java/util/ArrayList.h>

@class ACUploadManager_QueueItem;

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACUploadManager_SIM_MAX_UPLOADS 2

@interface ACUploadManager () {
 @public
  jboolean LOG_;
  JavaUtilArrayList *queue_;
}

- (void)checkQueue;

- (ACUploadManager_QueueItem *)findItemWithLong:(jlong)rid;

@end

J2OBJC_FIELD_SETTER(ACUploadManager, queue_, JavaUtilArrayList *)

static NSString *ACUploadManager_TAG_ = @"UploadManager";
J2OBJC_STATIC_FIELD_GETTER(ACUploadManager, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ACUploadManager, SIM_MAX_UPLOADS, jint)

__attribute__((unused)) static void ACUploadManager_checkQueue(ACUploadManager *self);

__attribute__((unused)) static ACUploadManager_QueueItem *ACUploadManager_findItemWithLong_(ACUploadManager *self, jlong rid);

@interface ACUploadManager_QueueItem : NSObject {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  jboolean isStopped_;
  jboolean isStarted_;
  jfloat progress_;
  ARActorRef *taskRef_;
  ARActorRef *requestActor_;
  NSString *fileName_;
  JavaUtilArrayList *callbacks_;
}

- (instancetype)initWithACUploadManager:(ACUploadManager *)outer$
                               withLong:(jlong)rid
                           withNSString:(NSString *)fileDescriptor
                           withNSString:(NSString *)fileName
                         withARActorRef:(ARActorRef *)requestActor;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_QueueItem)

J2OBJC_FIELD_SETTER(ACUploadManager_QueueItem, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadManager_QueueItem, taskRef_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACUploadManager_QueueItem, requestActor_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACUploadManager_QueueItem, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadManager_QueueItem, callbacks_, JavaUtilArrayList *)

__attribute__((unused)) static void ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(ACUploadManager_QueueItem *self, ACUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, ARActorRef *requestActor);

__attribute__((unused)) static ACUploadManager_QueueItem *new_ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(ACUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, ARActorRef *requestActor) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_QueueItem)

@interface ACUploadManager_StartUpload () {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  NSString *fileName_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_StartUpload, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ACUploadManager_StartUpload, fileName_, NSString *)

@interface ACUploadManager_BindUpload () {
 @public
  jlong rid_;
  id<ACUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_BindUpload, callback_, id<ACUploadFileCallback>)

@interface ACUploadManager_UnbindUpload () {
 @public
  jlong rid_;
  id<ACUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_UnbindUpload, callback_, id<ACUploadFileCallback>)

@interface ACUploadManager_StopUpload () {
 @public
  jlong rid_;
}

@end

@interface ACUploadManager_UploadTaskError () {
 @public
  jlong rid_;
}

@end

@interface ACUploadManager_UploadTaskProgress () {
 @public
  jlong rid_;
  jfloat progress_;
}

@end

@interface ACUploadManager_UploadTaskComplete () {
 @public
  jlong rid_;
  ACFileReference *location_;
  id<ARFileSystemReference> reference_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_UploadTaskComplete, location_, ACFileReference *)
J2OBJC_FIELD_SETTER(ACUploadManager_UploadTaskComplete, reference_, id<ARFileSystemReference>)

@interface ACUploadManager_UploadCompleted () {
 @public
  jlong rid_;
  ACFileReference *fileReference_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_UploadCompleted, fileReference_, ACFileReference *)

@interface ACUploadManager_UploadError () {
 @public
  jlong rid_;
}

@end

@interface ACUploadManager_RequestState () {
 @public
  jlong rid_;
  id<ACUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ACUploadManager_RequestState, callback_, id<ACUploadFileCallback>)

@interface ACUploadManager_PauseUpload () {
 @public
  jlong rid_;
}

@end

@interface ACUploadManager_ResumeUpload () {
 @public
  jlong rid_;
}

@end

@interface ACUploadManager_$1 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$1)

J2OBJC_FIELD_SETTER(ACUploadManager_$1, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$1_initWithACUploadFileCallback_(ACUploadManager_$1 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$1 *new_ACUploadManager_$1_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$1)

@interface ACUploadManager_$2 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$2)

J2OBJC_FIELD_SETTER(ACUploadManager_$2, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$2_initWithACUploadFileCallback_(ACUploadManager_$2 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$2 *new_ACUploadManager_$2_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$2)

@interface ACUploadManager_$3 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$3)

J2OBJC_FIELD_SETTER(ACUploadManager_$3, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$3_initWithACUploadFileCallback_(ACUploadManager_$3 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$3 *new_ACUploadManager_$3_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$3)

@interface ACUploadManager_$4 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$4)

J2OBJC_FIELD_SETTER(ACUploadManager_$4, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(ACUploadManager_$4 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACUploadManager_$4 *new_ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$4)

@interface ACUploadManager_$5 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$5)

J2OBJC_FIELD_SETTER(ACUploadManager_$5, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$5_initWithACUploadFileCallback_(ACUploadManager_$5 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$5 *new_ACUploadManager_$5_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$5)

@interface ACUploadManager_$6 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$6)

J2OBJC_FIELD_SETTER(ACUploadManager_$6, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$6_initWithACUploadFileCallback_(ACUploadManager_$6 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$6 *new_ACUploadManager_$6_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$6)

@interface ACUploadManager_$7 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$7)

J2OBJC_FIELD_SETTER(ACUploadManager_$7, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(ACUploadManager_$7 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACUploadManager_$7 *new_ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$7)

@interface ACUploadManager_$8 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$8)

J2OBJC_FIELD_SETTER(ACUploadManager_$8, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$8_initWithACUploadFileCallback_(ACUploadManager_$8 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$8 *new_ACUploadManager_$8_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$8)

@interface ACUploadManager_$9 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$9)

J2OBJC_FIELD_SETTER(ACUploadManager_$9, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$9_initWithACUploadFileCallback_(ACUploadManager_$9 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$9 *new_ACUploadManager_$9_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$9)

@interface ACUploadManager_$10 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$10)

J2OBJC_FIELD_SETTER(ACUploadManager_$10, val$callback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$10_initWithACUploadFileCallback_(ACUploadManager_$10 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$10 *new_ACUploadManager_$10_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$10)

@interface ACUploadManager_$11 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$fileCallback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$11)

J2OBJC_FIELD_SETTER(ACUploadManager_$11, val$fileCallback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(ACUploadManager_$11 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ACUploadManager_$11 *new_ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$11)

@interface ACUploadManager_$12 : NSObject < JavaLangRunnable > {
 @public
  id<ACUploadFileCallback> val$fileCallback_;
}

- (void)run;

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$12)

J2OBJC_FIELD_SETTER(ACUploadManager_$12, val$fileCallback_, id<ACUploadFileCallback>)

__attribute__((unused)) static void ACUploadManager_$12_initWithACUploadFileCallback_(ACUploadManager_$12 *self, id<ACUploadFileCallback> capture$0);

__attribute__((unused)) static ACUploadManager_$12 *new_ACUploadManager_$12_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$12)

@interface ACUploadManager_$13 : NSObject < ARActorCreator > {
 @public
  ACUploadManager *this$0_;
  ACUploadManager_QueueItem *val$finalPendingQueue_;
}

- (ACUploadTask *)create;

- (instancetype)initWithACUploadManager:(ACUploadManager *)outer$
          withACUploadManager_QueueItem:(ACUploadManager_QueueItem *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUploadManager_$13)

J2OBJC_FIELD_SETTER(ACUploadManager_$13, this$0_, ACUploadManager *)
J2OBJC_FIELD_SETTER(ACUploadManager_$13, val$finalPendingQueue_, ACUploadManager_QueueItem *)

__attribute__((unused)) static void ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(ACUploadManager_$13 *self, ACUploadManager *outer$, ACUploadManager_QueueItem *capture$0);

__attribute__((unused)) static ACUploadManager_$13 *new_ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(ACUploadManager *outer$, ACUploadManager_QueueItem *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUploadManager_$13)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 22
@implementation ACUploadManager


#line 32
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACUploadManager_initWithACModuleContext_(self, context);
  return self;
}


#line 39
- (void)startUploadWithLong:(jlong)rid
               withNSString:(NSString *)descriptor
               withNSString:(NSString *)fileName
             withARActorRef:(ARActorRef *)requestActor {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$J$$", @"Starting upload #", rid, @" with descriptor ", descriptor));
  }
  ACUploadManager_QueueItem *queueItem = new_ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(self, rid, descriptor, fileName, requestActor);
  queueItem->isStopped_ = false;
  [((JavaUtilArrayList *) nil_chk(queue_)) addWithId:queueItem];
  ACUploadManager_checkQueue(self);
}


#line 49
- (void)stopUploadWithLong:(jlong)rid {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$J", @"Stopping download #", rid));
  }
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- Not present in queue");
    }
  }
  else {
    
#line 59
    if (queueItem->isStarted_) {
      if (LOG_) {
        ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- Stopping actor");
      }
      [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = false;
    }
    [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
    for (id<ACUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$1_initWithACUploadFileCallback_(callback));
    }
  }
  
#line 77
  ACUploadManager_checkQueue(self);
}

- (void)bindUploadWithLong:(jlong)rid
  withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$2_initWithACUploadFileCallback_(callback));
  }
  else {
    
#line 90
    if (queueItem->isStopped_) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$3_initWithACUploadFileCallback_(callback));
    }
    else {
      
#line 98
      jfloat progress = queueItem->progress_;
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(callback, progress));
    }
    
#line 106
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) addWithId:callback];
  }
}


#line 110
- (void)unbindUploadWithLong:(jlong)rid
    withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) removeWithId:callback];
  }
}


#line 117
- (void)requestStateWithLong:(jlong)rid
    withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$5_initWithACUploadFileCallback_(callback));
  }
  else {
    
#line 127
    if (queueItem->isStopped_) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$6_initWithACUploadFileCallback_(callback));
    }
    else {
      
#line 135
      jfloat progress = queueItem->progress_;
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(callback, progress));
    }
  }
}


#line 146
- (void)resumeUploadWithLong:(jlong)rid {
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      return;
    }
    if (queueItem->isStopped_) {
      queueItem->isStopped_ = false;
    }
    queueItem->progress_ = 0;
    for (id<ACUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$8_initWithACUploadFileCallback_(callback));
    }
    
#line 164
    ACUploadManager_checkQueue(self);
  }
}


#line 168
- (void)pauseUploadWithLong:(jlong)rid {
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = false;
    }
    queueItem->isStopped_ = true;
    for (id<ACUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$9_initWithACUploadFileCallback_(callback));
    }
  }
}


#line 190
- (void)onUploadTaskErrorWithLong:(jlong)rid {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" error"));
  }
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- Nothing found");
    }
    return;
  }
  
#line 202
  if (!((ACUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 206
  [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  queueItem->isStopped_ = true;
  queueItem->isStarted_ = false;
  
#line 210
  for (id<ACUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$10_initWithACUploadFileCallback_(callback));
  }
  
#line 219
  [((ARActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:new_ACUploadManager_UploadError_initWithLong_(rid)];
  
#line 221
  ACUploadManager_checkQueue(self);
}

- (void)onUploadTaskProgressWithLong:(jlong)rid
                           withFloat:(jfloat)progress {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$J$F", @"Upload #", rid, @" progress ", progress));
  }
  
#line 229
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  
#line 234
  if (!((ACUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 238
  queueItem->progress_ = progress;
  
#line 240
  for (id<ACUploadFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(fileCallback, progress));
  }
}

- (void)onUploadTaskCompleteWithLong:(jlong)rid
                 withACFileReference:(ACFileReference *)fileReference
           withARFileSystemReference:(id<ARFileSystemReference>)reference {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" complete"));
  }
  
#line 255
  ACUploadManager_QueueItem *queueItem = ACUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  
#line 260
  if (!((ACUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 264
  [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
  [((ARActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  
#line 268
  [((id<ARKeyValueEngine>) nil_chk([((ACFilesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getFilesModule])) getDownloadedEngine])) addOrUpdateItem:new_ACDownloaded_initWithLong_withInt_withNSString_([((ACFileReference *) nil_chk(fileReference)) getFileId],
#line 269
  [fileReference getFileSize], [((id<ARFileSystemReference>) nil_chk(reference)) getDescriptor])];
  
#line 271
  for (id<ACUploadFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    ARRuntime_dispatchWithJavaLangRunnable_(new_ACUploadManager_$12_initWithACUploadFileCallback_(fileCallback));
  }
  
#line 280
  [((ARActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:new_ACUploadManager_UploadCompleted_initWithLong_withACFileReference_(rid, fileReference)];
  
#line 282
  ACUploadManager_checkQueue(self);
}


#line 285
- (void)checkQueue {
  ACUploadManager_checkQueue(self);
}


#line 334
- (ACUploadManager_QueueItem *)findItemWithLong:(jlong)rid {
  return ACUploadManager_findItemWithLong_(self, rid);
}


#line 365
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACUploadManager_StartUpload class]]) {
    ACUploadManager_StartUpload *startUpload = (ACUploadManager_StartUpload *) check_class_cast(message, [ACUploadManager_StartUpload class]);
    [self startUploadWithLong:[((ACUploadManager_StartUpload *) nil_chk(startUpload)) getRid] withNSString:[startUpload getFileDescriptor] withNSString:
#line 369
    [startUpload getFileName] withARActorRef:[self sender]];
  }
  else
#line 370
  if ([message isKindOfClass:[ACUploadManager_StopUpload class]]) {
    ACUploadManager_StopUpload *cancelUpload = (ACUploadManager_StopUpload *) check_class_cast(message, [ACUploadManager_StopUpload class]);
    [self stopUploadWithLong:[((ACUploadManager_StopUpload *) nil_chk(cancelUpload)) getRid]];
  }
  else
#line 373
  if ([message isKindOfClass:[ACUploadManager_UploadTaskError class]]) {
    ACUploadManager_UploadTaskError *uploadTaskError = (ACUploadManager_UploadTaskError *) check_class_cast(message, [ACUploadManager_UploadTaskError class]);
    [self onUploadTaskErrorWithLong:[((ACUploadManager_UploadTaskError *) nil_chk(uploadTaskError)) getRid]];
  }
  else
#line 376
  if ([message isKindOfClass:[ACUploadManager_UploadTaskProgress class]]) {
    ACUploadManager_UploadTaskProgress *taskProgress = (ACUploadManager_UploadTaskProgress *) check_class_cast(message, [ACUploadManager_UploadTaskProgress class]);
    [self onUploadTaskProgressWithLong:[((ACUploadManager_UploadTaskProgress *) nil_chk(taskProgress)) getRid] withFloat:[taskProgress getProgress]];
  }
  else
#line 379
  if ([message isKindOfClass:[ACUploadManager_UploadTaskComplete class]]) {
    ACUploadManager_UploadTaskComplete *taskComplete = (ACUploadManager_UploadTaskComplete *) check_class_cast(message, [ACUploadManager_UploadTaskComplete class]);
    [self onUploadTaskCompleteWithLong:[((ACUploadManager_UploadTaskComplete *) nil_chk(taskComplete)) getRid] withACFileReference:[taskComplete getLocation] withARFileSystemReference:
#line 382
    [taskComplete getReference]];
  }
  else
#line 383
  if ([message isKindOfClass:[ACUploadManager_BindUpload class]]) {
    ACUploadManager_BindUpload *bindUpload = (ACUploadManager_BindUpload *) check_class_cast(message, [ACUploadManager_BindUpload class]);
    [self bindUploadWithLong:[((ACUploadManager_BindUpload *) nil_chk(bindUpload)) getRid] withACUploadFileCallback:[bindUpload getCallback]];
  }
  else
#line 386
  if ([message isKindOfClass:[ACUploadManager_UnbindUpload class]]) {
    ACUploadManager_UnbindUpload *unbindUpload = (ACUploadManager_UnbindUpload *) check_class_cast(message, [ACUploadManager_UnbindUpload class]);
    [self unbindUploadWithLong:[((ACUploadManager_UnbindUpload *) nil_chk(unbindUpload)) getRid] withACUploadFileCallback:[unbindUpload getCallback]];
  }
  else
#line 389
  if ([message isKindOfClass:[ACUploadManager_RequestState class]]) {
    ACUploadManager_RequestState *requestState = (ACUploadManager_RequestState *) check_class_cast(message, [ACUploadManager_RequestState class]);
    [self requestStateWithLong:[((ACUploadManager_RequestState *) nil_chk(requestState)) getRid] withACUploadFileCallback:[requestState getCallback]];
  }
  else
#line 392
  if ([message isKindOfClass:[ACUploadManager_PauseUpload class]]) {
    ACUploadManager_PauseUpload *pauseUpload = (ACUploadManager_PauseUpload *) check_class_cast(message, [ACUploadManager_PauseUpload class]);
    [self pauseUploadWithLong:[((ACUploadManager_PauseUpload *) nil_chk(pauseUpload)) getRid]];
  }
  else
#line 395
  if ([message isKindOfClass:[ACUploadManager_ResumeUpload class]]) {
    ACUploadManager_ResumeUpload *resumeUpload = (ACUploadManager_ResumeUpload *) check_class_cast(message, [ACUploadManager_ResumeUpload class]);
    [self resumeUploadWithLong:[((ACUploadManager_ResumeUpload *) nil_chk(resumeUpload)) getRid]];
  }
  else {
    
#line 399
    [self dropWithId:message];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "UploadManager", NULL, 0x1, NULL, NULL },
    { "startUploadWithLong:withNSString:withNSString:withARActorRef:", "startUpload", "V", 0x1, NULL, NULL },
    { "stopUploadWithLong:", "stopUpload", "V", 0x1, NULL, NULL },
    { "bindUploadWithLong:withACUploadFileCallback:", "bindUpload", "V", 0x1, NULL, NULL },
    { "unbindUploadWithLong:withACUploadFileCallback:", "unbindUpload", "V", 0x1, NULL, NULL },
    { "requestStateWithLong:withACUploadFileCallback:", "requestState", "V", 0x1, NULL, NULL },
    { "resumeUploadWithLong:", "resumeUpload", "V", 0x1, NULL, NULL },
    { "pauseUploadWithLong:", "pauseUpload", "V", 0x1, NULL, NULL },
    { "onUploadTaskErrorWithLong:", "onUploadTaskError", "V", 0x1, NULL, NULL },
    { "onUploadTaskProgressWithLong:withFloat:", "onUploadTaskProgress", "V", 0x1, NULL, NULL },
    { "onUploadTaskCompleteWithLong:withACFileReference:withARFileSystemReference:", "onUploadTaskComplete", "V", 0x1, NULL, NULL },
    { "checkQueue", NULL, "V", 0x2, NULL, NULL },
    { "findItemWithLong:", "findItem", "Lim.actor.core.modules.internal.file.UploadManager$QueueItem;", 0x2, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACUploadManager_TAG_, NULL, .constantValue.asLong = 0 },
    { "SIM_MAX_UPLOADS", "SIM_MAX_UPLOADS", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACUploadManager_SIM_MAX_UPLOADS },
    { "LOG_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "queue_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lim/actor/core/modules/internal/file/UploadManager$QueueItem;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.file.UploadManager$QueueItem;", "Lim.actor.core.modules.internal.file.UploadManager$StartUpload;", "Lim.actor.core.modules.internal.file.UploadManager$BindUpload;", "Lim.actor.core.modules.internal.file.UploadManager$UnbindUpload;", "Lim.actor.core.modules.internal.file.UploadManager$StopUpload;", "Lim.actor.core.modules.internal.file.UploadManager$UploadTaskError;", "Lim.actor.core.modules.internal.file.UploadManager$UploadTaskProgress;", "Lim.actor.core.modules.internal.file.UploadManager$UploadTaskComplete;", "Lim.actor.core.modules.internal.file.UploadManager$UploadCompleted;", "Lim.actor.core.modules.internal.file.UploadManager$UploadError;", "Lim.actor.core.modules.internal.file.UploadManager$RequestState;", "Lim.actor.core.modules.internal.file.UploadManager$PauseUpload;", "Lim.actor.core.modules.internal.file.UploadManager$ResumeUpload;"};
  static const J2ObjcClassInfo _ACUploadManager = { 2, "UploadManager", "im.actor.core.modules.internal.file", NULL, 0x1, 14, methods, 4, fields, 0, NULL, 13, inner_classes, NULL, NULL };
  return &_ACUploadManager;
}

@end


#line 32
void ACUploadManager_initWithACModuleContext_(ACUploadManager *self, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->queue_ = new_JavaUtilArrayList_init();
  
#line 34
  self->LOG_ = [((ACConfiguration *) nil_chk([((id<ACModuleContext>) nil_chk(context)) getConfiguration])) isEnableFilesLogging];
}


#line 32
ACUploadManager *new_ACUploadManager_initWithACModuleContext_(id<ACModuleContext> context) {
  ACUploadManager *self = [ACUploadManager alloc];
  ACUploadManager_initWithACModuleContext_(self, context);
  return self;
}


#line 285
void ACUploadManager_checkQueue(ACUploadManager *self) {
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- Checking queue");
  }
  
#line 290
  jint activeUploads = 0;
  for (ACUploadManager_QueueItem * __strong queueItem in nil_chk(self->queue_)) {
    if (((ACUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
      activeUploads++;
    }
  }
  
#line 297
  if (activeUploads >= ACUploadManager_SIM_MAX_UPLOADS) {
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- Already have max number of simultaneous uploads");
    }
    return;
  }
  
#line 304
  ACUploadManager_QueueItem *pendingQueue = nil;
  for (ACUploadManager_QueueItem * __strong queueItem in self->queue_) {
    if (!((ACUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_ && !queueItem->isStopped_) {
      pendingQueue = queueItem;
      break;
    }
  }
  if (pendingQueue == nil) {
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, @"- No work for downloading");
    }
    return;
  }
  
#line 318
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(ACUploadManager_TAG_, JreStrcat("$$", @"- Starting upload file #", ((ACUploadManager_QueueItem *) nil_chk(pendingQueue))->fileDescriptor_));
  }
  
#line 322
  ((ACUploadManager_QueueItem *) nil_chk(pendingQueue))->isStarted_ = true;
  
#line 324
  ACUploadManager_QueueItem *finalPendingQueue = pendingQueue;
  pendingQueue->taskRef_ = [((ARActorSystem *) nil_chk([self system])) actorOfWithARProps:[((ARProps *) nil_chk(ARProps_createWithIOSClass_withARActorCreator_(ACUploadTask_class_(), new_ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(self, finalPendingQueue)))) changeDispatcherWithNSString:
#line 331
  @"heavy"] withNSString:JreStrcat("$J", @"actor/upload/task_", ACRandomUtils_nextRid())];
}


#line 334
ACUploadManager_QueueItem *ACUploadManager_findItemWithLong_(ACUploadManager *self, jlong rid) {
  for (ACUploadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if (((ACUploadManager_QueueItem *) nil_chk(q))->rid_ == rid) {
      return q;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 343
@implementation ACUploadManager_QueueItem


#line 354
- (instancetype)initWithACUploadManager:(ACUploadManager *)outer$
                               withLong:(jlong)rid
                           withNSString:(NSString *)fileDescriptor
                           withNSString:(NSString *)fileName
                         withARActorRef:(ARActorRef *)requestActor {
  ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(self, outer$, rid, fileDescriptor, fileName, requestActor);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACUploadManager:withLong:withNSString:withNSString:withARActorRef:", "QueueItem", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fileDescriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isStopped_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isStarted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "progress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "taskRef_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "requestActor_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "callbacks_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lim/actor/core/viewmodel/UploadFileCallback;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_QueueItem = { 2, "QueueItem", "im.actor.core.modules.internal.file", "UploadManager", 0x2, 1, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_QueueItem;
}

@end


#line 354
void ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(ACUploadManager_QueueItem *self, ACUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, ARActorRef *requestActor) {
  (void) NSObject_init(self);
  self->callbacks_ = new_JavaUtilArrayList_init();
  
#line 355
  self->rid_ = rid;
  self->fileDescriptor_ = fileDescriptor;
  self->requestActor_ = requestActor;
  self->fileName_ = fileName;
}


#line 354
ACUploadManager_QueueItem *new_ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(ACUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, ARActorRef *requestActor) {
  ACUploadManager_QueueItem *self = [ACUploadManager_QueueItem alloc];
  ACUploadManager_QueueItem_initWithACUploadManager_withLong_withNSString_withNSString_withARActorRef_(self, outer$, rid, fileDescriptor, fileName, requestActor);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_QueueItem)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 403
@implementation ACUploadManager_StartUpload


#line 408
- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)fileDescriptor
                withNSString:(NSString *)fileName {
  ACUploadManager_StartUpload_initWithLong_withNSString_withNSString_(self, rid, fileDescriptor, fileName);
  return self;
}


#line 414
- (jlong)getRid {
  return rid_;
}

- (NSString *)getFileDescriptor {
  return fileDescriptor_;
}

- (NSString *)getFileName {
  return fileName_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withNSString:withNSString:", "StartUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getFileDescriptor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fileDescriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_StartUpload = { 2, "StartUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_StartUpload;
}

@end


#line 408
void ACUploadManager_StartUpload_initWithLong_withNSString_withNSString_(ACUploadManager_StartUpload *self, jlong rid, NSString *fileDescriptor, NSString *fileName) {
  (void) NSObject_init(self);
  
#line 409
  self->rid_ = rid;
  self->fileDescriptor_ = fileDescriptor;
  self->fileName_ = fileName;
}


#line 408
ACUploadManager_StartUpload *new_ACUploadManager_StartUpload_initWithLong_withNSString_withNSString_(jlong rid, NSString *fileDescriptor, NSString *fileName) {
  ACUploadManager_StartUpload *self = [ACUploadManager_StartUpload alloc];
  ACUploadManager_StartUpload_initWithLong_withNSString_withNSString_(self, rid, fileDescriptor, fileName);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_StartUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 427
@implementation ACUploadManager_BindUpload


#line 431
- (instancetype)initWithLong:(jlong)rid
    withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_BindUpload_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}


#line 436
- (jlong)getRid {
  return rid_;
}

- (id<ACUploadFileCallback>)getCallback {
  return callback_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACUploadFileCallback:", "BindUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.UploadFileCallback;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_BindUpload = { 2, "BindUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_BindUpload;
}

@end


#line 431
void ACUploadManager_BindUpload_initWithLong_withACUploadFileCallback_(ACUploadManager_BindUpload *self, jlong rid, id<ACUploadFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 432
  self->rid_ = rid;
  self->callback_ = callback;
}


#line 431
ACUploadManager_BindUpload *new_ACUploadManager_BindUpload_initWithLong_withACUploadFileCallback_(jlong rid, id<ACUploadFileCallback> callback) {
  ACUploadManager_BindUpload *self = [ACUploadManager_BindUpload alloc];
  ACUploadManager_BindUpload_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_BindUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 445
@implementation ACUploadManager_UnbindUpload


#line 449
- (instancetype)initWithLong:(jlong)rid
    withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_UnbindUpload_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}


#line 454
- (jlong)getRid {
  return rid_;
}

- (id<ACUploadFileCallback>)getCallback {
  return callback_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACUploadFileCallback:", "UnbindUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.UploadFileCallback;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UnbindUpload = { 2, "UnbindUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UnbindUpload;
}

@end


#line 449
void ACUploadManager_UnbindUpload_initWithLong_withACUploadFileCallback_(ACUploadManager_UnbindUpload *self, jlong rid, id<ACUploadFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 450
  self->rid_ = rid;
  self->callback_ = callback;
}


#line 449
ACUploadManager_UnbindUpload *new_ACUploadManager_UnbindUpload_initWithLong_withACUploadFileCallback_(jlong rid, id<ACUploadFileCallback> callback) {
  ACUploadManager_UnbindUpload *self = [ACUploadManager_UnbindUpload alloc];
  ACUploadManager_UnbindUpload_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UnbindUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 463
@implementation ACUploadManager_StopUpload


#line 466
- (instancetype)initWithLong:(jlong)rid {
  ACUploadManager_StopUpload_initWithLong_(self, rid);
  return self;
}


#line 470
- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "StopUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_StopUpload = { 2, "StopUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_StopUpload;
}

@end


#line 466
void ACUploadManager_StopUpload_initWithLong_(ACUploadManager_StopUpload *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 467
  self->rid_ = rid;
}


#line 466
ACUploadManager_StopUpload *new_ACUploadManager_StopUpload_initWithLong_(jlong rid) {
  ACUploadManager_StopUpload *self = [ACUploadManager_StopUpload alloc];
  ACUploadManager_StopUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_StopUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 475
@implementation ACUploadManager_UploadTaskError


#line 478
- (instancetype)initWithLong:(jlong)rid {
  ACUploadManager_UploadTaskError_initWithLong_(self, rid);
  return self;
}


#line 482
- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "UploadTaskError", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UploadTaskError = { 2, "UploadTaskError", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UploadTaskError;
}

@end


#line 478
void ACUploadManager_UploadTaskError_initWithLong_(ACUploadManager_UploadTaskError *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 479
  self->rid_ = rid;
}


#line 478
ACUploadManager_UploadTaskError *new_ACUploadManager_UploadTaskError_initWithLong_(jlong rid) {
  ACUploadManager_UploadTaskError *self = [ACUploadManager_UploadTaskError alloc];
  ACUploadManager_UploadTaskError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UploadTaskError)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 487
@implementation ACUploadManager_UploadTaskProgress


#line 491
- (instancetype)initWithLong:(jlong)rid
                   withFloat:(jfloat)progress {
  ACUploadManager_UploadTaskProgress_initWithLong_withFloat_(self, rid, progress);
  return self;
}


#line 496
- (jlong)getRid {
  return rid_;
}

- (jfloat)getProgress {
  return progress_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withFloat:", "UploadTaskProgress", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getProgress", NULL, "F", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "progress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UploadTaskProgress = { 2, "UploadTaskProgress", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UploadTaskProgress;
}

@end


#line 491
void ACUploadManager_UploadTaskProgress_initWithLong_withFloat_(ACUploadManager_UploadTaskProgress *self, jlong rid, jfloat progress) {
  (void) NSObject_init(self);
  
#line 492
  self->rid_ = rid;
  self->progress_ = progress;
}


#line 491
ACUploadManager_UploadTaskProgress *new_ACUploadManager_UploadTaskProgress_initWithLong_withFloat_(jlong rid, jfloat progress) {
  ACUploadManager_UploadTaskProgress *self = [ACUploadManager_UploadTaskProgress alloc];
  ACUploadManager_UploadTaskProgress_initWithLong_withFloat_(self, rid, progress);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UploadTaskProgress)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 505
@implementation ACUploadManager_UploadTaskComplete


#line 510
- (instancetype)initWithLong:(jlong)rid
         withACFileReference:(ACFileReference *)location
   withARFileSystemReference:(id<ARFileSystemReference>)reference {
  ACUploadManager_UploadTaskComplete_initWithLong_withACFileReference_withARFileSystemReference_(self, rid, location, reference);
  return self;
}


#line 516
- (jlong)getRid {
  return rid_;
}

- (id<ARFileSystemReference>)getReference {
  return reference_;
}

- (ACFileReference *)getLocation {
  return location_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACFileReference:withARFileSystemReference:", "UploadTaskComplete", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getReference", NULL, "Lim.actor.runtime.files.FileSystemReference;", 0x1, NULL, NULL },
    { "getLocation", NULL, "Lim.actor.core.entity.FileReference;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "location_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "reference_", NULL, 0x2, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UploadTaskComplete = { 2, "UploadTaskComplete", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UploadTaskComplete;
}

@end


#line 510
void ACUploadManager_UploadTaskComplete_initWithLong_withACFileReference_withARFileSystemReference_(ACUploadManager_UploadTaskComplete *self, jlong rid, ACFileReference *location, id<ARFileSystemReference> reference) {
  (void) NSObject_init(self);
  
#line 511
  self->rid_ = rid;
  self->location_ = location;
  self->reference_ = reference;
}


#line 510
ACUploadManager_UploadTaskComplete *new_ACUploadManager_UploadTaskComplete_initWithLong_withACFileReference_withARFileSystemReference_(jlong rid, ACFileReference *location, id<ARFileSystemReference> reference) {
  ACUploadManager_UploadTaskComplete *self = [ACUploadManager_UploadTaskComplete alloc];
  ACUploadManager_UploadTaskComplete_initWithLong_withACFileReference_withARFileSystemReference_(self, rid, location, reference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UploadTaskComplete)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 529
@implementation ACUploadManager_UploadCompleted


#line 533
- (instancetype)initWithLong:(jlong)rid
         withACFileReference:(ACFileReference *)fileReference {
  ACUploadManager_UploadCompleted_initWithLong_withACFileReference_(self, rid, fileReference);
  return self;
}


#line 538
- (jlong)getRid {
  return rid_;
}

- (ACFileReference *)getFileReference {
  return fileReference_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACFileReference:", "UploadCompleted", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getFileReference", NULL, "Lim.actor.core.entity.FileReference;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "fileReference_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UploadCompleted = { 2, "UploadCompleted", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UploadCompleted;
}

@end


#line 533
void ACUploadManager_UploadCompleted_initWithLong_withACFileReference_(ACUploadManager_UploadCompleted *self, jlong rid, ACFileReference *fileReference) {
  (void) NSObject_init(self);
  
#line 534
  self->rid_ = rid;
  self->fileReference_ = fileReference;
}


#line 533
ACUploadManager_UploadCompleted *new_ACUploadManager_UploadCompleted_initWithLong_withACFileReference_(jlong rid, ACFileReference *fileReference) {
  ACUploadManager_UploadCompleted *self = [ACUploadManager_UploadCompleted alloc];
  ACUploadManager_UploadCompleted_initWithLong_withACFileReference_(self, rid, fileReference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UploadCompleted)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 547
@implementation ACUploadManager_UploadError


#line 550
- (instancetype)initWithLong:(jlong)rid {
  ACUploadManager_UploadError_initWithLong_(self, rid);
  return self;
}


#line 554
- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "UploadError", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_UploadError = { 2, "UploadError", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_UploadError;
}

@end


#line 550
void ACUploadManager_UploadError_initWithLong_(ACUploadManager_UploadError *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 551
  self->rid_ = rid;
}


#line 550
ACUploadManager_UploadError *new_ACUploadManager_UploadError_initWithLong_(jlong rid) {
  ACUploadManager_UploadError *self = [ACUploadManager_UploadError alloc];
  ACUploadManager_UploadError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_UploadError)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 559
@implementation ACUploadManager_RequestState


#line 563
- (instancetype)initWithLong:(jlong)rid
    withACUploadFileCallback:(id<ACUploadFileCallback>)callback {
  ACUploadManager_RequestState_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}


#line 568
- (jlong)getRid {
  return rid_;
}

- (id<ACUploadFileCallback>)getCallback {
  return callback_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACUploadFileCallback:", "RequestState", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.viewmodel.UploadFileCallback;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x2, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_RequestState = { 2, "RequestState", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_RequestState;
}

@end


#line 563
void ACUploadManager_RequestState_initWithLong_withACUploadFileCallback_(ACUploadManager_RequestState *self, jlong rid, id<ACUploadFileCallback> callback) {
  (void) NSObject_init(self);
  
#line 564
  self->rid_ = rid;
  self->callback_ = callback;
}


#line 563
ACUploadManager_RequestState *new_ACUploadManager_RequestState_initWithLong_withACUploadFileCallback_(jlong rid, id<ACUploadFileCallback> callback) {
  ACUploadManager_RequestState *self = [ACUploadManager_RequestState alloc];
  ACUploadManager_RequestState_initWithLong_withACUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_RequestState)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 577
@implementation ACUploadManager_PauseUpload


#line 580
- (instancetype)initWithLong:(jlong)rid {
  ACUploadManager_PauseUpload_initWithLong_(self, rid);
  return self;
}


#line 584
- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "PauseUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_PauseUpload = { 2, "PauseUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_PauseUpload;
}

@end


#line 580
void ACUploadManager_PauseUpload_initWithLong_(ACUploadManager_PauseUpload *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 581
  self->rid_ = rid;
}


#line 580
ACUploadManager_PauseUpload *new_ACUploadManager_PauseUpload_initWithLong_(jlong rid) {
  ACUploadManager_PauseUpload *self = [ACUploadManager_PauseUpload alloc];
  ACUploadManager_PauseUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_PauseUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"


#line 589
@implementation ACUploadManager_ResumeUpload


#line 592
- (instancetype)initWithLong:(jlong)rid {
  ACUploadManager_ResumeUpload_initWithLong_(self, rid);
  return self;
}


#line 596
- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "ResumeUpload", NULL, 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUploadManager_ResumeUpload = { 2, "ResumeUpload", "im.actor.core.modules.internal.file", "UploadManager", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUploadManager_ResumeUpload;
}

@end


#line 592
void ACUploadManager_ResumeUpload_initWithLong_(ACUploadManager_ResumeUpload *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 593
  self->rid_ = rid;
}


#line 592
ACUploadManager_ResumeUpload *new_ACUploadManager_ResumeUpload_initWithLong_(jlong rid) {
  ACUploadManager_ResumeUpload *self = [ACUploadManager_ResumeUpload alloc];
  ACUploadManager_ResumeUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_ResumeUpload)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$1


#line 71
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$1_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "stopUploadWithLong:" };
  static const J2ObjcClassInfo _ACUploadManager_$1 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$1;
}

@end

void ACUploadManager_$1_initWithACUploadFileCallback_(ACUploadManager_$1 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$1 *new_ACUploadManager_$1_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$1 *self = [ACUploadManager_$1 alloc];
  ACUploadManager_$1_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$2


#line 85
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$2_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "bindUploadWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$2 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$2;
}

@end

void ACUploadManager_$2_initWithACUploadFileCallback_(ACUploadManager_$2 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$2 *new_ACUploadManager_$2_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$2 *self = [ACUploadManager_$2 alloc];
  ACUploadManager_$2_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$3


#line 93
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$3_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "bindUploadWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$3 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$3;
}

@end

void ACUploadManager_$3_initWithACUploadFileCallback_(ACUploadManager_$3 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$3 *new_ACUploadManager_$3_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$3 *self = [ACUploadManager_$3 alloc];
  ACUploadManager_$3_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$3)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$4


#line 101
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onUploading:val$progress_];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "bindUploadWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$4 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$4;
}

@end

void ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(ACUploadManager_$4 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadManager_$4 *new_ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  ACUploadManager_$4 *self = [ACUploadManager_$4 alloc];
  ACUploadManager_$4_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$4)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$5


#line 122
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$5_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "requestStateWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$5 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$5;
}

@end

void ACUploadManager_$5_initWithACUploadFileCallback_(ACUploadManager_$5 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$5 *new_ACUploadManager_$5_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$5 *self = [ACUploadManager_$5 alloc];
  ACUploadManager_$5_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$5)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$6


#line 130
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$6_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "requestStateWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$6 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$6;
}

@end

void ACUploadManager_$6_initWithACUploadFileCallback_(ACUploadManager_$6 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$6 *new_ACUploadManager_$6_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$6 *self = [ACUploadManager_$6 alloc];
  ACUploadManager_$6_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$6)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$7


#line 138
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onUploading:val$progress_];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "requestStateWithLong:withACUploadFileCallback:" };
  static const J2ObjcClassInfo _ACUploadManager_$7 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$7;
}

@end

void ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(ACUploadManager_$7 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadManager_$7 *new_ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  ACUploadManager_$7 *self = [ACUploadManager_$7 alloc];
  ACUploadManager_$7_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$7)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$8


#line 159
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onUploading:0];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$8_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "resumeUploadWithLong:" };
  static const J2ObjcClassInfo _ACUploadManager_$8 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$8;
}

@end

void ACUploadManager_$8_initWithACUploadFileCallback_(ACUploadManager_$8 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$8 *new_ACUploadManager_$8_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$8 *self = [ACUploadManager_$8 alloc];
  ACUploadManager_$8_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$8)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$9


#line 180
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$9_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "pauseUploadWithLong:" };
  static const J2ObjcClassInfo _ACUploadManager_$9 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$9;
}

@end

void ACUploadManager_$9_initWithACUploadFileCallback_(ACUploadManager_$9 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$9 *new_ACUploadManager_$9_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$9 *self = [ACUploadManager_$9 alloc];
  ACUploadManager_$9_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$9)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$10


#line 213
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$10_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$callback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "onUploadTaskErrorWithLong:" };
  static const J2ObjcClassInfo _ACUploadManager_$10 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$10;
}

@end

void ACUploadManager_$10_initWithACUploadFileCallback_(ACUploadManager_$10 *self, id<ACUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$10 *new_ACUploadManager_$10_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$10 *self = [ACUploadManager_$10 alloc];
  ACUploadManager_$10_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$10)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$11


#line 243
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$fileCallback_)) onUploading:val$progress_];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:withFloat:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$fileCallback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$progress_", NULL, 0x1012, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "onUploadTaskProgressWithLong:withFloat:" };
  static const J2ObjcClassInfo _ACUploadManager_$11 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$11;
}

@end

void ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(ACUploadManager_$11 *self, id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$fileCallback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ACUploadManager_$11 *new_ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(id<ACUploadFileCallback> capture$0, jfloat capture$1) {
  ACUploadManager_$11 *self = [ACUploadManager_$11 alloc];
  ACUploadManager_$11_initWithACUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$11)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$12


#line 274
- (void)run {
  [((id<ACUploadFileCallback>) nil_chk(val$fileCallback_)) onUploaded];
}

- (instancetype)initWithACUploadFileCallback:(id<ACUploadFileCallback>)capture$0 {
  ACUploadManager_$12_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUploadFileCallback:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$fileCallback_", NULL, 0x1012, "Lim.actor.core.viewmodel.UploadFileCallback;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "onUploadTaskCompleteWithLong:withACFileReference:withARFileSystemReference:" };
  static const J2ObjcClassInfo _ACUploadManager_$12 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUploadManager_$12;
}

@end

void ACUploadManager_$12_initWithACUploadFileCallback_(ACUploadManager_$12 *self, id<ACUploadFileCallback> capture$0) {
  self->val$fileCallback_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$12 *new_ACUploadManager_$12_initWithACUploadFileCallback_(id<ACUploadFileCallback> capture$0) {
  ACUploadManager_$12 *self = [ACUploadManager_$12 alloc];
  ACUploadManager_$12_initWithACUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$12)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/UploadManager.java"

@implementation ACUploadManager_$13


#line 327
- (ACUploadTask *)create {
  return new_ACUploadTask_initWithLong_withNSString_withNSString_withARActorRef_withACModuleContext_(((ACUploadManager_QueueItem *) nil_chk(val$finalPendingQueue_))->rid_, val$finalPendingQueue_->fileDescriptor_, val$finalPendingQueue_->fileName_,
#line 329
  [this$0_ self__], [this$0_ context]);
}

- (instancetype)initWithACUploadManager:(ACUploadManager *)outer$
          withACUploadManager_QueueItem:(ACUploadManager_QueueItem *)capture$0 {
  ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lim.actor.core.modules.internal.file.UploadTask;", 0x1, NULL, NULL },
    { "initWithACUploadManager:withACUploadManager_QueueItem:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadManager;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$finalPendingQueue_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.UploadManager$QueueItem;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUploadManager", "checkQueue" };
  static const J2ObjcClassInfo _ACUploadManager_$13 = { 2, "", "im.actor.core.modules.internal.file", "UploadManager", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/runtime/actors/ActorCreator<Lim/actor/core/modules/internal/file/UploadTask;>;" };
  return &_ACUploadManager_$13;
}

@end

void ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(ACUploadManager_$13 *self, ACUploadManager *outer$, ACUploadManager_QueueItem *capture$0) {
  self->this$0_ = outer$;
  self->val$finalPendingQueue_ = capture$0;
  (void) NSObject_init(self);
}

ACUploadManager_$13 *new_ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(ACUploadManager *outer$, ACUploadManager_QueueItem *capture$0) {
  ACUploadManager_$13 *self = [ACUploadManager_$13 alloc];
  ACUploadManager_$13_initWithACUploadManager_withACUploadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUploadManager_$13)

#pragma clang diagnostic pop
