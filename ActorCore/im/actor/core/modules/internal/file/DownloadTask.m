//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java
//

#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/Configuration.h"
#include "im/actor/core/api/ApiFileLocation.h"
#include "im/actor/core/api/rpc/RequestGetFileUrl.h"
#include "im/actor/core/api/rpc/ResponseGetFileUrl.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/file/DownloadManager.h"
#include "im/actor/core/modules/internal/file/DownloadTask.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/network/RpcCallback.h"
#include "im/actor/core/network/RpcException.h"
#include "im/actor/runtime/HTTP.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/Storage.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/files/FileSystemReference.h"
#include "im/actor/runtime/files/OutputFile.h"
#include "im/actor/runtime/http/FileDownloadCallback.h"
#include <j2objc/java/lang/Runnable.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACDownloadTask_SIM_BLOCKS_COUNT 4
#define ACDownloadTask_NOTIFY_THROTTLE 1000

@interface ACDownloadTask () {
 @public
  NSString *TAG_;
  jboolean LOG_;
  ACFileReference *fileReference_;
  ARActorRef *manager_;
  id<ARFileSystemReference> destReference_;
  id<AROutputFile> outputFile_;
  jboolean isCompleted_;
  jlong lastNotifyDate_;
  jfloat currentProgress_;
  NSString *fileUrl_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint currentDownloads_;
  jint downloaded_;
}

- (void)requestUrl;

- (void)startDownload;

- (void)completeDownload;

- (void)checkQueue;

- (void)downloadPartWithInt:(jint)blockIndex
                    withInt:(jint)fileOffset;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)performReportProgress;

- (void)reportCompleteWithARFileSystemReference:(id<ARFileSystemReference>)reference;

@end

J2OBJC_FIELD_SETTER(ACDownloadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ACDownloadTask, fileReference_, ACFileReference *)
J2OBJC_FIELD_SETTER(ACDownloadTask, manager_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACDownloadTask, destReference_, id<ARFileSystemReference>)
J2OBJC_FIELD_SETTER(ACDownloadTask, outputFile_, id<AROutputFile>)
J2OBJC_FIELD_SETTER(ACDownloadTask, fileUrl_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ACDownloadTask, SIM_BLOCKS_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(ACDownloadTask, NOTIFY_THROTTLE, jint)

__attribute__((unused)) static void ACDownloadTask_requestUrl(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_startDownload(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_completeDownload(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_checkQueue(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_downloadPartWithInt_withInt_(ACDownloadTask *self, jint blockIndex, jint fileOffset);

__attribute__((unused)) static void ACDownloadTask_reportError(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_reportProgressWithFloat_(ACDownloadTask *self, jfloat progress);

__attribute__((unused)) static void ACDownloadTask_performReportProgress(ACDownloadTask *self);

__attribute__((unused)) static void ACDownloadTask_reportCompleteWithARFileSystemReference_(ACDownloadTask *self, id<ARFileSystemReference> reference);

@interface ACDownloadTask_NotifyProgress : NSObject

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadTask_NotifyProgress)

__attribute__((unused)) static void ACDownloadTask_NotifyProgress_initWithACDownloadTask_(ACDownloadTask_NotifyProgress *self, ACDownloadTask *outer$);

__attribute__((unused)) static ACDownloadTask_NotifyProgress *new_ACDownloadTask_NotifyProgress_initWithACDownloadTask_(ACDownloadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadTask_NotifyProgress)

@interface ACDownloadTask_$1 : NSObject < ACRpcCallback > {
 @public
  ACDownloadTask *this$0_;
}

- (void)onResult:(ARResponseGetFileUrl *)response;

- (void)onError:(ACRpcException *)e;

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadTask_$1)

J2OBJC_FIELD_SETTER(ACDownloadTask_$1, this$0_, ACDownloadTask *)

__attribute__((unused)) static void ACDownloadTask_$1_initWithACDownloadTask_(ACDownloadTask_$1 *self, ACDownloadTask *outer$);

__attribute__((unused)) static ACDownloadTask_$1 *new_ACDownloadTask_$1_initWithACDownloadTask_(ACDownloadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadTask_$1)

@interface ACDownloadTask_$2 : NSObject < ARFileDownloadCallback > {
 @public
  ACDownloadTask *this$0_;
  jint val$blockIndex_;
  jint val$fileOffset_;
}

- (void)onDownloadedWithByteArray:(IOSByteArray *)data;

- (void)onDownloadFailure;

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$
                               withInt:(jint)capture$0
                               withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadTask_$2)

J2OBJC_FIELD_SETTER(ACDownloadTask_$2, this$0_, ACDownloadTask *)

__attribute__((unused)) static void ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(ACDownloadTask_$2 *self, ACDownloadTask *outer$, jint capture$0, jint capture$1);

__attribute__((unused)) static ACDownloadTask_$2 *new_ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(ACDownloadTask *outer$, jint capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadTask_$2)

@interface ACDownloadTask_$2_$1 : NSObject < JavaLangRunnable > {
 @public
  ACDownloadTask_$2 *this$0_;
  IOSByteArray *val$data_;
}

- (void)run;

- (instancetype)initWithACDownloadTask_$2:(ACDownloadTask_$2 *)outer$
                            withByteArray:(IOSByteArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadTask_$2_$1)

J2OBJC_FIELD_SETTER(ACDownloadTask_$2_$1, this$0_, ACDownloadTask_$2 *)
J2OBJC_FIELD_SETTER(ACDownloadTask_$2_$1, val$data_, IOSByteArray *)

__attribute__((unused)) static void ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(ACDownloadTask_$2_$1 *self, ACDownloadTask_$2 *outer$, IOSByteArray *capture$0);

__attribute__((unused)) static ACDownloadTask_$2_$1 *new_ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(ACDownloadTask_$2 *outer$, IOSByteArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadTask_$2_$1)

@interface ACDownloadTask_$2_$2 : NSObject < JavaLangRunnable > {
 @public
  ACDownloadTask_$2 *this$0_;
}

- (void)run;

- (instancetype)initWithACDownloadTask_$2:(ACDownloadTask_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACDownloadTask_$2_$2)

J2OBJC_FIELD_SETTER(ACDownloadTask_$2_$2, this$0_, ACDownloadTask_$2 *)

__attribute__((unused)) static void ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(ACDownloadTask_$2_$2 *self, ACDownloadTask_$2 *outer$);

__attribute__((unused)) static ACDownloadTask_$2_$2 *new_ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(ACDownloadTask_$2 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACDownloadTask_$2_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"


#line 23
@implementation ACDownloadTask


#line 49
- (instancetype)initWithACFileReference:(ACFileReference *)fileReference
                         withARActorRef:(ARActorRef *)manager
                    withACModuleContext:(id<ACModuleContext>)context {
  ACDownloadTask_initWithACFileReference_withARActorRef_withACModuleContext_(self, fileReference, manager, context);
  return self;
}


#line 58
- (void)preStart {
  if (LOG_) {
    ARLog_dWithNSString_withNSString_(TAG_, @"Creating file...");
  }
  
#line 63
  destReference_ = ARStorage_createTempFile();
  if (destReference_ == nil) {
    ACDownloadTask_reportError(self);
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(TAG_, @"Unable to create reference");
    }
    return;
  }
  
#line 72
  outputFile_ = [((id<ARFileSystemReference>) nil_chk(destReference_)) openWriteWithSize:[((ACFileReference *) nil_chk(fileReference_)) getFileSize]];
  if (outputFile_ == nil) {
    ACDownloadTask_reportError(self);
    if (LOG_) {
      ARLog_dWithNSString_withNSString_(TAG_, @"Unable to write wile");
    }
    return;
  }
  
#line 81
  ACDownloadTask_requestUrl(self);
}


#line 85
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACDownloadTask_NotifyProgress class]]) {
    ACDownloadTask_performReportProgress(self);
  }
  else {
    
#line 89
    [super onReceiveWithId:message];
  }
}


#line 93
- (void)requestUrl {
  ACDownloadTask_requestUrl(self);
}


#line 118
- (void)startDownload {
  ACDownloadTask_startDownload(self);
}


#line 130
- (void)completeDownload {
  ACDownloadTask_completeDownload(self);
}


#line 156
- (void)checkQueue {
  ACDownloadTask_checkQueue(self);
}


#line 185
- (void)downloadPartWithInt:(jint)blockIndex
                    withInt:(jint)fileOffset {
  ACDownloadTask_downloadPartWithInt_withInt_(self, blockIndex, fileOffset);
}


#line 222
- (void)reportError {
  ACDownloadTask_reportError(self);
}


#line 230
- (void)reportProgressWithFloat:(jfloat)progress {
  ACDownloadTask_reportProgressWithFloat_(self, progress);
}


#line 248
- (void)performReportProgress {
  ACDownloadTask_performReportProgress(self);
}


#line 255
- (void)reportCompleteWithARFileSystemReference:(id<ARFileSystemReference>)reference {
  ACDownloadTask_reportCompleteWithARFileSystemReference_(self, reference);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACFileReference:withARActorRef:withACModuleContext:", "DownloadTask", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
    { "requestUrl", NULL, "V", 0x2, NULL, NULL },
    { "startDownload", NULL, "V", 0x2, NULL, NULL },
    { "completeDownload", NULL, "V", 0x2, NULL, NULL },
    { "checkQueue", NULL, "V", 0x2, NULL, NULL },
    { "downloadPartWithInt:withInt:", "downloadPart", "V", 0x2, NULL, NULL },
    { "reportError", NULL, "V", 0x2, NULL, NULL },
    { "reportProgressWithFloat:", "reportProgress", "V", 0x2, NULL, NULL },
    { "performReportProgress", NULL, "V", 0x2, NULL, NULL },
    { "reportCompleteWithARFileSystemReference:", "reportComplete", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SIM_BLOCKS_COUNT", "SIM_BLOCKS_COUNT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACDownloadTask_SIM_BLOCKS_COUNT },
    { "NOTIFY_THROTTLE", "NOTIFY_THROTTLE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACDownloadTask_NOTIFY_THROTTLE },
    { "TAG_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "LOG_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fileReference_", NULL, 0x2, "Lim.actor.core.entity.FileReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "manager_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "destReference_", NULL, 0x2, "Lim.actor.runtime.files.FileSystemReference;", NULL, NULL, .constantValue.asLong = 0 },
    { "outputFile_", NULL, 0x2, "Lim.actor.runtime.files.OutputFile;", NULL, NULL, .constantValue.asLong = 0 },
    { "isCompleted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lastNotifyDate_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "currentProgress_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "fileUrl_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "blockSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "blocksCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nextBlock_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentDownloads_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "downloaded_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.file.DownloadTask$NotifyProgress;"};
  static const J2ObjcClassInfo _ACDownloadTask = { 2, "DownloadTask", "im.actor.core.modules.internal.file", NULL, 0x1, 12, methods, 17, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ACDownloadTask;
}

@end


#line 49
void ACDownloadTask_initWithACFileReference_withARActorRef_withACModuleContext_(ACDownloadTask *self, ACFileReference *fileReference, ARActorRef *manager, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->blockSize_ =
#line 43
  32 * 1024;
  self->nextBlock_ =
#line 45
  0;
  self->currentDownloads_ = 0;
  self->downloaded_ = 0;
  
#line 51
  self->TAG_ = JreStrcat("$JC", @"DownloadTask{", [((ACFileReference *) nil_chk(fileReference)) getFileId], '}');
  self->LOG_ = [((ACConfiguration *) nil_chk([((id<ACModuleContext>) nil_chk(context)) getConfiguration])) isEnableFilesLogging];
  self->fileReference_ = fileReference;
  self->manager_ = manager;
}


#line 49
ACDownloadTask *new_ACDownloadTask_initWithACFileReference_withARActorRef_withACModuleContext_(ACFileReference *fileReference, ARActorRef *manager, id<ACModuleContext> context) {
  ACDownloadTask *self = [ACDownloadTask alloc];
  ACDownloadTask_initWithACFileReference_withARActorRef_withACModuleContext_(self, fileReference, manager, context);
  return self;
}


#line 93
void ACDownloadTask_requestUrl(ACDownloadTask *self) {
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, @"Loading url...");
  }
  [self requestWithACRequest:new_ARRequestGetFileUrl_initWithARApiFileLocation_(new_ARApiFileLocation_initWithLong_withLong_([((ACFileReference *) nil_chk(self->fileReference_)) getFileId],
#line 98
  [self->fileReference_ getAccessHash])) withACRpcCallback:new_ACDownloadTask_$1_initWithACDownloadTask_(self)];
}


#line 118
void ACDownloadTask_startDownload(ACDownloadTask *self) {
  self->blocksCount_ = [((ACFileReference *) nil_chk(self->fileReference_)) getFileSize] / self->blockSize_;
  if ([self->fileReference_ getFileSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  
#line 124
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting downloading ", self->blocksCount_, @" blocks"));
  }
  ACDownloadTask_checkQueue(self);
}


#line 130
void ACDownloadTask_completeDownload(ACDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  
#line 135
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, @"Closing file...");
  }
  if (![((id<AROutputFile>) nil_chk(self->outputFile_)) close]) {
    ACDownloadTask_reportError(self);
    return;
  }
  
#line 143
  id<ARFileSystemReference> reference = ARStorage_commitTempFileWithARFileSystemReference_withLong_withNSString_(self->destReference_, [((ACFileReference *) nil_chk(self->fileReference_)) getFileId],
#line 144
  [self->fileReference_ getFileName]);
  if (reference == nil) {
    ACDownloadTask_reportError(self);
    return;
  }
  
#line 150
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$$C", @"Complete download {", [((id<ARFileSystemReference>) nil_chk(reference)) getDescriptor], '}'));
  }
  ACDownloadTask_reportCompleteWithARFileSystemReference_(self, reference);
}


#line 156
void ACDownloadTask_checkQueue(ACDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  
#line 161
  if (self->LOG_) {
    ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$ICI", @"checkQueue ", self->currentDownloads_, '/', self->nextBlock_));
  }
  if (self->currentDownloads_ == 0 && self->nextBlock_ >= self->blocksCount_) {
    ACDownloadTask_completeDownload(self);
  }
  else
#line 166
  if (self->currentDownloads_ < ACDownloadTask_SIM_BLOCKS_COUNT && self->nextBlock_ < self->blocksCount_) {
    self->currentDownloads_++;
    jint blockIndex = self->nextBlock_++;
    jint offset = blockIndex * self->blockSize_;
    
#line 171
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting part #", blockIndex, @" download"));
    }
    
#line 175
    ACDownloadTask_downloadPartWithInt_withInt_(self, blockIndex, offset);
    
#line 177
    ACDownloadTask_checkQueue(self);
  }
  else {
    
#line 179
    if (self->LOG_) {
      ARLog_dWithNSString_withNSString_(self->TAG_, @"Task queue is full");
    }
  }
}


#line 185
void ACDownloadTask_downloadPartWithInt_withInt_(ACDownloadTask *self, jint blockIndex, jint fileOffset) {
  ARHTTP_getMethodWithNSString_withInt_withInt_withInt_withARFileDownloadCallback_(self->fileUrl_, fileOffset, self->blockSize_, [((ACFileReference *) nil_chk(self->fileReference_)) getFileSize], new_ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(self, blockIndex, fileOffset));
}


#line 222
void ACDownloadTask_reportError(ACDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = true;
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACDownloadManager_OnDownloadedError_initWithLong_([((ACFileReference *) nil_chk(self->fileReference_)) getFileId])];
}

void ACDownloadTask_reportProgressWithFloat_(ACDownloadTask *self, jfloat progress) {
  if (self->isCompleted_) {
    return;
  }
  
#line 235
  if (progress > self->currentProgress_) {
    self->currentProgress_ = progress;
  }
  
#line 239
  jlong delta = ARRuntime_getActorTime() - self->lastNotifyDate_;
  if (delta > ACDownloadTask_NOTIFY_THROTTLE) {
    self->lastNotifyDate_ = ARRuntime_getActorTime();
    [((ARActorRef *) nil_chk([self self__])) sendWithId:new_ACDownloadTask_NotifyProgress_initWithACDownloadTask_(self)];
  }
  else {
    
#line 244
    [((ARActorRef *) nil_chk([self self__])) sendOnceWithId:new_ACDownloadTask_NotifyProgress_initWithACDownloadTask_(self) withLong:delta];
  }
}


#line 248
void ACDownloadTask_performReportProgress(ACDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACDownloadManager_OnDownloadProgress_initWithLong_withFloat_([((ACFileReference *) nil_chk(self->fileReference_)) getFileId], self->currentProgress_)];
}

void ACDownloadTask_reportCompleteWithARFileSystemReference_(ACDownloadTask *self, id<ARFileSystemReference> reference) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = true;
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACDownloadManager_OnDownloaded_initWithLong_withARFileSystemReference_([((ACFileReference *) nil_chk(self->fileReference_)) getFileId], reference)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"


#line 263
@implementation ACDownloadTask_NotifyProgress

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$ {
  ACDownloadTask_NotifyProgress_initWithACDownloadTask_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACDownloadTask:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACDownloadTask_NotifyProgress = { 2, "NotifyProgress", "im.actor.core.modules.internal.file", "DownloadTask", 0x2, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACDownloadTask_NotifyProgress;
}

@end

void ACDownloadTask_NotifyProgress_initWithACDownloadTask_(ACDownloadTask_NotifyProgress *self, ACDownloadTask *outer$) {
  (void) NSObject_init(self);
}

ACDownloadTask_NotifyProgress *new_ACDownloadTask_NotifyProgress_initWithACDownloadTask_(ACDownloadTask *outer$) {
  ACDownloadTask_NotifyProgress *self = [ACDownloadTask_NotifyProgress alloc];
  ACDownloadTask_NotifyProgress_initWithACDownloadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask_NotifyProgress)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"

@implementation ACDownloadTask_$1


#line 100
- (void)onResult:(ARResponseGetFileUrl *)response {
  this$0_->fileUrl_ = [((ARResponseGetFileUrl *) nil_chk(response)) getUrl];
  if (this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$$", @"Loaded file url: ", this$0_->fileUrl_));
  }
  ACDownloadTask_startDownload(this$0_);
}


#line 109
- (void)onError:(ACRpcException *)e {
  if (this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->TAG_, @"Unable to load file url");
  }
  ACDownloadTask_reportError(this$0_);
}

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$ {
  ACDownloadTask_$1_initWithACDownloadTask_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onResult:", "onResult", "V", 0x1, NULL, NULL },
    { "onError:", "onError", "V", 0x1, NULL, NULL },
    { "initWithACDownloadTask:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadTask;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadTask", "requestUrl" };
  static const J2ObjcClassInfo _ACDownloadTask_$1 = { 2, "", "im.actor.core.modules.internal.file", "DownloadTask", 0x8008, 3, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/core/network/RpcCallback<Lim/actor/core/api/rpc/ResponseGetFileUrl;>;" };
  return &_ACDownloadTask_$1;
}

@end

void ACDownloadTask_$1_initWithACDownloadTask_(ACDownloadTask_$1 *self, ACDownloadTask *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACDownloadTask_$1 *new_ACDownloadTask_$1_initWithACDownloadTask_(ACDownloadTask *outer$) {
  ACDownloadTask_$1 *self = [ACDownloadTask_$1 alloc];
  ACDownloadTask_$1_initWithACDownloadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"

@implementation ACDownloadTask_$2


#line 188
- (void)onDownloadedWithByteArray:(IOSByteArray *)data {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(self, data)];
}


#line 208
- (void)onDownloadFailure {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(self)];
}

- (instancetype)initWithACDownloadTask:(ACDownloadTask *)outer$
                               withInt:(jint)capture$0
                               withInt:(jint)capture$1 {
  ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onDownloadedWithByteArray:", "onDownloaded", "V", 0x1, NULL, NULL },
    { "onDownloadFailure", NULL, "V", 0x1, NULL, NULL },
    { "initWithACDownloadTask:withInt:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadTask;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$blockIndex_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "val$fileOffset_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadTask", "downloadPartWithInt:withInt:" };
  static const J2ObjcClassInfo _ACDownloadTask_$2 = { 2, "", "im.actor.core.modules.internal.file", "DownloadTask", 0x8008, 3, methods, 3, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadTask_$2;
}

@end

void ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(ACDownloadTask_$2 *self, ACDownloadTask *outer$, jint capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$blockIndex_ = capture$0;
  self->val$fileOffset_ = capture$1;
  (void) NSObject_init(self);
}

ACDownloadTask_$2 *new_ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(ACDownloadTask *outer$, jint capture$0, jint capture$1) {
  ACDownloadTask_$2 *self = [ACDownloadTask_$2 alloc];
  ACDownloadTask_$2_initWithACDownloadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"

@implementation ACDownloadTask_$2_$1


#line 191
- (void)run {
  this$0_->this$0_->downloaded_++;
  if (this$0_->this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Download part #", this$0_->val$blockIndex_, @" completed"));
  }
  if (![((id<AROutputFile>) nil_chk(this$0_->this$0_->outputFile_)) writeWithOffset:this$0_->val$fileOffset_ withData:val$data_ withDataOffset:0 withLength:((IOSByteArray *) nil_chk(val$data_))->size_]) {
    ACDownloadTask_reportError(this$0_->this$0_);
    return;
  }
  this$0_->this$0_->currentDownloads_--;
  ACDownloadTask_reportProgressWithFloat_(this$0_->this$0_, this$0_->this$0_->downloaded_ / (jfloat) this$0_->this$0_->blocksCount_);
  ACDownloadTask_checkQueue(this$0_->this$0_);
}

- (instancetype)initWithACDownloadTask_$2:(ACDownloadTask_$2 *)outer$
                            withByteArray:(IOSByteArray *)capture$0 {
  ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACDownloadTask_$2:withByteArray:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadTask$2;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$data_", NULL, 0x1012, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadTask_$2", "onDownloadedWithByteArray:" };
  static const J2ObjcClassInfo _ACDownloadTask_$2_$1 = { 2, "", "im.actor.core.modules.internal.file", "DownloadTask$", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadTask_$2_$1;
}

@end

void ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(ACDownloadTask_$2_$1 *self, ACDownloadTask_$2 *outer$, IOSByteArray *capture$0) {
  self->this$0_ = outer$;
  self->val$data_ = capture$0;
  (void) NSObject_init(self);
}

ACDownloadTask_$2_$1 *new_ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(ACDownloadTask_$2 *outer$, IOSByteArray *capture$0) {
  ACDownloadTask_$2_$1 *self = [ACDownloadTask_$2_$1 alloc];
  ACDownloadTask_$2_$1_initWithACDownloadTask_$2_withByteArray_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask_$2_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/file/DownloadTask.java"

@implementation ACDownloadTask_$2_$2


#line 211
- (void)run {
  if (this$0_->this$0_->LOG_) {
    ARLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Download part #", this$0_->val$blockIndex_, @" failure"));
  }
  ACDownloadTask_reportError(this$0_->this$0_);
}

- (instancetype)initWithACDownloadTask_$2:(ACDownloadTask_$2 *)outer$ {
  ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACDownloadTask_$2:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.file.DownloadTask$2;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACDownloadTask_$2", "onDownloadFailure" };
  static const J2ObjcClassInfo _ACDownloadTask_$2_$2 = { 2, "", "im.actor.core.modules.internal.file", "DownloadTask$", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACDownloadTask_$2_$2;
}

@end

void ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(ACDownloadTask_$2_$2 *self, ACDownloadTask_$2 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACDownloadTask_$2_$2 *new_ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(ACDownloadTask_$2 *outer$) {
  ACDownloadTask_$2_$2 *self = [ACDownloadTask_$2_$2 alloc];
  ACDownloadTask_$2_$2_initWithACDownloadTask_$2_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACDownloadTask_$2_$2)

#pragma clang diagnostic pop
