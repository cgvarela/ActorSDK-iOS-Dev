//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/entity/PendingMessage.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/content/AbsContent.h"
#include "im/actor/core/modules/internal/messages/entity/PendingMessage.h"
#include "im/actor/runtime/bser/Bser.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "java/io/IOException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACPendingMessage () {
 @public
  ACPeer *peer_;
  jlong rid_;
  ACAbsContent *content_;
  jboolean isError_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(ACPendingMessage, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACPendingMessage, content_, ACAbsContent *)

__attribute__((unused)) static void ACPendingMessage_init(ACPendingMessage *self);

__attribute__((unused)) static ACPendingMessage *new_ACPendingMessage_init() NS_RETURNS_RETAINED;

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/entity/PendingMessage.java"


#line 16
@implementation ACPendingMessage

+ (ACPendingMessage *)fromBytesWithByteArray:(IOSByteArray *)data {
  return ACPendingMessage_fromBytesWithByteArray_(data);
}


#line 27
- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)rid
              withACAbsContent:(ACAbsContent *)content {
  ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(self, peer, rid, content);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 33
- (instancetype)init {
  ACPendingMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 37
- (ACPeer *)getPeer {
  return peer_;
}

- (ACAbsContent *)getContent {
  return content_;
}

- (jlong)getRid {
  return rid_;
}

- (jboolean)isError {
  return isError_;
}


#line 54
- (void)parseWithARBserValues:(ARBserValues *)values {
  peer_ = ACPeer_fromUniqueIdWithLong_([((ARBserValues *) nil_chk(values)) getLongWithInt:1]);
  rid_ = [values getLongWithInt:2];
  content_ = ACAbsContent_parseWithByteArray_([values getBytesWithInt:3]);
  isError_ = [values getBoolWithInt:4 withBoolean:false];
}


#line 62
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  [((ARBserWriter *) nil_chk(writer)) writeLongWithInt:1 withLong:[((ACPeer *) nil_chk(peer_)) getUnuqueId]];
  [writer writeLongWithInt:2 withLong:rid_];
  [writer writeBytesWithInt:3 withByteArray:ACAbsContent_serializeWithACAbsContent_(content_)];
  [writer writeBoolWithInt:4 withBoolean:isError_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "fromBytesWithByteArray:", "fromBytes", "Lim.actor.core.modules.internal.messages.entity.PendingMessage;", 0x9, "Ljava.io.IOException;", NULL },
    { "initWithACPeer:withLong:withACAbsContent:", "PendingMessage", NULL, 0x1, NULL, NULL },
    { "init", "PendingMessage", NULL, 0x2, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getContent", NULL, "Lim.actor.core.entity.content.AbsContent;", 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
    { "isError", NULL, "Z", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "content_", NULL, 0x2, "Lim.actor.core.entity.content.AbsContent;", NULL, NULL, .constantValue.asLong = 0 },
    { "isError_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACPendingMessage = { 2, "PendingMessage", "im.actor.core.modules.internal.messages.entity", NULL, 0x1, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACPendingMessage;
}

@end


#line 18
ACPendingMessage *ACPendingMessage_fromBytesWithByteArray_(IOSByteArray *data) {
  ACPendingMessage_initialize();
  
#line 19
  return ARBser_parseWithARBserObject_withByteArray_(new_ACPendingMessage_init(), data);
}


#line 27
void ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(ACPendingMessage *self, ACPeer *peer, jlong rid, ACAbsContent *content) {
  (void) ARBserObject_init(self);
  
#line 28
  self->peer_ = peer;
  self->rid_ = rid;
  self->content_ = content;
}


#line 27
ACPendingMessage *new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(ACPeer *peer, jlong rid, ACAbsContent *content) {
  ACPendingMessage *self = [ACPendingMessage alloc];
  ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(self, peer, rid, content);
  return self;
}

void ACPendingMessage_init(ACPendingMessage *self) {
  (void) ARBserObject_init(self);
}


#line 33
ACPendingMessage *new_ACPendingMessage_init() {
  ACPendingMessage *self = [ACPendingMessage alloc];
  ACPendingMessage_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACPendingMessage)

#pragma clang diagnostic pop
