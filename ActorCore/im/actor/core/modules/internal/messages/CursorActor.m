//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/CursorActor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/MessagesModule.h"
#include "im/actor/core/modules/internal/messages/CursorActor.h"
#include "im/actor/core/modules/internal/messages/entity/PlainCursor.h"
#include "im/actor/core/modules/internal/messages/entity/PlainCursorsStorage.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/storage/SyncKeyValue.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACCursorActor () {
 @public
  ACPlainCursorsStorage *plainCursorsStorage_;
  JavaUtilHashSet *inProgress_;
  jlong cursorId_;
  ARSyncKeyValue *keyValue_;
}

- (void)saveCursorState;

@end

J2OBJC_FIELD_SETTER(ACCursorActor, plainCursorsStorage_, ACPlainCursorsStorage *)
J2OBJC_FIELD_SETTER(ACCursorActor, inProgress_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ACCursorActor, keyValue_, ARSyncKeyValue *)

__attribute__((unused)) static void ACCursorActor_onMovedWithACPeer_withLong_(ACCursorActor *self, ACPeer *peer, jlong date);

__attribute__((unused)) static void ACCursorActor_saveCursorState(ACCursorActor *self);

@interface ACCursorActor_OnCompleted : NSObject {
 @public
  ACPeer *peer_;
  jlong date_;
}

- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)date;

- (ACPeer *)getPeer;

- (jlong)getDate;

@end

J2OBJC_EMPTY_STATIC_INIT(ACCursorActor_OnCompleted)

J2OBJC_FIELD_SETTER(ACCursorActor_OnCompleted, peer_, ACPeer *)

__attribute__((unused)) static void ACCursorActor_OnCompleted_initWithACPeer_withLong_(ACCursorActor_OnCompleted *self, ACPeer *peer, jlong date);

__attribute__((unused)) static ACCursorActor_OnCompleted *new_ACCursorActor_OnCompleted_initWithACPeer_withLong_(ACPeer *peer, jlong date) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACCursorActor_OnCompleted)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/CursorActor.java"


#line 17
@implementation ACCursorActor


#line 24
- (instancetype)initWithLong:(jlong)cursorId
         withACModuleContext:(id<ACModuleContext>)context {
  ACCursorActor_initWithLong_withACModuleContext_(self, cursorId, context);
  return self;
}


#line 31
- (void)preStart {
  [super preStart];
  
#line 34
  plainCursorsStorage_ = new_ACPlainCursorsStorage_init();
  IOSByteArray *data = [((ARSyncKeyValue *) nil_chk(keyValue_)) getWithLong:cursorId_];
  if (data != nil) {
    @try {
      plainCursorsStorage_ = ACPlainCursorsStorage_fromBytesWithByteArray_(data);
    }
    @catch (
#line 39
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  
#line 44
  for (ACPlainCursor * __strong cursor in nil_chk([((ACPlainCursorsStorage *) nil_chk(plainCursorsStorage_)) getAllCursors])) {
    if ([((ACPlainCursor *) nil_chk(cursor)) getSortDate] < [cursor getPendingSortDate]) {
      [((JavaUtilHashSet *) nil_chk(inProgress_)) addWithId:[cursor getPeer]];
      [self performWithACPeer:[cursor getPeer] withLong:[cursor getPendingSortDate]];
    }
  }
}


#line 52
- (void)moveCursorWithACPeer:(ACPeer *)peer
                    withLong:(jlong)date {
  ACPlainCursor *cursor = [((ACPlainCursorsStorage *) nil_chk(plainCursorsStorage_)) getCursorWithACPeer:peer];
  if (date <= [((ACPlainCursor *) nil_chk(cursor)) getSortDate]) {
    return;
  }
  if (date <= [cursor getPendingSortDate]) {
    return;
  }
  
#line 61
  date = JavaLangMath_maxWithLong_withLong_([cursor getPendingSortDate], date);
  
#line 63
  [plainCursorsStorage_ putCursorWithACPlainCursor:[cursor changePendingSortDateWithLong:date]];
  
#line 65
  ACCursorActor_saveCursorState(self);
  
#line 67
  if ([((JavaUtilHashSet *) nil_chk(inProgress_)) containsWithId:peer]) {
    return;
  }
  
#line 71
  [inProgress_ addWithId:peer];
  [self performWithACPeer:peer withLong:date];
}


#line 75
- (void)onMovedWithACPeer:(ACPeer *)peer
                 withLong:(jlong)date {
  ACCursorActor_onMovedWithACPeer_withLong_(self, peer, date);
}


#line 90
- (void)performWithACPeer:(ACPeer *)peer
                 withLong:(jlong)date {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 92
- (void)onCompletedWithACPeer:(ACPeer *)peer
                     withLong:(jlong)date {
  [((ARActorRef *) nil_chk([self self__])) sendWithId:new_ACCursorActor_OnCompleted_initWithACPeer_withLong_(peer, date)];
}


#line 96
- (void)onErrorWithACPeer:(ACPeer *)peer
                 withLong:(jlong)date {
}


#line 101
- (void)saveCursorState {
  ACCursorActor_saveCursorState(self);
}


#line 106
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACCursorActor_OnCompleted class]]) {
    ACCursorActor_OnCompleted *completed = (ACCursorActor_OnCompleted *) check_class_cast(message, [ACCursorActor_OnCompleted class]);
    ACCursorActor_onMovedWithACPeer_withLong_(self, [((ACCursorActor_OnCompleted *) nil_chk(completed)) getPeer], [completed getDate]);
  }
  else {
    
#line 111
    [self dropWithId:message];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withACModuleContext:", "CursorActor", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "moveCursorWithACPeer:withLong:", "moveCursor", "V", 0x14, NULL, NULL },
    { "onMovedWithACPeer:withLong:", "onMoved", "V", 0x14, NULL, NULL },
    { "performWithACPeer:withLong:", "perform", "V", 0x404, NULL, NULL },
    { "onCompletedWithACPeer:withLong:", "onCompleted", "V", 0x4, NULL, NULL },
    { "onErrorWithACPeer:withLong:", "onError", "V", 0x4, NULL, NULL },
    { "saveCursorState", NULL, "V", 0x2, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plainCursorsStorage_", NULL, 0x2, "Lim.actor.core.modules.internal.messages.entity.PlainCursorsStorage;", NULL, NULL, .constantValue.asLong = 0 },
    { "inProgress_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lim/actor/core/entity/Peer;>;", .constantValue.asLong = 0 },
    { "cursorId_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "keyValue_", NULL, 0x2, "Lim.actor.runtime.storage.SyncKeyValue;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.messages.CursorActor$OnCompleted;"};
  static const J2ObjcClassInfo _ACCursorActor = { 2, "CursorActor", "im.actor.core.modules.internal.messages", NULL, 0x401, 9, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_ACCursorActor;
}

@end


#line 24
void ACCursorActor_initWithLong_withACModuleContext_(ACCursorActor *self, jlong cursorId, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->inProgress_ = new_JavaUtilHashSet_init();
  
#line 26
  self->cursorId_ = cursorId;
  self->keyValue_ = [((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk(context)) getMessagesModule])) getCursorStorage];
}


#line 75
void ACCursorActor_onMovedWithACPeer_withLong_(ACCursorActor *self, ACPeer *peer, jlong date) {
  [((JavaUtilHashSet *) nil_chk(self->inProgress_)) removeWithId:peer];
  
#line 78
  ACPlainCursor *cursor = [((ACPlainCursorsStorage *) nil_chk(self->plainCursorsStorage_)) getCursorWithACPeer:peer];
  cursor = [cursor changeSortDateWithLong:JavaLangMath_maxWithLong_withLong_(date, [((ACPlainCursor *) nil_chk(cursor)) getSortDate])];
  [self->plainCursorsStorage_ putCursorWithACPlainCursor:cursor];
  ACCursorActor_saveCursorState(self);
  
#line 83
  if ([((ACPlainCursor *) nil_chk(cursor)) getSortDate] < [cursor getPendingSortDate]) {
    [self->inProgress_ addWithId:peer];
    [self performWithACPeer:peer withLong:[cursor getPendingSortDate]];
  }
}


#line 101
void ACCursorActor_saveCursorState(ACCursorActor *self) {
  [((ARSyncKeyValue *) nil_chk(self->keyValue_)) putWithLong:self->cursorId_ withByteArray:[((ACPlainCursorsStorage *) nil_chk(self->plainCursorsStorage_)) toByteArray]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACCursorActor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/CursorActor.java"


#line 115
@implementation ACCursorActor_OnCompleted


#line 119
- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)date {
  ACCursorActor_OnCompleted_initWithACPeer_withLong_(self, peer, date);
  return self;
}


#line 124
- (ACPeer *)getPeer {
  return peer_;
}

- (jlong)getDate {
  return date_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withLong:", "OnCompleted", NULL, 0x2, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getDate", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "date_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACCursorActor_OnCompleted = { 2, "OnCompleted", "im.actor.core.modules.internal.messages", "CursorActor", 0xa, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACCursorActor_OnCompleted;
}

@end


#line 119
void ACCursorActor_OnCompleted_initWithACPeer_withLong_(ACCursorActor_OnCompleted *self, ACPeer *peer, jlong date) {
  (void) NSObject_init(self);
  
#line 120
  self->peer_ = peer;
  self->date_ = date;
}


#line 119
ACCursorActor_OnCompleted *new_ACCursorActor_OnCompleted_initWithACPeer_withLong_(ACPeer *peer, jlong date) {
  ACCursorActor_OnCompleted *self = [ACCursorActor_OnCompleted alloc];
  ACCursorActor_OnCompleted_initWithACPeer_withLong_(self, peer, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACCursorActor_OnCompleted)

#pragma clang diagnostic pop
