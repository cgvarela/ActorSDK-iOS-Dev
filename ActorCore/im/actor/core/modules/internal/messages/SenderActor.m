//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java
//

#include <j2objc/IOSObjectArray.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiDocumentEx.h"
#include "im/actor/core/api/ApiDocumentExPhoto.h"
#include "im/actor/core/api/ApiDocumentExVideo.h"
#include "im/actor/core/api/ApiDocumentMessage.h"
#include "im/actor/core/api/ApiFastThumb.h"
#include "im/actor/core/api/ApiMessage.h"
#include "im/actor/core/api/ApiOutPeer.h"
#include "im/actor/core/api/ApiPeer.h"
#include "im/actor/core/api/ApiTextMessage.h"
#include "im/actor/core/api/ApiTextMessageEx.h"
#include "im/actor/core/api/base/SeqUpdate.h"
#include "im/actor/core/api/rpc/RequestSendMessage.h"
#include "im/actor/core/api/rpc/ResponseSeqDate.h"
#include "im/actor/core/api/updates/UpdateMessageSent.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/entity/Group.h"
#include "im/actor/core/entity/GroupMember.h"
#include "im/actor/core/entity/Message.h"
#include "im/actor/core/entity/MessageState.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/PeerType.h"
#include "im/actor/core/entity/User.h"
#include "im/actor/core/entity/content/AbsContent.h"
#include "im/actor/core/entity/content/DocumentContent.h"
#include "im/actor/core/entity/content/FastThumb.h"
#include "im/actor/core/entity/content/FileLocalSource.h"
#include "im/actor/core/entity/content/FileRemoteSource.h"
#include "im/actor/core/entity/content/FileSource.h"
#include "im/actor/core/entity/content/PhotoContent.h"
#include "im/actor/core/entity/content/TextContent.h"
#include "im/actor/core/entity/content/VideoContent.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/Updates.h"
#include "im/actor/core/modules/internal/FilesModule.h"
#include "im/actor/core/modules/internal/MessagesModule.h"
#include "im/actor/core/modules/internal/file/UploadManager.h"
#include "im/actor/core/modules/internal/messages/ConversationActor.h"
#include "im/actor/core/modules/internal/messages/SenderActor.h"
#include "im/actor/core/modules/internal/messages/entity/PendingMessage.h"
#include "im/actor/core/modules/internal/messages/entity/PendingMessagesStorage.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/modules/utils/RandomUtils.h"
#include "im/actor/core/network/RpcCallback.h"
#include "im/actor/core/network/RpcException.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/Storage.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/storage/PreferencesStorage.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/util/ArrayList.h>
#include <j2objc/java/util/List.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACSenderActor () {
 @public
  ACPendingMessagesStorage *pendingMessages_;
  jlong lastSendDate_;
}

- (jlong)createPendingDate;

- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName;

- (void)onFileUploadedWithLong:(jlong)rid
           withACFileReference:(ACFileReference *)fileReference;

- (void)onFileUploadErrorWithLong:(jlong)rid;

- (void)performSendContentWithACPeer:(ACPeer *)peer
                            withLong:(jlong)rid
                    withACAbsContent:(ACAbsContent *)content;

- (void)onSentWithACPeer:(ACPeer *)peer
                withLong:(jlong)rid;

- (void)onErrorWithACPeer:(ACPeer *)peer
                 withLong:(jlong)rid;

- (void)savePending;

- (ACPendingMessage *)findPendingWithLong:(jlong)rid;

@end

J2OBJC_FIELD_SETTER(ACSenderActor, pendingMessages_, ACPendingMessagesStorage *)

static NSString *ACSenderActor_PREFERENCES_ = @"sender_pending";
J2OBJC_STATIC_FIELD_GETTER(ACSenderActor, PREFERENCES_, NSString *)

__attribute__((unused)) static jlong ACSenderActor_createPendingDate(ACSenderActor *self);

__attribute__((unused)) static void ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(ACSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName);

__attribute__((unused)) static void ACSenderActor_onFileUploadedWithLong_withACFileReference_(ACSenderActor *self, jlong rid, ACFileReference *fileReference);

__attribute__((unused)) static void ACSenderActor_onFileUploadErrorWithLong_(ACSenderActor *self, jlong rid);

__attribute__((unused)) static void ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(ACSenderActor *self, ACPeer *peer, jlong rid, ACAbsContent *content);

__attribute__((unused)) static void ACSenderActor_onSentWithACPeer_withLong_(ACSenderActor *self, ACPeer *peer, jlong rid);

__attribute__((unused)) static void ACSenderActor_onErrorWithACPeer_withLong_(ACSenderActor *self, ACPeer *peer, jlong rid);

__attribute__((unused)) static void ACSenderActor_savePending(ACSenderActor *self);

__attribute__((unused)) static ACPendingMessage *ACSenderActor_findPendingWithLong_(ACSenderActor *self, jlong rid);

@interface ACSenderActor_SendDocument () {
 @public
  ACPeer *peer_;
  ACFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  NSString *mimeType_;
  jint fileSize_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_SendDocument, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendDocument, fastThumb_, ACFastThumb *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendDocument, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendDocument, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendDocument, mimeType_, NSString *)

@interface ACSenderActor_SendPhoto () {
 @public
  ACPeer *peer_;
  ACFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  jint fileSize_;
  jint w_;
  jint h_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_SendPhoto, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendPhoto, fastThumb_, ACFastThumb *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendPhoto, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendPhoto, fileName_, NSString *)

@interface ACSenderActor_SendVideo () {
 @public
  ACPeer *peer_;
  NSString *fileName_;
  jint w_;
  jint h_;
  jint duration_;
  ACFastThumb *fastThumb_;
  NSString *descriptor_;
  jint fileSize_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_SendVideo, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendVideo, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendVideo, fastThumb_, ACFastThumb *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendVideo, descriptor_, NSString *)

@interface ACSenderActor_SendText () {
 @public
  ACPeer *peer_;
  NSString *text_;
  NSString *markDownText_;
  JavaUtilArrayList *mentions_;
  jboolean autoDetect_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_SendText, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendText, text_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendText, markDownText_, NSString *)
J2OBJC_FIELD_SETTER(ACSenderActor_SendText, mentions_, JavaUtilArrayList *)

@interface ACSenderActor_MessageSent () {
 @public
  ACPeer *peer_;
  jlong rid_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_MessageSent, peer_, ACPeer *)

@interface ACSenderActor_MessageError () {
 @public
  ACPeer *peer_;
  jlong rid_;
}

@end

J2OBJC_FIELD_SETTER(ACSenderActor_MessageError, peer_, ACPeer *)

@interface ACSenderActor_$1 : NSObject < ACRpcCallback > {
 @public
  ACSenderActor *this$0_;
  ACPeer *val$peer_;
  jlong val$rid_;
  ARApiPeer *val$apiPeer_;
}

- (void)onResult:(ARResponseSeqDate *)response;

- (void)onError:(ACRpcException *)e;

- (instancetype)initWithACSenderActor:(ACSenderActor *)outer$
                           withACPeer:(ACPeer *)capture$0
                             withLong:(jlong)capture$1
                        withARApiPeer:(ARApiPeer *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(ACSenderActor_$1)

J2OBJC_FIELD_SETTER(ACSenderActor_$1, this$0_, ACSenderActor *)
J2OBJC_FIELD_SETTER(ACSenderActor_$1, val$peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACSenderActor_$1, val$apiPeer_, ARApiPeer *)

__attribute__((unused)) static void ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(ACSenderActor_$1 *self, ACSenderActor *outer$, ACPeer *capture$0, jlong capture$1, ARApiPeer *capture$2);

__attribute__((unused)) static ACSenderActor_$1 *new_ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(ACSenderActor *outer$, ACPeer *capture$0, jlong capture$1, ARApiPeer *capture$2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACSenderActor_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 53
@implementation ACSenderActor


#line 61
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACSenderActor_initWithACModuleContext_(self, context);
  return self;
}

- (void)preStart {
  pendingMessages_ = new_ACPendingMessagesStorage_init();
  IOSByteArray *p = [((id<ARPreferencesStorage>) nil_chk([self preferences])) getBytesWithKey:ACSenderActor_PREFERENCES_];
  if (p != nil) {
    @try {
      pendingMessages_ = ACPendingMessagesStorage_fromBytesWithByteArray_(p);
    }
    @catch (
#line 72
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  
#line 77
  jboolean isChanged = false;
  JavaUtilArrayList *messages = [((ACPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages];
  {
    IOSObjectArray *a__ =
#line 79
    [messages toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(messages)) size] type:ACPendingMessage_class_()]];
    ACPendingMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ACPendingMessage * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ACPendingMessage *pending = *b__++;
      
#line 80
      if ([[((ACPendingMessage *) nil_chk(pending)) getContent] isKindOfClass:[ACTextContent class]]) {
        ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(self, [pending getPeer], [pending getRid], [pending getContent]);
      }
      else
#line 82
      if ([[pending getContent] isKindOfClass:[ACDocumentContent class]]) {
        ACDocumentContent *documentContent = (ACDocumentContent *) check_class_cast([pending getContent], [ACDocumentContent class]);
        if ([[((ACDocumentContent *) nil_chk(documentContent)) getSource] isKindOfClass:[ACFileLocalSource class]]) {
          if (ARStorage_isFsPersistent()) {
            ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, [pending getRid],
#line 87
            [((ACFileLocalSource *) nil_chk(((ACFileLocalSource *) check_class_cast([documentContent getSource], [ACFileLocalSource class])))) getFileDescriptor],
#line 88
            [((ACFileLocalSource *) nil_chk(((ACFileLocalSource *) check_class_cast([documentContent getSource], [ACFileLocalSource class])))) getFileName]);
          }
          else {
            
#line 90
            id<JavaUtilList> rids = new_JavaUtilArrayList_init();
            [rids addWithId:JavaLangLong_valueOfWithLong_([pending getRid])];
            [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:[pending getPeer]])) sendWithId:new_ACConversationActor_MessagesDeleted_initWithJavaUtilList_(rids)];
            [((JavaUtilArrayList *) nil_chk([pendingMessages_ getPendingMessages])) removeWithId:pending];
            isChanged = true;
          }
        }
        else {
          
#line 97
          ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(self, [pending getPeer], [pending getRid],
#line 98
          [pending getContent]);
        }
      }
    }
  }
  if (isChanged) {
    ACSenderActor_savePending(self);
  }
}


#line 108
- (jlong)createPendingDate {
  return ACSenderActor_createPendingDate(self);
}


#line 119
- (void)doSendTextWithACPeer:(ACPeer *)peer
                withNSString:(NSString *)text
       withJavaUtilArrayList:(JavaUtilArrayList *)mentions
                withNSString:(NSString *)markDownText
                 withBoolean:(jboolean)autoDetect {
  
#line 123
  text = [((NSString *) nil_chk(text)) trim];
  
#line 125
  jlong rid = ACRandomUtils_nextRid();
  jlong date = ACSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  
#line 129
  if (autoDetect) {
    mentions = new_JavaUtilArrayList_init();
    if ([((ACPeer *) nil_chk(peer)) getPeerType] == JreLoadStatic(ACPeerTypeEnum, GROUP)) {
      ACGroup *group = [self getGroupWithInt:[peer getPeerId]];
      NSString *lowText = [((NSString *) nil_chk(text)) lowercaseString];
      for (ACGroupMember * __strong member in nil_chk([((ACGroup *) nil_chk(group)) getMembers])) {
        ACUser *user = [self getUserWithInt:[((ACGroupMember *) nil_chk(member)) getUid]];
        if ([((ACUser *) nil_chk(user)) getNick] != nil) {
          NSString *nick = JreStrcat("C$", '@', [((NSString *) nil_chk([user getNick])) lowercaseString]);
          
#line 139
          if ([((NSString *) nil_chk(lowText)) contains:JreStrcat("$C", nick, ':')] ||
#line 140
          [lowText contains:JreStrcat("$C", nick, ' ')] ||
#line 141
          [lowText contains:JreStrcat("C$", ' ', nick)] ||
#line 142
          [lowText hasSuffix:nick] ||
#line 143
          [lowText isEqual:nick]) {
            [mentions addWithId:JavaLangInteger_valueOfWithInt_([user getUid])];
          }
        }
      }
    }
  }
  
#line 151
  ACTextContent *content = ACTextContent_createWithNSString_withNSString_withJavaUtilArrayList_(text, markDownText, mentions);
  
#line 153
  ACMessage *message = new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageStateEnum_withACAbsContent_(rid, sortDate, date, [self myUid], JreLoadStatic(ACMessageStateEnum, PENDING), content);
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:peer])) sendWithId:message];
  
#line 156
  [((JavaUtilArrayList *) nil_chk([((ACPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(peer, rid, content)];
  ACSenderActor_savePending(self);
  
#line 159
  ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(self, peer, rid, content);
}


#line 164
- (void)doSendDocumentWithACPeer:(ACPeer *)peer
                    withNSString:(NSString *)fileName
                    withNSString:(NSString *)mimeType
                         withInt:(jint)fileSize
                 withACFastThumb:(ACFastThumb *)fastThumb
                    withNSString:(NSString *)descriptor {
  
#line 166
  jlong rid = ACRandomUtils_nextRid();
  jlong date = ACSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  ACDocumentContent *documentContent = ACDocumentContent_createLocalWithNSString_withInt_withNSString_withNSString_withACFastThumb_(fileName, fileSize,
#line 170
  descriptor, mimeType, fastThumb);
  
#line 172
  ACMessage *message = new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageStateEnum_withACAbsContent_(rid, sortDate, date, [self myUid], JreLoadStatic(ACMessageStateEnum, PENDING), documentContent);
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:peer])) sendWithId:message];
  
#line 175
  [((JavaUtilArrayList *) nil_chk([((ACPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(peer, rid, documentContent)];
  ACSenderActor_savePending(self);
  
#line 178
  ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 181
- (void)doSendPhotoWithACPeer:(ACPeer *)peer
              withACFastThumb:(ACFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                 withNSString:(NSString *)fileName
                      withInt:(jint)fileSize
                      withInt:(jint)w
                      withInt:(jint)h {
  
#line 183
  jlong rid = ACRandomUtils_nextRid();
  jlong date = ACSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  ACPhotoContent *photoContent = ACPhotoContent_createLocalPhotoWithNSString_withNSString_withInt_withInt_withInt_withACFastThumb_(descriptor, fileName, fileSize, w, h, fastThumb);
  
#line 188
  ACMessage *message = new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageStateEnum_withACAbsContent_(rid, sortDate, date, [self myUid], JreLoadStatic(ACMessageStateEnum, PENDING), photoContent);
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:peer])) sendWithId:message];
  
#line 191
  [((JavaUtilArrayList *) nil_chk([((ACPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(peer, rid, photoContent)];
  ACSenderActor_savePending(self);
  
#line 194
  ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 197
- (void)doSendVideoWithACPeer:(ACPeer *)peer
                 withNSString:(NSString *)fileName
                      withInt:(jint)w
                      withInt:(jint)h
                      withInt:(jint)duration
              withACFastThumb:(ACFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                      withInt:(jint)fileSize {
  
#line 199
  jlong rid = ACRandomUtils_nextRid();
  jlong date = ACSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  ACVideoContent *videoContent = ACVideoContent_createLocalVideoWithNSString_withNSString_withInt_withInt_withInt_withInt_withACFastThumb_(descriptor,
#line 203
  fileName, fileSize, w, h, duration, fastThumb);
  
#line 205
  ACMessage *message = new_ACMessage_initWithLong_withLong_withLong_withInt_withACMessageStateEnum_withACAbsContent_(rid, sortDate, date, [self myUid], JreLoadStatic(ACMessageStateEnum, PENDING), videoContent);
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:peer])) sendWithId:message];
  
#line 208
  [((JavaUtilArrayList *) nil_chk([((ACPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_(peer, rid, videoContent)];
  ACSenderActor_savePending(self);
  
#line 211
  ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 214
- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName {
  ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 218
- (void)onFileUploadedWithLong:(jlong)rid
           withACFileReference:(ACFileReference *)fileReference {
  ACSenderActor_onFileUploadedWithLong_withACFileReference_(self, rid, fileReference);
}


#line 249
- (void)onFileUploadErrorWithLong:(jlong)rid {
  ACSenderActor_onFileUploadErrorWithLong_(self, rid);
}


#line 260
- (void)performSendContentWithACPeer:(ACPeer *)peer
                            withLong:(jlong)rid
                    withACAbsContent:(ACAbsContent *)content {
  ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(self, peer, rid, content);
}


#line 321
- (void)onSentWithACPeer:(ACPeer *)peer
                withLong:(jlong)rid {
  ACSenderActor_onSentWithACPeer_withLong_(self, peer, rid);
}


#line 331
- (void)onErrorWithACPeer:(ACPeer *)peer
                 withLong:(jlong)rid {
  ACSenderActor_onErrorWithACPeer_withLong_(self, peer, rid);
}


#line 342
- (void)savePending {
  ACSenderActor_savePending(self);
}

- (ACPendingMessage *)findPendingWithLong:(jlong)rid {
  return ACSenderActor_findPendingWithLong_(self, rid);
}


#line 358
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACSenderActor_SendText class]]) {
    ACSenderActor_SendText *sendText = (ACSenderActor_SendText *) check_class_cast(message, [ACSenderActor_SendText class]);
    [self doSendTextWithACPeer:[((ACSenderActor_SendText *) nil_chk(sendText)) getPeer] withNSString:[sendText getText] withJavaUtilArrayList:[sendText getMentions] withNSString:[sendText getMarkDownText] withBoolean:
#line 362
    [sendText isAutoDetect]];
  }
  else
#line 363
  if ([message isKindOfClass:[ACSenderActor_MessageSent class]]) {
    ACSenderActor_MessageSent *messageSent = (ACSenderActor_MessageSent *) check_class_cast(message, [ACSenderActor_MessageSent class]);
    ACSenderActor_onSentWithACPeer_withLong_(self, [((ACSenderActor_MessageSent *) nil_chk(messageSent)) getPeer], [messageSent getRid]);
  }
  else
#line 366
  if ([message isKindOfClass:[ACSenderActor_MessageError class]]) {
    ACSenderActor_MessageError *messageError = (ACSenderActor_MessageError *) check_class_cast(message, [ACSenderActor_MessageError class]);
    ACSenderActor_onErrorWithACPeer_withLong_(self, [((ACSenderActor_MessageError *) nil_chk(messageError)) getPeer], [messageError getRid]);
  }
  else
#line 369
  if ([message isKindOfClass:[ACSenderActor_SendDocument class]]) {
    ACSenderActor_SendDocument *sendDocument = (ACSenderActor_SendDocument *) check_class_cast(message, [ACSenderActor_SendDocument class]);
    [self doSendDocumentWithACPeer:[((ACSenderActor_SendDocument *) nil_chk(sendDocument)) getPeer] withNSString:[sendDocument getFileName] withNSString:[sendDocument getMimeType] withInt:
#line 372
    [sendDocument getFileSize] withACFastThumb:[sendDocument getFastThumb] withNSString:[sendDocument getDescriptor]];
  }
  else
#line 373
  if ([message isKindOfClass:[ACUploadManager_UploadCompleted class]]) {
    ACUploadManager_UploadCompleted *uploadCompleted = (ACUploadManager_UploadCompleted *) check_class_cast(message, [ACUploadManager_UploadCompleted class]);
    ACSenderActor_onFileUploadedWithLong_withACFileReference_(self, [((ACUploadManager_UploadCompleted *) nil_chk(uploadCompleted)) getRid], [uploadCompleted getFileReference]);
  }
  else
#line 376
  if ([message isKindOfClass:[ACUploadManager_UploadError class]]) {
    ACUploadManager_UploadError *uploadError = (ACUploadManager_UploadError *) check_class_cast(message, [ACUploadManager_UploadError class]);
    ACSenderActor_onFileUploadErrorWithLong_(self, [((ACUploadManager_UploadError *) nil_chk(uploadError)) getRid]);
  }
  else
#line 379
  if ([message isKindOfClass:[ACSenderActor_SendPhoto class]]) {
    ACSenderActor_SendPhoto *sendPhoto = (ACSenderActor_SendPhoto *) check_class_cast(message, [ACSenderActor_SendPhoto class]);
    [self doSendPhotoWithACPeer:[((ACSenderActor_SendPhoto *) nil_chk(sendPhoto)) getPeer] withACFastThumb:[sendPhoto getFastThumb] withNSString:
#line 382
    [sendPhoto getDescriptor] withNSString:[sendPhoto getFileName] withInt:[sendPhoto getFileSize] withInt:
#line 383
    [sendPhoto getW] withInt:[sendPhoto getH]];
  }
  else
#line 384
  if ([message isKindOfClass:[ACSenderActor_SendVideo class]]) {
    ACSenderActor_SendVideo *sendVideo = (ACSenderActor_SendVideo *) check_class_cast(message, [ACSenderActor_SendVideo class]);
    [self doSendVideoWithACPeer:[((ACSenderActor_SendVideo *) nil_chk(sendVideo)) getPeer] withNSString:[sendVideo getFileName] withInt:
#line 387
    [sendVideo getW] withInt:[sendVideo getH] withInt:[sendVideo getDuration] withACFastThumb:
#line 388
    [sendVideo getFastThumb] withNSString:[sendVideo getDescriptor] withInt:[sendVideo getFileSize]];
  }
  else {
    
#line 390
    [self dropWithId:message];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "SenderActor", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "createPendingDate", NULL, "J", 0x2, NULL, NULL },
    { "doSendTextWithACPeer:withNSString:withJavaUtilArrayList:withNSString:withBoolean:", "doSendText", "V", 0x1, NULL, NULL },
    { "doSendDocumentWithACPeer:withNSString:withNSString:withInt:withACFastThumb:withNSString:", "doSendDocument", "V", 0x1, NULL, NULL },
    { "doSendPhotoWithACPeer:withACFastThumb:withNSString:withNSString:withInt:withInt:withInt:", "doSendPhoto", "V", 0x1, NULL, NULL },
    { "doSendVideoWithACPeer:withNSString:withInt:withInt:withInt:withACFastThumb:withNSString:withInt:", "doSendVideo", "V", 0x1, NULL, NULL },
    { "performUploadFileWithLong:withNSString:withNSString:", "performUploadFile", "V", 0x2, NULL, NULL },
    { "onFileUploadedWithLong:withACFileReference:", "onFileUploaded", "V", 0x2, NULL, NULL },
    { "onFileUploadErrorWithLong:", "onFileUploadError", "V", 0x2, NULL, NULL },
    { "performSendContentWithACPeer:withLong:withACAbsContent:", "performSendContent", "V", 0x2, NULL, NULL },
    { "onSentWithACPeer:withLong:", "onSent", "V", 0x2, NULL, NULL },
    { "onErrorWithACPeer:withLong:", "onError", "V", 0x2, NULL, NULL },
    { "savePending", NULL, "V", 0x2, NULL, NULL },
    { "findPendingWithLong:", "findPending", "Lim.actor.core.modules.internal.messages.entity.PendingMessage;", 0x2, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PREFERENCES_", NULL, 0x1a, "Ljava.lang.String;", &ACSenderActor_PREFERENCES_, NULL, .constantValue.asLong = 0 },
    { "pendingMessages_", NULL, 0x2, "Lim.actor.core.modules.internal.messages.entity.PendingMessagesStorage;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastSendDate_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.messages.SenderActor$SendDocument;", "Lim.actor.core.modules.internal.messages.SenderActor$SendPhoto;", "Lim.actor.core.modules.internal.messages.SenderActor$SendVideo;", "Lim.actor.core.modules.internal.messages.SenderActor$SendText;", "Lim.actor.core.modules.internal.messages.SenderActor$MessageSent;", "Lim.actor.core.modules.internal.messages.SenderActor$MessageError;"};
  static const J2ObjcClassInfo _ACSenderActor = { 2, "SenderActor", "im.actor.core.modules.internal.messages", NULL, 0x1, 16, methods, 3, fields, 0, NULL, 6, inner_classes, NULL, NULL };
  return &_ACSenderActor;
}

@end


#line 61
void ACSenderActor_initWithACModuleContext_(ACSenderActor *self, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->lastSendDate_ =
#line 59
  0;
}


#line 61
ACSenderActor *new_ACSenderActor_initWithACModuleContext_(id<ACModuleContext> context) {
  ACSenderActor *self = [ACSenderActor alloc];
  ACSenderActor_initWithACModuleContext_(self, context);
  return self;
}


#line 108
jlong ACSenderActor_createPendingDate(ACSenderActor *self) {
  jlong res = ARRuntime_getCurrentSyncedTime();
  if (self->lastSendDate_ >= res) {
    res = self->lastSendDate_ + 1;
  }
  self->lastSendDate_ = res;
  return res;
}


#line 214
void ACSenderActor_performUploadFileWithLong_withNSString_withNSString_(ACSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName) {
  [((ACFilesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getFilesModule])) requestUploadWithLong:rid withNSString:descriptor withNSString:fileName withARActorRef:[self self__]];
}

void ACSenderActor_onFileUploadedWithLong_withACFileReference_(ACSenderActor *self, jlong rid, ACFileReference *fileReference) {
  ACPendingMessage *msg = ACSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  
#line 224
  [((JavaUtilArrayList *) nil_chk([((ACPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) removeWithId:msg];
  
#line 226
  ACAbsContent *nContent;
  if ([[((ACPendingMessage *) nil_chk(msg)) getContent] isKindOfClass:[ACPhotoContent class]]) {
    ACPhotoContent *basePhotoContent = (ACPhotoContent *) check_class_cast([msg getContent], [ACPhotoContent class]);
    nContent = ACPhotoContent_createRemotePhotoWithACFileReference_withInt_withInt_withACFastThumb_(fileReference, [((ACPhotoContent *) nil_chk(basePhotoContent)) getW],
#line 230
    [basePhotoContent getH], [basePhotoContent getFastThumb]);
  }
  else
#line 231
  if ([[msg getContent] isKindOfClass:[ACVideoContent class]]) {
    ACVideoContent *baseVideoContent = (ACVideoContent *) check_class_cast([msg getContent], [ACVideoContent class]);
    nContent = ACVideoContent_createRemoteVideoWithACFileReference_withInt_withInt_withInt_withACFastThumb_(fileReference, [((ACVideoContent *) nil_chk(baseVideoContent)) getW],
#line 234
    [baseVideoContent getH], [baseVideoContent getDuration],
#line 235
    [baseVideoContent getFastThumb]);
  }
  else
#line 236
  if ([[msg getContent] isKindOfClass:[ACDocumentContent class]]) {
    ACDocumentContent *baseDocContent = (ACDocumentContent *) check_class_cast([msg getContent], [ACDocumentContent class]);
    nContent = ACDocumentContent_createRemoteDocumentWithACFileReference_withACFastThumb_(fileReference, [((ACDocumentContent *) nil_chk(baseDocContent)) getFastThumb]);
  }
  else {
    
#line 240
    return;
  }
  
#line 243
  [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) addWithId:new_ACPendingMessage_initWithACPeer_withLong_withACAbsContent_([msg getPeer], [msg getRid], nContent)];
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:[msg getPeer]])) sendWithId:new_ACConversationActor_MessageContentUpdated_initWithLong_withACAbsContent_([msg getRid], nContent)];
  
#line 246
  ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(self, [msg getPeer], rid, nContent);
}


#line 249
void ACSenderActor_onFileUploadErrorWithLong_(ACSenderActor *self, jlong rid) {
  ACPendingMessage *msg = ACSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  
#line 255
  [((ARActorRef *) nil_chk([self self__])) sendWithId:new_ACSenderActor_MessageError_initWithACPeer_withLong_([((ACPendingMessage *) nil_chk(msg)) getPeer], [msg getRid])];
}


#line 260
void ACSenderActor_performSendContentWithACPeer_withLong_withACAbsContent_(ACSenderActor *self, ACPeer *peer, jlong rid, ACAbsContent *content) {
  ARApiOutPeer *outPeer = [self buidOutPeerWithACPeer:peer];
  ARApiPeer *apiPeer = [self buildApiPeerWithACPeer:peer];
  if (outPeer == nil || apiPeer == nil) {
    return;
  }
  
#line 267
  ARApiMessage *message;
  if ([content isKindOfClass:[ACTextContent class]]) {
    message = new_ARApiTextMessage_initWithNSString_withJavaUtilList_withARApiTextMessageEx_([((ACTextContent *) nil_chk(((ACTextContent *) check_class_cast(content, [ACTextContent class])))) getText], [((ACTextContent *) nil_chk(((ACTextContent *) check_class_cast(content, [ACTextContent class])))) getMentions], [((ACTextContent *) nil_chk(((ACTextContent *) check_class_cast(content, [ACTextContent class])))) getTextMessageEx]);
  }
  else
#line 270
  if ([content isKindOfClass:[ACDocumentContent class]]) {
    ACDocumentContent *documentContent = (ACDocumentContent *) check_class_cast(content, [ACDocumentContent class]);
    
#line 273
    ACFileRemoteSource *source = (ACFileRemoteSource *) check_class_cast([((ACDocumentContent *) nil_chk(documentContent)) getSource], [ACFileRemoteSource class]);
    
#line 275
    ARApiDocumentEx *documentEx = nil;
    
#line 277
    if ([content isKindOfClass:[ACPhotoContent class]]) {
      ACPhotoContent *photoContent = (ACPhotoContent *) check_class_cast(content, [ACPhotoContent class]);
      documentEx = new_ARApiDocumentExPhoto_initWithInt_withInt_([((ACPhotoContent *) nil_chk(photoContent)) getW], [photoContent getH]);
    }
    else
#line 280
    if ([content isKindOfClass:[ACVideoContent class]]) {
      ACVideoContent *videoContent = (ACVideoContent *) check_class_cast(content, [ACVideoContent class]);
      documentEx = new_ARApiDocumentExVideo_initWithInt_withInt_withInt_([((ACVideoContent *) nil_chk(videoContent)) getW], [videoContent getH], [videoContent getDuration]);
    }
    
#line 285
    ARApiFastThumb *fastThumb = nil;
    if ([documentContent getFastThumb] != nil) {
      fastThumb = new_ARApiFastThumb_initWithInt_withInt_withByteArray_(
#line 288
      [((ACFastThumb *) nil_chk([documentContent getFastThumb])) getW],
#line 289
      [((ACFastThumb *) nil_chk([documentContent getFastThumb])) getH],
#line 290
      [((ACFastThumb *) nil_chk([documentContent getFastThumb])) getImage]);
    }
    
#line 293
    message = new_ARApiDocumentMessage_initWithLong_withLong_withInt_withNSString_withNSString_withARApiFastThumb_withARApiDocumentEx_([((ACFileReference *) nil_chk([((ACFileRemoteSource *) nil_chk(source)) getFileReference])) getFileId],
#line 294
    [((ACFileReference *) nil_chk([source getFileReference])) getAccessHash],
#line 295
    [((ACFileReference *) nil_chk([source getFileReference])) getFileSize],
#line 296
    [((ACFileReference *) nil_chk([source getFileReference])) getFileName],
#line 297
    [documentContent getMimeType],
#line 298
    fastThumb, documentEx);
  }
  else {
    
#line 300
    return;
  }
  
#line 303
  [self requestWithACRequest:new_ARRequestSendMessage_initWithARApiOutPeer_withLong_withARApiMessage_(outPeer, rid, message) withACRpcCallback:new_ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(self, peer, rid, apiPeer)];
}


#line 321
void ACSenderActor_onSentWithACPeer_withLong_(ACSenderActor *self, ACPeer *peer, jlong rid) {
  for (ACPendingMessage * __strong pending in nil_chk([((ACPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ACPendingMessage *) nil_chk(pending)) getRid] == rid && [((ACPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ACSenderActor_savePending(self);
}

void ACSenderActor_onErrorWithACPeer_withLong_(ACSenderActor *self, ACPeer *peer, jlong rid) {
  for (ACPendingMessage * __strong pending in nil_chk([((ACPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ACPendingMessage *) nil_chk(pending)) getRid] == rid && [((ACPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ACSenderActor_savePending(self);
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getConversationActorWithACPeer:peer])) sendWithId:new_ACConversationActor_MessageError_initWithLong_(rid)];
}

void ACSenderActor_savePending(ACSenderActor *self) {
  [((id<ARPreferencesStorage>) nil_chk([self preferences])) putBytesWithKey:ACSenderActor_PREFERENCES_ withValue:[((ACPendingMessagesStorage *) nil_chk(self->pendingMessages_)) toByteArray]];
}

ACPendingMessage *ACSenderActor_findPendingWithLong_(ACSenderActor *self, jlong rid) {
  for (ACPendingMessage * __strong message in nil_chk([((ACPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ACPendingMessage *) nil_chk(message)) getRid] == rid) {
      return message;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 394
@implementation ACSenderActor_SendDocument


#line 402
- (instancetype)initWithACPeer:(ACPeer *)peer
                  withNSString:(NSString *)fileName
                  withNSString:(NSString *)mimeType
                       withInt:(jint)fileSize
                  withNSString:(NSString *)descriptor
               withACFastThumb:(ACFastThumb *)fastThumb {
  ACSenderActor_SendDocument_initWithACPeer_withNSString_withNSString_withInt_withNSString_withACFastThumb_(self, peer, fileName, mimeType, fileSize, descriptor, fastThumb);
  return self;
}

- (ACFastThumb *)getFastThumb {
  return fastThumb_;
}

- (jint)getFileSize {
  return fileSize_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (NSString *)getMimeType {
  return mimeType_;
}

- (ACPeer *)getPeer {
  return peer_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withNSString:withNSString:withInt:withNSString:withACFastThumb:", "SendDocument", NULL, 0x1, NULL, NULL },
    { "getFastThumb", NULL, "Lim.actor.core.entity.content.FastThumb;", 0x1, NULL, NULL },
    { "getFileSize", NULL, "I", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMimeType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getDescriptor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fastThumb_", NULL, 0x2, "Lim.actor.core.entity.content.FastThumb;", NULL, NULL, .constantValue.asLong = 0 },
    { "descriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mimeType_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_SendDocument = { 2, "SendDocument", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_SendDocument;
}

@end


#line 402
void ACSenderActor_SendDocument_initWithACPeer_withNSString_withNSString_withInt_withNSString_withACFastThumb_(ACSenderActor_SendDocument *self, ACPeer *peer, NSString *fileName, NSString *mimeType, jint fileSize, NSString *descriptor, ACFastThumb *fastThumb) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileName_ = fileName;
  self->mimeType_ = mimeType;
  self->fileSize_ = fileSize;
}


#line 402
ACSenderActor_SendDocument *new_ACSenderActor_SendDocument_initWithACPeer_withNSString_withNSString_withInt_withNSString_withACFastThumb_(ACPeer *peer, NSString *fileName, NSString *mimeType, jint fileSize, NSString *descriptor, ACFastThumb *fastThumb) {
  ACSenderActor_SendDocument *self = [ACSenderActor_SendDocument alloc];
  ACSenderActor_SendDocument_initWithACPeer_withNSString_withNSString_withInt_withNSString_withACFastThumb_(self, peer, fileName, mimeType, fileSize, descriptor, fastThumb);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_SendDocument)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 437
@implementation ACSenderActor_SendPhoto


#line 446
- (instancetype)initWithACPeer:(ACPeer *)peer
               withACFastThumb:(ACFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                  withNSString:(NSString *)fileName
                       withInt:(jint)fileSize
                       withInt:(jint)w
                       withInt:(jint)h {
  ACSenderActor_SendPhoto_initWithACPeer_withACFastThumb_withNSString_withNSString_withInt_withInt_withInt_(self, peer, fastThumb, descriptor, fileName, fileSize, w, h);
  return self;
}

- (ACPeer *)getPeer {
  return peer_;
}

- (ACFastThumb *)getFastThumb {
  return fastThumb_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (jint)getFileSize {
  return fileSize_;
}

- (jint)getW {
  return w_;
}

- (jint)getH {
  return h_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withACFastThumb:withNSString:withNSString:withInt:withInt:withInt:", "SendPhoto", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getFastThumb", NULL, "Lim.actor.core.entity.content.FastThumb;", 0x1, NULL, NULL },
    { "getDescriptor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFileSize", NULL, "I", 0x1, NULL, NULL },
    { "getW", NULL, "I", 0x1, NULL, NULL },
    { "getH", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fastThumb_", NULL, 0x2, "Lim.actor.core.entity.content.FastThumb;", NULL, NULL, .constantValue.asLong = 0 },
    { "descriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "w_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "h_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_SendPhoto = { 2, "SendPhoto", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_SendPhoto;
}

@end


#line 446
void ACSenderActor_SendPhoto_initWithACPeer_withACFastThumb_withNSString_withNSString_withInt_withInt_withInt_(ACSenderActor_SendPhoto *self, ACPeer *peer, ACFastThumb *fastThumb, NSString *descriptor, NSString *fileName, jint fileSize, jint w, jint h) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileName_ = fileName;
  self->fileSize_ = fileSize;
  self->w_ = w;
  self->h_ = h;
}


#line 446
ACSenderActor_SendPhoto *new_ACSenderActor_SendPhoto_initWithACPeer_withACFastThumb_withNSString_withNSString_withInt_withInt_withInt_(ACPeer *peer, ACFastThumb *fastThumb, NSString *descriptor, NSString *fileName, jint fileSize, jint w, jint h) {
  ACSenderActor_SendPhoto *self = [ACSenderActor_SendPhoto alloc];
  ACSenderActor_SendPhoto_initWithACPeer_withACFastThumb_withNSString_withNSString_withInt_withInt_withInt_(self, peer, fastThumb, descriptor, fileName, fileSize, w, h);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_SendPhoto)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 486
@implementation ACSenderActor_SendVideo


#line 496
- (instancetype)initWithACPeer:(ACPeer *)peer
                  withNSString:(NSString *)fileName
                       withInt:(jint)w
                       withInt:(jint)h
                       withInt:(jint)duration
               withACFastThumb:(ACFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                       withInt:(jint)fileSize {
  ACSenderActor_SendVideo_initWithACPeer_withNSString_withInt_withInt_withInt_withACFastThumb_withNSString_withInt_(self, peer, fileName, w, h, duration, fastThumb, descriptor, fileSize);
  return self;
}

- (ACPeer *)getPeer {
  return peer_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (jint)getW {
  return w_;
}

- (jint)getH {
  return h_;
}

- (jint)getDuration {
  return duration_;
}

- (ACFastThumb *)getFastThumb {
  return fastThumb_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

- (jint)getFileSize {
  return fileSize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withNSString:withInt:withInt:withInt:withACFastThumb:withNSString:withInt:", "SendVideo", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getW", NULL, "I", 0x1, NULL, NULL },
    { "getH", NULL, "I", 0x1, NULL, NULL },
    { "getDuration", NULL, "I", 0x1, NULL, NULL },
    { "getFastThumb", NULL, "Lim.actor.core.entity.content.FastThumb;", 0x1, NULL, NULL },
    { "getDescriptor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFileSize", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "w_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "h_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "duration_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fastThumb_", NULL, 0x2, "Lim.actor.core.entity.content.FastThumb;", NULL, NULL, .constantValue.asLong = 0 },
    { "descriptor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fileSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_SendVideo = { 2, "SendVideo", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 9, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_SendVideo;
}

@end


#line 496
void ACSenderActor_SendVideo_initWithACPeer_withNSString_withInt_withInt_withInt_withACFastThumb_withNSString_withInt_(ACSenderActor_SendVideo *self, ACPeer *peer, NSString *fileName, jint w, jint h, jint duration, ACFastThumb *fastThumb, NSString *descriptor, jint fileSize) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fileName_ = fileName;
  self->w_ = w;
  self->h_ = h;
  self->duration_ = duration;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileSize_ = fileSize;
}


#line 496
ACSenderActor_SendVideo *new_ACSenderActor_SendVideo_initWithACPeer_withNSString_withInt_withInt_withInt_withACFastThumb_withNSString_withInt_(ACPeer *peer, NSString *fileName, jint w, jint h, jint duration, ACFastThumb *fastThumb, NSString *descriptor, jint fileSize) {
  ACSenderActor_SendVideo *self = [ACSenderActor_SendVideo alloc];
  ACSenderActor_SendVideo_initWithACPeer_withNSString_withInt_withInt_withInt_withACFastThumb_withNSString_withInt_(self, peer, fileName, w, h, duration, fastThumb, descriptor, fileSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_SendVideo)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 541
@implementation ACSenderActor_SendText


#line 548
- (instancetype)initWithACPeer:(ACPeer *)peer
                  withNSString:(NSString *)text
                  withNSString:(NSString *)markDownText
         withJavaUtilArrayList:(JavaUtilArrayList *)mentions
                   withBoolean:(jboolean)autoDetect {
  ACSenderActor_SendText_initWithACPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(self, peer, text, markDownText, mentions, autoDetect);
  return self;
}

- (ACPeer *)getPeer {
  return peer_;
}

- (NSString *)getText {
  return text_;
}

- (NSString *)getMarkDownText {
  return markDownText_;
}

- (JavaUtilArrayList *)getMentions {
  return mentions_;
}

- (jboolean)isAutoDetect {
  return autoDetect_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withNSString:withNSString:withJavaUtilArrayList:withBoolean:", "SendText", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMarkDownText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMentions", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "isAutoDetect", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "markDownText_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "mentions_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "autoDetect_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_SendText = { 2, "SendText", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_SendText;
}

@end


#line 548
void ACSenderActor_SendText_initWithACPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(ACSenderActor_SendText *self, ACPeer *peer, NSString *text, NSString *markDownText, JavaUtilArrayList *mentions, jboolean autoDetect) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->text_ = text;
  self->markDownText_ = markDownText;
  self->mentions_ = mentions;
  self->autoDetect_ = autoDetect;
}


#line 548
ACSenderActor_SendText *new_ACSenderActor_SendText_initWithACPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(ACPeer *peer, NSString *text, NSString *markDownText, JavaUtilArrayList *mentions, jboolean autoDetect) {
  ACSenderActor_SendText *self = [ACSenderActor_SendText alloc];
  ACSenderActor_SendText_initWithACPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(self, peer, text, markDownText, mentions, autoDetect);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_SendText)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 578
@implementation ACSenderActor_MessageSent


#line 582
- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)rid {
  ACSenderActor_MessageSent_initWithACPeer_withLong_(self, peer, rid);
  return self;
}


#line 587
- (ACPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withLong:", "MessageSent", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_MessageSent = { 2, "MessageSent", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_MessageSent;
}

@end


#line 582
void ACSenderActor_MessageSent_initWithACPeer_withLong_(ACSenderActor_MessageSent *self, ACPeer *peer, jlong rid) {
  (void) NSObject_init(self);
  
#line 583
  self->peer_ = peer;
  self->rid_ = rid;
}


#line 582
ACSenderActor_MessageSent *new_ACSenderActor_MessageSent_initWithACPeer_withLong_(ACPeer *peer, jlong rid) {
  ACSenderActor_MessageSent *self = [ACSenderActor_MessageSent alloc];
  ACSenderActor_MessageSent_initWithACPeer_withLong_(self, peer, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_MessageSent)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"


#line 596
@implementation ACSenderActor_MessageError


#line 600
- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)rid {
  ACSenderActor_MessageError_initWithACPeer_withLong_(self, peer, rid);
  return self;
}


#line 605
- (ACPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withLong:", "MessageError", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getRid", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "rid_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSenderActor_MessageError = { 2, "MessageError", "im.actor.core.modules.internal.messages", "SenderActor", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSenderActor_MessageError;
}

@end


#line 600
void ACSenderActor_MessageError_initWithACPeer_withLong_(ACSenderActor_MessageError *self, ACPeer *peer, jlong rid) {
  (void) NSObject_init(self);
  
#line 601
  self->peer_ = peer;
  self->rid_ = rid;
}


#line 600
ACSenderActor_MessageError *new_ACSenderActor_MessageError_initWithACPeer_withLong_(ACPeer *peer, jlong rid) {
  ACSenderActor_MessageError *self = [ACSenderActor_MessageError alloc];
  ACSenderActor_MessageError_initWithACPeer_withLong_(self, peer, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_MessageError)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/messages/SenderActor.java"

@implementation ACSenderActor_$1


#line 306
- (void)onResult:(ARResponseSeqDate *)response {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACSenderActor_MessageSent_initWithACPeer_withLong_(val$peer_, val$rid_)];
  [((ACUpdates *) nil_chk([this$0_ updates])) onUpdateReceivedWithId:new_ARSeqUpdate_initWithInt_withByteArray_withInt_withByteArray_([((ARResponseSeqDate *) nil_chk(response)) getSeq],
#line 309
  [response getState],
#line 310
  ARUpdateMessageSent_HEADER,
#line 311
  [new_ARUpdateMessageSent_initWithARApiPeer_withLong_withLong_(val$apiPeer_, val$rid_, [response getDate]) toByteArray])];
}


#line 315
- (void)onError:(ACRpcException *)e {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACSenderActor_MessageError_initWithACPeer_withLong_(val$peer_, val$rid_)];
}

- (instancetype)initWithACSenderActor:(ACSenderActor *)outer$
                           withACPeer:(ACPeer *)capture$0
                             withLong:(jlong)capture$1
                        withARApiPeer:(ARApiPeer *)capture$2 {
  ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onResult:", "onResult", "V", 0x1, NULL, NULL },
    { "onError:", "onError", "V", 0x1, NULL, NULL },
    { "initWithACSenderActor:withACPeer:withLong:withARApiPeer:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.messages.SenderActor;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$peer_", NULL, 0x1012, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$rid_", NULL, 0x1012, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "val$apiPeer_", NULL, 0x1012, "Lim.actor.core.api.ApiPeer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACSenderActor", "performSendContentWithACPeer:withLong:withACAbsContent:" };
  static const J2ObjcClassInfo _ACSenderActor_$1 = { 2, "", "im.actor.core.modules.internal.messages", "SenderActor", 0x8008, 3, methods, 4, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/core/network/RpcCallback<Lim/actor/core/api/rpc/ResponseSeqDate;>;" };
  return &_ACSenderActor_$1;
}

@end

void ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(ACSenderActor_$1 *self, ACSenderActor *outer$, ACPeer *capture$0, jlong capture$1, ARApiPeer *capture$2) {
  self->this$0_ = outer$;
  self->val$peer_ = capture$0;
  self->val$rid_ = capture$1;
  self->val$apiPeer_ = capture$2;
  (void) NSObject_init(self);
}

ACSenderActor_$1 *new_ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(ACSenderActor *outer$, ACPeer *capture$0, jlong capture$1, ARApiPeer *capture$2) {
  ACSenderActor_$1 *self = [ACSenderActor_$1 alloc];
  ACSenderActor_$1_initWithACSenderActor_withACPeer_withLong_withARApiPeer_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSenderActor_$1)

#pragma clang diagnostic pop
