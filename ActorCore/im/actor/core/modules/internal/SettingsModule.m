//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/SettingsModule.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/Configuration.h"
#include "im/actor/core/DeviceCategory.h"
#include "im/actor/core/PlatformType.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/PeerType.h"
#include "im/actor/core/modules/AbsModule.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/SettingsModule.h"
#include "im/actor/core/modules/internal/settings/SettingsSyncActor.h"
#include "im/actor/runtime/actors/ActorCreator.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/storage/PreferencesStorage.h"
#include <j2objc/java/lang/RuntimeException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACSettingsModule () {
 @public
  NSString *STORAGE_PREFIX_;
  NSString *KEY_SOUND_EFFECTS_;
  NSString *KEY_CHAT_SEND_BY_ENTER_;
  NSString *KEY_NOTIFICATION_ENABLED_;
  NSString *KEY_NOTIFICATION_SOUND_;
  NSString *KEY_NOTIFICATION_SOUND_ENABLED_;
  NSString *KEY_NOTIFICATION_VIBRATION_;
  NSString *KEY_NOTIFICATION_IN_APP_ENABLED_;
  NSString *KEY_NOTIFICATION_IN_APP_SOUND_;
  NSString *KEY_NOTIFICATION_IN_APP_VIBRATION_;
  NSString *KEY_NOTIFICATION_TEXT_;
  NSString *KEY_NOTIFICATION_CHAT_PREFIX_;
  NSString *KEY_NOTIFICATION_GROUP_ENABLED_;
  NSString *KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_;
  NSString *KEY_MARKDOWN_ENABLED_;
  NSString *KEY_RENAME_HINT_SHOWN_;
  NSString *KEY_WALLPAPPER_;
  ARActorRef *settingsSync_;
}

- (void)changeValueWithNSString:(NSString *)key
                   withNSString:(NSString *)val;

- (NSString *)readValueWithNSString:(NSString *)key;

- (NSString *)getChatKeyWithACPeer:(ACPeer *)peer;

@end

J2OBJC_FIELD_SETTER(ACSettingsModule, STORAGE_PREFIX_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_SOUND_EFFECTS_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_CHAT_SEND_BY_ENTER_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_ENABLED_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_SOUND_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_SOUND_ENABLED_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_VIBRATION_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_IN_APP_ENABLED_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_IN_APP_SOUND_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_IN_APP_VIBRATION_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_TEXT_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_CHAT_PREFIX_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_GROUP_ENABLED_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_MARKDOWN_ENABLED_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_RENAME_HINT_SHOWN_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, KEY_WALLPAPPER_, NSString *)
J2OBJC_FIELD_SETTER(ACSettingsModule, settingsSync_, ARActorRef *)

__attribute__((unused)) static void ACSettingsModule_changeValueWithNSString_withNSString_(ACSettingsModule *self, NSString *key, NSString *val);

__attribute__((unused)) static NSString *ACSettingsModule_readValueWithNSString_(ACSettingsModule *self, NSString *key);

__attribute__((unused)) static NSString *ACSettingsModule_getChatKeyWithACPeer_(ACSettingsModule *self, ACPeer *peer);

@interface ACSettingsModule_$1 : NSObject < ARActorCreator > {
 @public
  ACSettingsModule *this$0_;
}

- (ACSettingsSyncActor *)create;

- (instancetype)initWithACSettingsModule:(ACSettingsModule *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACSettingsModule_$1)

J2OBJC_FIELD_SETTER(ACSettingsModule_$1, this$0_, ACSettingsModule *)

__attribute__((unused)) static void ACSettingsModule_$1_initWithACSettingsModule_(ACSettingsModule_$1 *self, ACSettingsModule *outer$);

__attribute__((unused)) static ACSettingsModule_$1 *new_ACSettingsModule_$1_initWithACSettingsModule_(ACSettingsModule *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACSettingsModule_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/SettingsModule.java"


#line 17
@implementation ACSettingsModule


#line 45
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACSettingsModule_initWithACModuleContext_(self, context);
  return self;
}


#line 108
- (void)run {
  settingsSync_ = [((ARActorSystem *) nil_chk(ARActorSystem_system())) actorOfWithARProps:ARProps_createWithIOSClass_withARActorCreator_(ACSettingsSyncActor_class_(), new_ACSettingsModule_$1_initWithACSettingsModule_(self)) withNSString:
#line 114
  @"actor/settings"];
}


#line 120
- (jboolean)isConversationTonesEnabled {
  return [self getBooleanValueWithNSString:KEY_SOUND_EFFECTS_ withBoolean:true];
}

- (void)changeConversationTonesEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_SOUND_EFFECTS_ withBoolean:val];
}


#line 130
- (jboolean)isNotificationsEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_ENABLED_ withBoolean:true];
}

- (void)changeNotificationsEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_ENABLED_ withBoolean:val];
}

- (jboolean)isNotificationSoundEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_SOUND_ENABLED_ withBoolean:true];
}

- (void)changeNotificationSoundEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_SOUND_ENABLED_ withBoolean:val];
}

- (NSString *)getNotificationSound {
  return ACSettingsModule_readValueWithNSString_(self, KEY_NOTIFICATION_SOUND_);
}

- (void)changeNotificationSoundWithNSString:(NSString *)sound {
  [self setStringValueWithNSString:KEY_NOTIFICATION_SOUND_ withNSString:sound];
}

- (jboolean)isVibrationEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_VIBRATION_ withBoolean:true];
}

- (void)changeNotificationVibrationEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_VIBRATION_ withBoolean:val];
}

- (jboolean)isShowNotificationsText {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_TEXT_ withBoolean:true];
}

- (void)changeShowNotificationTextEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_TEXT_ withBoolean:val];
}


#line 172
- (jboolean)isGroupNotificationsEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_GROUP_ENABLED_ withBoolean:true];
}

- (void)changeGroupNotificationsEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_GROUP_ENABLED_ withBoolean:val];
}

- (jboolean)isGroupNotificationsOnlyMentionsEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_ withBoolean:false];
}

- (void)changeGroupNotificationsOnlyMentionsEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_ withBoolean:val];
}


#line 190
- (jboolean)isInAppEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_ENABLED_ withBoolean:true];
}

- (void)changeInAppEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_ENABLED_ withBoolean:val];
}

- (jboolean)isInAppSoundEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_SOUND_ withBoolean:true];
}

- (void)changeInAppSoundEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_SOUND_ withBoolean:val];
}

- (jboolean)isInAppVibrationEnabled {
  return [self getBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_VIBRATION_ withBoolean:true];
}

- (void)changeInAppVibrationEnabledWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_NOTIFICATION_IN_APP_VIBRATION_ withBoolean:val];
}


#line 216
- (jboolean)isSendByEnterEnabled {
  return [self getBooleanValueWithNSString:KEY_CHAT_SEND_BY_ENTER_ withBoolean:true];
}

- (void)changeSendByEnterWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_CHAT_SEND_BY_ENTER_ withBoolean:val];
}

- (jboolean)isMarkdownEnabled {
  return [self getBooleanValueWithNSString:KEY_MARKDOWN_ENABLED_ withBoolean:false];
}

- (void)changeMarkdownWithBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:KEY_MARKDOWN_ENABLED_ withBoolean:val];
}


#line 234
- (jboolean)isNotificationsEnabledWithACPeer:(ACPeer *)peer {
  return [self getBooleanValueWithNSString:JreStrcat("$$$", KEY_NOTIFICATION_CHAT_PREFIX_, ACSettingsModule_getChatKeyWithACPeer_(self, peer), @".enabled") withBoolean:true];
}

- (void)changeNotificationsEnabledWithACPeer:(ACPeer *)peer
                                 withBoolean:(jboolean)val {
  [self setBooleanValueWithNSString:JreStrcat("$$$", KEY_NOTIFICATION_CHAT_PREFIX_, ACSettingsModule_getChatKeyWithACPeer_(self, peer), @".enabled") withBoolean:val];
}


#line 242
- (NSString *)getNotificationSoundWithACPeer:(ACPeer *)peer {
  return ACSettingsModule_readValueWithNSString_(self, JreStrcat("$$$", KEY_NOTIFICATION_CHAT_PREFIX_, ACSettingsModule_getChatKeyWithACPeer_(self, peer), @".sound"));
}

- (void)changeNotificationSoundWithACPeer:(ACPeer *)peer
                             withNSString:(NSString *)sound {
  [self setStringValueWithNSString:JreStrcat("$$$", KEY_NOTIFICATION_CHAT_PREFIX_, ACSettingsModule_getChatKeyWithACPeer_(self, peer), @".sound") withNSString:sound];
}


#line 252
- (jboolean)isRenameHintShown {
  jboolean res = [self getBooleanValueWithNSString:KEY_RENAME_HINT_SHOWN_ withBoolean:false];
  if (!res) {
    [self setBooleanValueWithNSString:KEY_RENAME_HINT_SHOWN_ withBoolean:true];
  }
  return res;
}


#line 262
- (NSString *)getSelectedWallpapper {
  return ACSettingsModule_readValueWithNSString_(self, KEY_WALLPAPPER_);
}

- (void)changeSelectedWallpapperWithNSString:(NSString *)uri {
  ACSettingsModule_changeValueWithNSString_withNSString_(self, KEY_WALLPAPPER_, uri);
}


#line 272
- (jboolean)getBooleanValueWithNSString:(NSString *)key
                            withBoolean:(jboolean)defaultVal {
  NSString *sValue = ACSettingsModule_readValueWithNSString_(self, key);
  jboolean res = defaultVal;
  if (sValue != nil) {
    if ([@"true" isEqual:sValue]) {
      res = true;
    }
    else
#line 278
    if ([@"false" isEqual:sValue]) {
      res = false;
    }
  }
  return res;
}


#line 285
- (jboolean)getBooleanValueWithNSString:(NSString *)key {
  return [self getBooleanValueWithNSString:key withBoolean:false];
}

- (void)setBooleanValueWithNSString:(NSString *)key
                        withBoolean:(jboolean)val {
  NSString *sVal = val ? @"true" : @"false";
  ACSettingsModule_changeValueWithNSString_withNSString_(self, key, sVal);
}


#line 294
- (NSString *)getStringValueWithNSString:(NSString *)key
                            withNSString:(NSString *)defaultVal {
  NSString *sValue = ACSettingsModule_readValueWithNSString_(self, key);
  if (sValue == nil) {
    return defaultVal;
  }
  return sValue;
}


#line 302
- (NSString *)getStringValueWithNSString:(NSString *)key {
  return [self getStringValueWithNSString:key withNSString:nil];
}

- (void)setStringValueWithNSString:(NSString *)key
                      withNSString:(NSString *)val {
  ACSettingsModule_changeValueWithNSString_withNSString_(self, key, val);
}


#line 312
- (void)changeValueWithNSString:(NSString *)key
                   withNSString:(NSString *)val {
  ACSettingsModule_changeValueWithNSString_withNSString_(self, key, val);
}

- (NSString *)readValueWithNSString:(NSString *)key {
  return ACSettingsModule_readValueWithNSString_(self, key);
}

- (void)onUpdatedSettingWithNSString:(NSString *)key
                        withNSString:(NSString *)value {
  [((id<ARPreferencesStorage>) nil_chk([self preferences])) putStringWithKey:JreStrcat("$$", STORAGE_PREFIX_, key) withValue:value];
}


#line 325
- (NSString *)getChatKeyWithACPeer:(ACPeer *)peer {
  return ACSettingsModule_getChatKeyWithACPeer_(self, peer);
}


#line 336
- (void)resetModule {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "SettingsModule", NULL, 0x1, NULL, NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "isConversationTonesEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeConversationTonesEnabledWithBoolean:", "changeConversationTonesEnabled", "V", 0x1, NULL, NULL },
    { "isNotificationsEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeNotificationsEnabledWithBoolean:", "changeNotificationsEnabled", "V", 0x1, NULL, NULL },
    { "isNotificationSoundEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeNotificationSoundEnabledWithBoolean:", "changeNotificationSoundEnabled", "V", 0x1, NULL, NULL },
    { "getNotificationSound", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "changeNotificationSoundWithNSString:", "changeNotificationSound", "V", 0x1, NULL, NULL },
    { "isVibrationEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeNotificationVibrationEnabledWithBoolean:", "changeNotificationVibrationEnabled", "V", 0x1, NULL, NULL },
    { "isShowNotificationsText", NULL, "Z", 0x1, NULL, NULL },
    { "changeShowNotificationTextEnabledWithBoolean:", "changeShowNotificationTextEnabled", "V", 0x1, NULL, NULL },
    { "isGroupNotificationsEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeGroupNotificationsEnabledWithBoolean:", "changeGroupNotificationsEnabled", "V", 0x1, NULL, NULL },
    { "isGroupNotificationsOnlyMentionsEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeGroupNotificationsOnlyMentionsEnabledWithBoolean:", "changeGroupNotificationsOnlyMentionsEnabled", "V", 0x1, NULL, NULL },
    { "isInAppEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeInAppEnabledWithBoolean:", "changeInAppEnabled", "V", 0x1, NULL, NULL },
    { "isInAppSoundEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeInAppSoundEnabledWithBoolean:", "changeInAppSoundEnabled", "V", 0x1, NULL, NULL },
    { "isInAppVibrationEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeInAppVibrationEnabledWithBoolean:", "changeInAppVibrationEnabled", "V", 0x1, NULL, NULL },
    { "isSendByEnterEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeSendByEnterWithBoolean:", "changeSendByEnter", "V", 0x1, NULL, NULL },
    { "isMarkdownEnabled", NULL, "Z", 0x1, NULL, NULL },
    { "changeMarkdownWithBoolean:", "changeMarkdown", "V", 0x1, NULL, NULL },
    { "isNotificationsEnabledWithACPeer:", "isNotificationsEnabled", "Z", 0x1, NULL, NULL },
    { "changeNotificationsEnabledWithACPeer:withBoolean:", "changeNotificationsEnabled", "V", 0x1, NULL, NULL },
    { "getNotificationSoundWithACPeer:", "getNotificationSound", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "changeNotificationSoundWithACPeer:withNSString:", "changeNotificationSound", "V", 0x1, NULL, NULL },
    { "isRenameHintShown", NULL, "Z", 0x1, NULL, NULL },
    { "getSelectedWallpapper", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "changeSelectedWallpapperWithNSString:", "changeSelectedWallpapper", "V", 0x1, NULL, NULL },
    { "getBooleanValueWithNSString:withBoolean:", "getBooleanValue", "Z", 0x1, NULL, NULL },
    { "getBooleanValueWithNSString:", "getBooleanValue", "Z", 0x1, NULL, NULL },
    { "setBooleanValueWithNSString:withBoolean:", "setBooleanValue", "V", 0x1, NULL, NULL },
    { "getStringValueWithNSString:withNSString:", "getStringValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getStringValueWithNSString:", "getStringValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setStringValueWithNSString:withNSString:", "setStringValue", "V", 0x1, NULL, NULL },
    { "changeValueWithNSString:withNSString:", "changeValue", "V", 0x2, NULL, NULL },
    { "readValueWithNSString:", "readValue", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "onUpdatedSettingWithNSString:withNSString:", "onUpdatedSetting", "V", 0x1, NULL, NULL },
    { "getChatKeyWithACPeer:", "getChatKey", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "resetModule", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STORAGE_PREFIX_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_SOUND_EFFECTS_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_CHAT_SEND_BY_ENTER_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_ENABLED_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_SOUND_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_SOUND_ENABLED_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_VIBRATION_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_IN_APP_ENABLED_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_IN_APP_SOUND_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_IN_APP_VIBRATION_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_TEXT_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_CHAT_PREFIX_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_GROUP_ENABLED_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_MARKDOWN_ENABLED_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_RENAME_HINT_SHOWN_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "KEY_WALLPAPPER_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "settingsSync_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACSettingsModule = { 2, "SettingsModule", "im.actor.core.modules.internal", NULL, 0x1, 46, methods, 18, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACSettingsModule;
}

@end


#line 45
void ACSettingsModule_initWithACModuleContext_(ACSettingsModule *self, id<ACModuleContext> context) {
  (void) ACAbsModule_initWithACModuleContext_(self, context);
  self->STORAGE_PREFIX_ =
#line 19
  @"app.settings.";
  
#line 48
  NSString *platformType;
  switch ([[((ACConfiguration *) nil_chk([((id<ACModuleContext>) nil_chk(context)) getConfiguration])) getPlatformType] ordinal]) {
    case ACPlatformType_ANDROID:
    platformType = @"android";
    break;
    case ACPlatformType_IOS:
    platformType = @"ios";
    break;
    case ACPlatformType_WEB:
    platformType = @"web";
    break;
    default:
    case ACPlatformType_GENERIC:
    platformType = @"generic";
    break;
  }
  
#line 65
  NSString *deviceType;
  switch ([[((ACConfiguration *) nil_chk([context getConfiguration])) getDeviceCategory] ordinal]) {
    case ACDeviceCategory_TABLET:
    deviceType = @"tablet";
    break;
    case ACDeviceCategory_DESKTOP:
    deviceType = @"desktop";
    break;
    case ACDeviceCategory_MOBILE:
    deviceType = @"mobile";
    break;
    default:
    deviceType = @"generic";
    break;
  }
  
#line 82
  self->KEY_SOUND_EFFECTS_ = JreStrcat("$$$$", @"app.", platformType, deviceType, @".tones_enabled");
  self->KEY_CHAT_SEND_BY_ENTER_ = JreStrcat("$$$$", @"app.", platformType, deviceType, @".send_by_enter");
  self->KEY_MARKDOWN_ENABLED_ = JreStrcat("$$$$", @"app.", platformType, deviceType, @".use_markdown");
  
#line 87
  self->KEY_NOTIFICATION_ENABLED_ = JreStrcat("$$$", @"category.", deviceType, @".notification.enabled");
  self->KEY_NOTIFICATION_SOUND_ENABLED_ = JreStrcat("$$$", @"category.", deviceType, @".notification.sound.enabled");
  self->KEY_NOTIFICATION_VIBRATION_ = JreStrcat("$$$", @"category.", deviceType, @".notification.vibration.enabled");
  self->KEY_NOTIFICATION_TEXT_ = JreStrcat("$$$", @"category.", deviceType, @".notification.show_text");
  self->KEY_NOTIFICATION_CHAT_PREFIX_ = JreStrcat("$$$", @"category.", deviceType, @".notification.chat.");
  
#line 93
  self->KEY_NOTIFICATION_IN_APP_ENABLED_ = JreStrcat("$$$", @"category.", deviceType, @".in_app.enabled");
  self->KEY_NOTIFICATION_IN_APP_SOUND_ = JreStrcat("$$$", @"category.", deviceType, @".in_app.sound.enabled");
  self->KEY_NOTIFICATION_IN_APP_VIBRATION_ = JreStrcat("$$$", @"category.", deviceType, @".in_app.vibration.enabled");
  
#line 98
  self->KEY_NOTIFICATION_SOUND_ = @"account.notification.sound";
  self->KEY_NOTIFICATION_GROUP_ENABLED_ = @"account.notifications.group.enabled";
  self->KEY_NOTIFICATION_GROUP_ONLY_MENTIONS_ = @"account.notifications.group.mentions";
  
#line 103
  self->KEY_RENAME_HINT_SHOWN_ = @"hint.contact.rename";
  
#line 105
  self->KEY_WALLPAPPER_ = @"wallpaper.uri";
}


#line 45
ACSettingsModule *new_ACSettingsModule_initWithACModuleContext_(id<ACModuleContext> context) {
  ACSettingsModule *self = [ACSettingsModule alloc];
  ACSettingsModule_initWithACModuleContext_(self, context);
  return self;
}


#line 312
void ACSettingsModule_changeValueWithNSString_withNSString_(ACSettingsModule *self, NSString *key, NSString *val) {
  [((ARActorRef *) nil_chk(self->settingsSync_)) sendWithId:new_ACSettingsSyncActor_ChangeSettings_initWithNSString_withNSString_(key, val)];
  [self onUpdatedSettingWithNSString:key withNSString:val];
}

NSString *ACSettingsModule_readValueWithNSString_(ACSettingsModule *self, NSString *key) {
  return [((id<ARPreferencesStorage>) nil_chk([self preferences])) getStringWithKey:JreStrcat("$$", self->STORAGE_PREFIX_, key)];
}


#line 325
NSString *ACSettingsModule_getChatKeyWithACPeer_(ACSettingsModule *self, ACPeer *peer) {
  if ([((ACPeer *) nil_chk(peer)) getPeerType] == JreLoadStatic(ACPeerTypeEnum, PRIVATE)) {
    return JreStrcat("$I", @"PRIVATE_", [peer getPeerId]);
  }
  else
#line 328
  if ([peer getPeerType] == JreLoadStatic(ACPeerTypeEnum, GROUP)) {
    return JreStrcat("$I", @"GROUP_", [peer getPeerId]);
  }
  else {
    
#line 331
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unsupported peer");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSettingsModule)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/SettingsModule.java"

@implementation ACSettingsModule_$1


#line 111
- (ACSettingsSyncActor *)create {
  return new_ACSettingsSyncActor_initWithACModuleContext_([this$0_ context]);
}

- (instancetype)initWithACSettingsModule:(ACSettingsModule *)outer$ {
  ACSettingsModule_$1_initWithACSettingsModule_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lim.actor.core.modules.internal.settings.SettingsSyncActor;", 0x1, NULL, NULL },
    { "initWithACSettingsModule:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.SettingsModule;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACSettingsModule", "run" };
  static const J2ObjcClassInfo _ACSettingsModule_$1 = { 2, "", "im.actor.core.modules.internal", "SettingsModule", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/runtime/actors/ActorCreator<Lim/actor/core/modules/internal/settings/SettingsSyncActor;>;" };
  return &_ACSettingsModule_$1;
}

@end

void ACSettingsModule_$1_initWithACSettingsModule_(ACSettingsModule_$1 *self, ACSettingsModule *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACSettingsModule_$1 *new_ACSettingsModule_$1_initWithACSettingsModule_(ACSettingsModule *outer$) {
  ACSettingsModule_$1 *self = [ACSettingsModule_$1 alloc];
  ACSettingsModule_$1_initWithACSettingsModule_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACSettingsModule_$1)

#pragma clang diagnostic pop
