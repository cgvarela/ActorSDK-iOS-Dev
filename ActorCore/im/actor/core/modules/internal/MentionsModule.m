//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/MentionsModule.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/entity/Avatar.h"
#include "im/actor/core/entity/Group.h"
#include "im/actor/core/entity/GroupMember.h"
#include "im/actor/core/entity/MentionFilterResult.h"
#include "im/actor/core/entity/User.h"
#include "im/actor/core/modules/AbsModule.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/MentionsModule.h"
#include "im/actor/core/util/StringMatch.h"
#include "im/actor/core/util/StringMatcher.h"
#include "im/actor/runtime/storage/KeyValueEngine.h"
#include <j2objc/java/util/ArrayList.h>
#include <j2objc/java/util/Arrays.h>
#include <j2objc/java/util/Comparator.h>
#include <j2objc/java/util/List.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACMentionsModule_SEARCH_LIMIT 30

J2OBJC_STATIC_FIELD_GETTER(ACMentionsModule, SEARCH_LIMIT, jint)

@interface ACMentionsModule_$1 : NSObject < JavaUtilComparator > {
 @public
  ACMentionsModule *this$0_;
}

- (jint)compareWithId:(ACGroupMember *)a
               withId:(ACGroupMember *)b;

- (instancetype)initWithACMentionsModule:(ACMentionsModule *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ACMentionsModule_$1)

J2OBJC_FIELD_SETTER(ACMentionsModule_$1, this$0_, ACMentionsModule *)

__attribute__((unused)) static void ACMentionsModule_$1_initWithACMentionsModule_(ACMentionsModule_$1 *self, ACMentionsModule *outer$);

__attribute__((unused)) static ACMentionsModule_$1 *new_ACMentionsModule_$1_initWithACMentionsModule_(ACMentionsModule *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACMentionsModule_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/MentionsModule.java"


#line 21
@implementation ACMentionsModule


#line 25
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACMentionsModule_initWithACModuleContext_(self, context);
  return self;
}


#line 29
- (id<JavaUtilList>)findMentionsWithInt:(jint)gid
                           withNSString:(NSString *)query {
  query = [((NSString *) nil_chk([((NSString *) nil_chk(query)) trim])) lowercaseString];
  
#line 32
  JavaUtilArrayList *results = new_JavaUtilArrayList_init();
  ACGroup *group = [((id<ARKeyValueEngine>) nil_chk([self groups])) getValueWithKey:gid];
  IOSObjectArray *members = [((id<JavaUtilList>) nil_chk([((ACGroup *) nil_chk(group)) getMembers])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk([group getMembers])) size] type:ACGroupMember_class_()]];
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(members, new_ACMentionsModule_$1_initWithACMentionsModule_(self));
  {
    IOSObjectArray *a__ =
#line 44
    members;
    ACGroupMember * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ACGroupMember * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ACGroupMember *member = *b__++;
      
#line 45
      if ([((ACGroupMember *) nil_chk(member)) getUid] == [self myUid]) {
        continue;
      }
      
#line 49
      ACUser *user = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:[member getUid]];
      
#line 51
      jboolean isNick = [((ACUser *) nil_chk(user)) getNick] != nil;
      NSString *mention;
      NSString *secondName;
      
#line 55
      if (isNick) {
        mention = [user getNick];
        secondName = [user getName];
      }
      else {
        
#line 59
        if ([user getLocalName] != nil) {
          mention = [user getServerName];
          secondName = [user getLocalName];
        }
        else {
          
#line 63
          mention = [user getName];
          secondName = nil;
        }
      }
      
#line 68
      if (((jint) [((NSString *) nil_chk(query)) length]) == 0) {
        [results addWithId:new_ACMentionFilterResult_initWithInt_withACAvatar_withNSString_withJavaUtilList_withNSString_withJavaUtilList_withBoolean_([user getUid],
#line 70
        [user getAvatar],
#line 71
        isNick ? JreStrcat("C$", '@', mention) : mention, new_JavaUtilArrayList_init(),
#line 73
        secondName, new_JavaUtilArrayList_init(),
#line 74
        isNick)];
      }
      else {
        
#line 76
        id<JavaUtilList> mentionMatches = ACStringMatcher_findMatchesWithNSString_withNSString_(mention, query);
        if (secondName != nil) {
          id<JavaUtilList> secondNameMatches = ACStringMatcher_findMatchesWithNSString_withNSString_(secondName, query);
          if ([((id<JavaUtilList>) nil_chk(mentionMatches)) size] > 0 || [((id<JavaUtilList>) nil_chk(secondNameMatches)) size] > 0) {
            if (isNick) {
              id<JavaUtilList> nickMatches = new_JavaUtilArrayList_init();
              for (ACStringMatch * __strong m in mentionMatches) {
                [nickMatches addWithId:new_ACStringMatch_initWithInt_withInt_([((ACStringMatch *) nil_chk(m)) getStart] + 1, [m getLength])];
              }
              mentionMatches = nickMatches;
            }
            [results addWithId:new_ACMentionFilterResult_initWithInt_withACAvatar_withNSString_withJavaUtilList_withNSString_withJavaUtilList_withBoolean_([user getUid],
#line 88
            [user getAvatar],
#line 89
            isNick ? JreStrcat("C$", '@', mention) : mention,
#line 90
            mentionMatches,
#line 91
            secondName,
#line 92
            secondNameMatches, isNick)];
          }
        }
        else {
          
#line 95
          if ([((id<JavaUtilList>) nil_chk(mentionMatches)) size] > 0) {
            [results addWithId:new_ACMentionFilterResult_initWithInt_withACAvatar_withNSString_withJavaUtilList_withNSString_withJavaUtilList_withBoolean_([user getUid],
#line 97
            [user getAvatar],
#line 98
            mention,
#line 99
            mentionMatches,
#line 100
            nil,
#line 101
            nil, false)];
          }
        }
      }
    }
  }
  if ([results size] > ACMentionsModule_SEARCH_LIMIT) {
    [results clear];
  }
  
#line 111
  return results;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "MentionsModule", NULL, 0x1, NULL, NULL },
    { "findMentionsWithInt:withNSString:", "findMentions", "Ljava.util.List;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SEARCH_LIMIT", "SEARCH_LIMIT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACMentionsModule_SEARCH_LIMIT },
  };
  static const J2ObjcClassInfo _ACMentionsModule = { 2, "MentionsModule", "im.actor.core.modules.internal", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACMentionsModule;
}

@end


#line 25
void ACMentionsModule_initWithACModuleContext_(ACMentionsModule *self, id<ACModuleContext> context) {
  (void) ACAbsModule_initWithACModuleContext_(self, context);
}


#line 25
ACMentionsModule *new_ACMentionsModule_initWithACModuleContext_(id<ACModuleContext> context) {
  ACMentionsModule *self = [ACMentionsModule alloc];
  ACMentionsModule_initWithACModuleContext_(self, context);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACMentionsModule)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/MentionsModule.java"

@implementation ACMentionsModule_$1


#line 37
- (jint)compareWithId:(ACGroupMember *)a
               withId:(ACGroupMember *)b {
  ACUser *ua = [((id<ARKeyValueEngine>) nil_chk([this$0_ users])) getValueWithKey:[((ACGroupMember *) nil_chk(a)) getUid]];
  ACUser *ub = [((id<ARKeyValueEngine>) nil_chk([this$0_ users])) getValueWithKey:[((ACGroupMember *) nil_chk(b)) getUid]];
  return [((NSString *) nil_chk([((ACUser *) nil_chk(ua)) getName])) compareToIgnoreCase:[((ACUser *) nil_chk(ub)) getName]];
}

- (instancetype)initWithACMentionsModule:(ACMentionsModule *)outer$ {
  ACMentionsModule_$1_initWithACMentionsModule_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "initWithACMentionsModule:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.modules.internal.MentionsModule;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACMentionsModule", "findMentionsWithInt:withNSString:" };
  static const J2ObjcClassInfo _ACMentionsModule_$1 = { 2, "", "im.actor.core.modules.internal", "MentionsModule", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lim/actor/core/entity/GroupMember;>;" };
  return &_ACMentionsModule_$1;
}

@end

void ACMentionsModule_$1_initWithACMentionsModule_(ACMentionsModule_$1 *self, ACMentionsModule *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ACMentionsModule_$1 *new_ACMentionsModule_$1_initWithACMentionsModule_(ACMentionsModule *outer$) {
  ACMentionsModule_$1 *self = [ACMentionsModule_$1 alloc];
  ACMentionsModule_$1_initWithACMentionsModule_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACMentionsModule_$1)

#pragma clang diagnostic pop
