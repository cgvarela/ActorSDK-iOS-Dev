//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/Configuration.h"
#include "im/actor/core/Messenger.h"
#include "im/actor/core/NotificationProvider.h"
#include "im/actor/core/PlatformType.h"
#include "im/actor/core/entity/ContentDescription.h"
#include "im/actor/core/entity/Group.h"
#include "im/actor/core/entity/Notification.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/PeerType.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/events/AppVisibleChanged.h"
#include "im/actor/core/modules/events/PeerChatClosed.h"
#include "im/actor/core/modules/events/PeerChatOpened.h"
#include "im/actor/core/modules/internal/SettingsModule.h"
#include "im/actor/core/modules/internal/notifications/NotificationsActor.h"
#include "im/actor/core/modules/internal/notifications/entity/PendingNotification.h"
#include "im/actor/core/modules/internal/notifications/entity/PendingStorage.h"
#include "im/actor/core/modules/internal/notifications/entity/ReadState.h"
#include "im/actor/core/modules/utils/ModuleActor.h"
#include "im/actor/core/util/JavaUtil.h"
#include "im/actor/runtime/Storage.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/eventbus/Event.h"
#include "im/actor/runtime/storage/KeyValueStorage.h"
#include "im/actor/runtime/storage/SyncKeyValue.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACNotificationsActor_MAX_NOTIFICATION_COUNT 10

@interface ACNotificationsActor () {
 @public
  /*!
   @brief Storage for Actor internal state
   */
  ARSyncKeyValue *storage_;
  /*!
   @brief BSer object for pending notifications storage
   */
  ACPendingStorage *pendingStorage_;
  /*!
   @brief Cached read states
   */
  JavaUtilHashMap *readStates_;
  /*!
   @brief Current visible peer
   */
  ACPeer *visiblePeer_;
  /*!
   @brief Is Application visible state
   */
  jboolean isAppVisible_;
  /*!
   @brief Is Notifications paused
   */
  jboolean isNotificationsPaused_;
  /*!
   @brief Stored notifications during pause
   */
  JavaUtilHashMap *notificationsDuringPause_;
  /*!
   @brief Is current platform is mobile
   */
  jboolean isMobilePlatform_;
}

/*!
 @brief Playing sound effects
 */
- (void)playEffectIfEnabled;

/*!
 @brief Updating notifications
 */
- (void)updateNotification;

/*!
 @brief Showing new notifications
 */
- (void)showNotification;

/*!
 @brief Hiding notifications
 */
- (void)hideNotification;

/*!
 @brief Method for showing/updating notifications
 @param performUpdate is need to perform update instead of showing
 */
- (void)performNotificationImpWithBoolean:(jboolean)performUpdate;

/*!
 @brief Convenience method for checking if sound effects are enabled
 @return is sound effects are enabled
 */
- (jboolean)isEffectsEnabled;

/*!
 @brief Testing if notifications enabled for message
 @param peer       peer of message
 @param hasMention does peer have mention
 @return is notification enabled for peer
 */
- (jboolean)isNotificationsEnabledWithACPeer:(ACPeer *)peer
                                 withBoolean:(jboolean)hasMention;

/*!
 @brief Convenience method for getting all notifications
 @return all pending notifications
 */
- (id<JavaUtilList>)getNotifications;

/*!
 @brief Saving pending messages storage
 */
- (void)saveStorage;

/*!
 @brief Getting last read sort key for peer
 @param peer peer for key
 @return sort key, 0 if not available
 */
- (jlong)getLastReadDateWithACPeer:(ACPeer *)peer;

/*!
 @brief Setting last read date for peer
 @param peer peer
 @param date date
 */
- (void)setLastReadDateWithACPeer:(ACPeer *)peer
                         withLong:(jlong)date;

@end

J2OBJC_FIELD_SETTER(ACNotificationsActor, storage_, ARSyncKeyValue *)
J2OBJC_FIELD_SETTER(ACNotificationsActor, pendingStorage_, ACPendingStorage *)
J2OBJC_FIELD_SETTER(ACNotificationsActor, readStates_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ACNotificationsActor, visiblePeer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACNotificationsActor, notificationsDuringPause_, JavaUtilHashMap *)

J2OBJC_STATIC_FIELD_GETTER(ACNotificationsActor, MAX_NOTIFICATION_COUNT, jint)

static NSString *ACNotificationsActor_STORAGE_NOTIFICATIONS_ = @"notifications";
J2OBJC_STATIC_FIELD_GETTER(ACNotificationsActor, STORAGE_NOTIFICATIONS_, NSString *)

__attribute__((unused)) static void ACNotificationsActor_playEffectIfEnabled(ACNotificationsActor *self);

__attribute__((unused)) static void ACNotificationsActor_updateNotification(ACNotificationsActor *self);

__attribute__((unused)) static void ACNotificationsActor_showNotification(ACNotificationsActor *self);

__attribute__((unused)) static void ACNotificationsActor_hideNotification(ACNotificationsActor *self);

__attribute__((unused)) static void ACNotificationsActor_performNotificationImpWithBoolean_(ACNotificationsActor *self, jboolean performUpdate);

__attribute__((unused)) static jboolean ACNotificationsActor_isEffectsEnabled(ACNotificationsActor *self);

__attribute__((unused)) static jboolean ACNotificationsActor_isNotificationsEnabledWithACPeer_withBoolean_(ACNotificationsActor *self, ACPeer *peer, jboolean hasMention);

__attribute__((unused)) static id<JavaUtilList> ACNotificationsActor_getNotifications(ACNotificationsActor *self);

__attribute__((unused)) static void ACNotificationsActor_saveStorage(ACNotificationsActor *self);

__attribute__((unused)) static jlong ACNotificationsActor_getLastReadDateWithACPeer_(ACNotificationsActor *self, ACPeer *peer);

__attribute__((unused)) static void ACNotificationsActor_setLastReadDateWithACPeer_withLong_(ACNotificationsActor *self, ACPeer *peer, jlong date);

@interface ACNotificationsActor_NewMessage () {
 @public
  ACPeer *peer_;
  jint sender_;
  jlong sortDate_;
  ACContentDescription *contentDescription_;
  jboolean hasCurrentUserMention_;
}

@end

J2OBJC_FIELD_SETTER(ACNotificationsActor_NewMessage, peer_, ACPeer *)
J2OBJC_FIELD_SETTER(ACNotificationsActor_NewMessage, contentDescription_, ACContentDescription *)

@interface ACNotificationsActor_MessagesRead () {
 @public
  ACPeer *peer_;
  jlong fromDate_;
}

@end

J2OBJC_FIELD_SETTER(ACNotificationsActor_MessagesRead, peer_, ACPeer *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java"


#line 38
@implementation ACNotificationsActor


#line 95
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACNotificationsActor_initWithACModuleContext_(self, context);
  return self;
}

- (void)preStart {
  
#line 102
  isMobilePlatform_ = ([((ACConfiguration *) nil_chk([self config])) getPlatformType] == JreLoadStatic(ACPlatformTypeEnum, ANDROID) ||
#line 103
  [((ACConfiguration *) nil_chk([self config])) getPlatformType] == JreLoadStatic(ACPlatformTypeEnum, IOS));
  
#line 106
  storage_ = new_ARSyncKeyValue_initWithARKeyValueStorage_(ARStorage_createKeyValueWithNSString_(ACNotificationsActor_STORAGE_NOTIFICATIONS_));
  
#line 109
  pendingStorage_ = new_ACPendingStorage_init();
  IOSByteArray *storage = [self->storage_ getWithLong:0];
  if (storage != nil) {
    @try {
      pendingStorage_ = ACPendingStorage_fromBytesWithByteArray_(storage);
    }
    @catch (
#line 114
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  
#line 119
  [self subscribeWithNSString:ImActorCoreModulesEventsAppVisibleChanged_EVENT_];
  [self subscribeWithNSString:ImActorCoreModulesEventsPeerChatOpened_EVENT_];
  [self subscribeWithNSString:ImActorCoreModulesEventsPeerChatClosed_EVENT_];
}


#line 133
- (void)onNewMessageWithACPeer:(ACPeer *)peer
                       withInt:(jint)sender
                      withLong:(jlong)date
      withACContentDescription:(ACContentDescription *)description_
                   withBoolean:(jboolean)hasCurrentUserMention {
  
#line 138
  if (date <= ACNotificationsActor_getLastReadDateWithACPeer_(self, peer)) {
    return;
  }
  
#line 143
  jboolean isEnabled = ACNotificationsActor_isNotificationsEnabledWithACPeer_withBoolean_(self, peer, hasCurrentUserMention);
  
#line 146
  if (isEnabled) {
    id<JavaUtilList> allPending = ACNotificationsActor_getNotifications(self);
    [((id<JavaUtilList>) nil_chk(allPending)) addWithId:new_ACPendingNotification_initWithACPeer_withInt_withLong_withACContentDescription_(peer, sender, date, description_)];
    ACNotificationsActor_saveStorage(self);
  }
  
#line 154
  if (isNotificationsPaused_) {
    if (![((JavaUtilHashMap *) nil_chk(notificationsDuringPause_)) containsKeyWithId:peer]) {
      (void) [notificationsDuringPause_ putWithId:peer withId:JavaLangBoolean_valueOfWithBoolean_(hasCurrentUserMention)];
    }
    else {
      
#line 158
      if (hasCurrentUserMention && ![((JavaLangBoolean *) nil_chk([notificationsDuringPause_ getWithId:peer])) booleanValue]) {
        (void) [notificationsDuringPause_ putWithId:peer withId:JavaLangBoolean_valueOfWithBoolean_(true)];
      }
    }
    
#line 163
    return;
  }
  
#line 180
  if (isAppVisible_) {
    
#line 185
    if (visiblePeer_ != nil && [visiblePeer_ isEqual:peer]) {
      
#line 188
      if (isMobilePlatform_) {
        
#line 191
        ACNotificationsActor_playEffectIfEnabled(self);
      }
      else {
      }
    }
    else {
      
#line 201
      if (isMobilePlatform_) {
      }
      else {
        
#line 209
        if (isEnabled) {
          ACNotificationsActor_playEffectIfEnabled(self);
        }
      }
    }
  }
  else {
    
#line 218
    if (isEnabled) {
      ACNotificationsActor_showNotification(self);
    }
  }
}


#line 230
- (void)onMessagesReadWithACPeer:(ACPeer *)peer
                        withLong:(jlong)fromDate {
  
#line 233
  if (fromDate < ACNotificationsActor_getLastReadDateWithACPeer_(self, peer)) {
    return;
  }
  
#line 238
  jboolean isChanged = false;
  id<JavaUtilList> notifications = [((ACPendingStorage *) nil_chk(pendingStorage_)) getNotifications];
  {
    IOSObjectArray *a__ =
#line 240
    [notifications toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(notifications)) size] type:ACPendingNotification_class_()]];
    ACPendingNotification * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ACPendingNotification * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ACPendingNotification *p = *b__++;
      
#line 241
      if ([((ACPeer *) nil_chk([((ACPendingNotification *) nil_chk(p)) getPeer])) isEqual:peer] && [p getDate] <= fromDate) {
        [((id<JavaUtilList>) nil_chk([pendingStorage_ getNotifications])) removeWithId:p];
        isChanged = true;
      }
    }
  }
  
#line 249
  if (isChanged) {
    ACNotificationsActor_saveStorage(self);
    ACNotificationsActor_updateNotification(self);
  }
  
#line 255
  ACNotificationsActor_setLastReadDateWithACPeer_withLong_(self, peer, fromDate);
}


#line 261
- (void)onNotificationsPaused {
  isNotificationsPaused_ = true;
}


#line 270
- (void)onNotificationsResumed {
  isNotificationsPaused_ = false;
  
#line 274
  if ([((JavaUtilHashMap *) nil_chk(notificationsDuringPause_)) size] > 0) {
    
#line 276
    if (isAppVisible_) {
      if (visiblePeer_ != nil && [notificationsDuringPause_ containsKeyWithId:visiblePeer_]) {
        
#line 280
        if (isMobilePlatform_) {
          
#line 283
          ACNotificationsActor_playEffectIfEnabled(self);
        }
        else {
        }
      }
      else {
        
#line 291
        if (isMobilePlatform_) {
        }
        else {
          
#line 297
          for (ACPeer * __strong p in nil_chk([notificationsDuringPause_ keySet])) {
            
#line 299
            if (ACNotificationsActor_isNotificationsEnabledWithACPeer_withBoolean_(self, p, [((JavaLangBoolean *) nil_chk([notificationsDuringPause_ getWithId:p])) booleanValue])) {
              ACNotificationsActor_playEffectIfEnabled(self);
              break;
            }
          }
        }
      }
    }
    else {
      
#line 309
      ACNotificationsActor_showNotification(self);
    }
    
#line 313
    [notificationsDuringPause_ clear];
  }
}


#line 322
- (void)onConversationVisibleWithACPeer:(ACPeer *)peer {
  self->visiblePeer_ = peer;
}


#line 331
- (void)onConversationHiddenWithACPeer:(ACPeer *)peer {
  if (visiblePeer_ != nil && [visiblePeer_ isEqual:peer]) {
    self->visiblePeer_ = nil;
  }
}


#line 340
- (void)onAppVisible {
  isAppVisible_ = true;
  
#line 344
  ACNotificationsActor_hideNotification(self);
}


#line 350
- (void)onAppHidden {
  isAppVisible_ = false;
}


#line 361
- (void)playEffectIfEnabled {
  ACNotificationsActor_playEffectIfEnabled(self);
}


#line 370
- (void)updateNotification {
  ACNotificationsActor_updateNotification(self);
}


#line 377
- (void)showNotification {
  ACNotificationsActor_showNotification(self);
}


#line 384
- (void)hideNotification {
  ACNotificationsActor_hideNotification(self);
}


#line 393
- (void)performNotificationImpWithBoolean:(jboolean)performUpdate {
  ACNotificationsActor_performNotificationImpWithBoolean_(self, performUpdate);
}


#line 437
- (jboolean)isEffectsEnabled {
  return ACNotificationsActor_isEffectsEnabled(self);
}


#line 448
- (jboolean)isNotificationsEnabledWithACPeer:(ACPeer *)peer
                                 withBoolean:(jboolean)hasMention {
  return ACNotificationsActor_isNotificationsEnabledWithACPeer_withBoolean_(self, peer, hasMention);
}


#line 504
- (id<JavaUtilList>)getNotifications {
  return ACNotificationsActor_getNotifications(self);
}


#line 511
- (void)saveStorage {
  ACNotificationsActor_saveStorage(self);
}


#line 521
- (jlong)getLastReadDateWithACPeer:(ACPeer *)peer {
  return ACNotificationsActor_getLastReadDateWithACPeer_(self, peer);
}


#line 543
- (void)setLastReadDateWithACPeer:(ACPeer *)peer
                         withLong:(jlong)date {
  ACNotificationsActor_setLastReadDateWithACPeer_withLong_(self, peer, date);
}


#line 558
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACNotificationsActor_NewMessage class]]) {
    ACNotificationsActor_NewMessage *newMessage = (ACNotificationsActor_NewMessage *) check_class_cast(message, [ACNotificationsActor_NewMessage class]);
    [self onNewMessageWithACPeer:[((ACNotificationsActor_NewMessage *) nil_chk(newMessage)) getPeer] withInt:[newMessage getSender] withLong:[newMessage getSortDate] withACContentDescription:
#line 562
    [newMessage getContentDescription] withBoolean:[newMessage getHasCurrentUserMention]];
  }
  else
#line 563
  if ([message isKindOfClass:[ACNotificationsActor_MessagesRead class]]) {
    ACNotificationsActor_MessagesRead *read = (ACNotificationsActor_MessagesRead *) check_class_cast(message, [ACNotificationsActor_MessagesRead class]);
    [self onMessagesReadWithACPeer:[((ACNotificationsActor_MessagesRead *) nil_chk(read)) getPeer] withLong:[read getFromDate]];
  }
  else
#line 566
  if ([message isKindOfClass:[ACNotificationsActor_PauseNotifications class]]) {
    [self onNotificationsPaused];
  }
  else
#line 568
  if ([message isKindOfClass:[ACNotificationsActor_ResumeNotifications class]]) {
    [self onNotificationsResumed];
  }
  else {
    
#line 571
    [self dropWithId:message];
  }
}


#line 581
- (void)onBusEventWithImActorRuntimeEventbusEvent:(ImActorRuntimeEventbusEvent *)event {
  if ([event isKindOfClass:[ImActorCoreModulesEventsAppVisibleChanged class]]) {
    ImActorCoreModulesEventsAppVisibleChanged *visibleChanged = (ImActorCoreModulesEventsAppVisibleChanged *) check_class_cast(event, [ImActorCoreModulesEventsAppVisibleChanged class]);
    if ([((ImActorCoreModulesEventsAppVisibleChanged *) nil_chk(visibleChanged)) isVisible]) {
      [self onAppVisible];
    }
    else {
      
#line 587
      [self onAppHidden];
    }
  }
  else
#line 589
  if ([event isKindOfClass:[ImActorCoreModulesEventsPeerChatOpened class]]) {
    [self onConversationVisibleWithACPeer:[((ImActorCoreModulesEventsPeerChatOpened *) nil_chk(((ImActorCoreModulesEventsPeerChatOpened *) check_class_cast(event, [ImActorCoreModulesEventsPeerChatOpened class])))) getPeer]];
  }
  else
#line 591
  if ([event isKindOfClass:[ImActorCoreModulesEventsPeerChatClosed class]]) {
    [self onConversationHiddenWithACPeer:[((ImActorCoreModulesEventsPeerChatClosed *) nil_chk(((ImActorCoreModulesEventsPeerChatClosed *) check_class_cast(event, [ImActorCoreModulesEventsPeerChatClosed class])))) getPeer]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "NotificationsActor", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "onNewMessageWithACPeer:withInt:withLong:withACContentDescription:withBoolean:", "onNewMessage", "V", 0x1, NULL, NULL },
    { "onMessagesReadWithACPeer:withLong:", "onMessagesRead", "V", 0x1, NULL, NULL },
    { "onNotificationsPaused", NULL, "V", 0x1, NULL, NULL },
    { "onNotificationsResumed", NULL, "V", 0x1, NULL, NULL },
    { "onConversationVisibleWithACPeer:", "onConversationVisible", "V", 0x1, NULL, NULL },
    { "onConversationHiddenWithACPeer:", "onConversationHidden", "V", 0x1, NULL, NULL },
    { "onAppVisible", NULL, "V", 0x1, NULL, NULL },
    { "onAppHidden", NULL, "V", 0x1, NULL, NULL },
    { "playEffectIfEnabled", NULL, "V", 0x2, NULL, NULL },
    { "updateNotification", NULL, "V", 0x2, NULL, NULL },
    { "showNotification", NULL, "V", 0x2, NULL, NULL },
    { "hideNotification", NULL, "V", 0x2, NULL, NULL },
    { "performNotificationImpWithBoolean:", "performNotificationImp", "V", 0x2, NULL, NULL },
    { "isEffectsEnabled", NULL, "Z", 0x2, NULL, NULL },
    { "isNotificationsEnabledWithACPeer:withBoolean:", "isNotificationsEnabled", "Z", 0x2, NULL, NULL },
    { "getNotifications", NULL, "Ljava.util.List;", 0x2, NULL, NULL },
    { "saveStorage", NULL, "V", 0x2, NULL, NULL },
    { "getLastReadDateWithACPeer:", "getLastReadDate", "J", 0x2, NULL, NULL },
    { "setLastReadDateWithACPeer:withLong:", "setLastReadDate", "V", 0x2, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
    { "onBusEventWithImActorRuntimeEventbusEvent:", "onBusEvent", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_NOTIFICATION_COUNT", "MAX_NOTIFICATION_COUNT", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACNotificationsActor_MAX_NOTIFICATION_COUNT },
    { "STORAGE_NOTIFICATIONS_", NULL, 0x1a, "Ljava.lang.String;", &ACNotificationsActor_STORAGE_NOTIFICATIONS_, NULL, .constantValue.asLong = 0 },
    { "storage_", NULL, 0x2, "Lim.actor.runtime.storage.SyncKeyValue;", NULL, NULL, .constantValue.asLong = 0 },
    { "pendingStorage_", NULL, 0x2, "Lim.actor.core.modules.internal.notifications.entity.PendingStorage;", NULL, NULL, .constantValue.asLong = 0 },
    { "readStates_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lim/actor/core/entity/Peer;Ljava/lang/Long;>;", .constantValue.asLong = 0 },
    { "visiblePeer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "isAppVisible_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isNotificationsPaused_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "notificationsDuringPause_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lim/actor/core/entity/Peer;Ljava/lang/Boolean;>;", .constantValue.asLong = 0 },
    { "isMobilePlatform_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.modules.internal.notifications.NotificationsActor$NewMessage;", "Lim.actor.core.modules.internal.notifications.NotificationsActor$MessagesRead;", "Lim.actor.core.modules.internal.notifications.NotificationsActor$PauseNotifications;", "Lim.actor.core.modules.internal.notifications.NotificationsActor$ResumeNotifications;"};
  static const J2ObjcClassInfo _ACNotificationsActor = { 2, "NotificationsActor", "im.actor.core.modules.internal.notifications", NULL, 0x1, 23, methods, 10, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_ACNotificationsActor;
}

@end


#line 95
void ACNotificationsActor_initWithACModuleContext_(ACNotificationsActor *self, id<ACModuleContext> context) {
  (void) ACModuleActor_initWithACModuleContext_(self, context);
  self->readStates_ = new_JavaUtilHashMap_init();
  self->isAppVisible_ =
#line 72
  false;
  self->isNotificationsPaused_ =
#line 78
  false;
  self->notificationsDuringPause_ = new_JavaUtilHashMap_init();
  self->isMobilePlatform_ =
#line 88
  false;
}


#line 95
ACNotificationsActor *new_ACNotificationsActor_initWithACModuleContext_(id<ACModuleContext> context) {
  ACNotificationsActor *self = [ACNotificationsActor alloc];
  ACNotificationsActor_initWithACModuleContext_(self, context);
  return self;
}


#line 361
void ACNotificationsActor_playEffectIfEnabled(ACNotificationsActor *self) {
  if (ACNotificationsActor_isEffectsEnabled(self)) {
    [((id<ACNotificationProvider>) nil_chk([((ACConfiguration *) nil_chk([self config])) getNotificationProvider])) onMessageArriveInAppWithMessenger:[((id<ACModuleContext>) nil_chk([self context])) getMessenger]];
  }
}


#line 370
void ACNotificationsActor_updateNotification(ACNotificationsActor *self) {
  ACNotificationsActor_performNotificationImpWithBoolean_(self, true);
}


#line 377
void ACNotificationsActor_showNotification(ACNotificationsActor *self) {
  ACNotificationsActor_performNotificationImpWithBoolean_(self, false);
}


#line 384
void ACNotificationsActor_hideNotification(ACNotificationsActor *self) {
  [((id<ACNotificationProvider>) nil_chk([((ACConfiguration *) nil_chk([self config])) getNotificationProvider])) hideAllNotifications];
}


#line 393
void ACNotificationsActor_performNotificationImpWithBoolean_(ACNotificationsActor *self, jboolean performUpdate) {
  
#line 395
  id<JavaUtilList> allPending = ACNotificationsActor_getNotifications(self);
  jint messagesCount = [((id<JavaUtilList>) nil_chk(allPending)) size];
  if (messagesCount == 0) {
    ACNotificationsActor_hideNotification(self);
    return;
  }
  
#line 403
  id<JavaUtilList> destNotifications = ACJavaUtil_lastWithJavaUtilList_withInt_(allPending, ACNotificationsActor_MAX_NOTIFICATION_COUNT);
  
#line 406
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  for (ACPendingNotification * __strong p in nil_chk(destNotifications)) {
    [res addWithId:new_ACNotification_initWithACPeer_withInt_withACContentDescription_([((ACPendingNotification *) nil_chk(p)) getPeer], [p getSender], [p getContent])];
  }
  
#line 412
  JavaUtilHashSet *peers = new_JavaUtilHashSet_init();
  for (ACPendingNotification * __strong p in allPending) {
    [peers addWithId:[((ACPendingNotification *) nil_chk(p)) getPeer]];
  }
  jint chatsCount = [peers size];
  
#line 419
  if (performUpdate) {
    [((id<ACNotificationProvider>) nil_chk([((ACConfiguration *) nil_chk([self config])) getNotificationProvider])) onUpdateNotificationWithMessenger:[((id<ACModuleContext>) nil_chk([self context])) getMessenger] withTopNotifications:res withMessagesCount:
#line 421
    messagesCount withConversationsCount:chatsCount];
  }
  else {
    
#line 423
    [((id<ACNotificationProvider>) nil_chk([((ACConfiguration *) nil_chk([self config])) getNotificationProvider])) onNotificationWithMessenger:[((id<ACModuleContext>) nil_chk([self context])) getMessenger] withTopNotifications:res withMessagesCount:
#line 424
    messagesCount withConversationsCount:chatsCount];
  }
}


#line 437
jboolean ACNotificationsActor_isEffectsEnabled(ACNotificationsActor *self) {
  return [((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isConversationTonesEnabled];
}


#line 448
jboolean ACNotificationsActor_isNotificationsEnabledWithACPeer_withBoolean_(ACNotificationsActor *self, ACPeer *peer, jboolean hasMention) {
  
#line 451
  if (![((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isNotificationsEnabled]) {
    return false;
  }
  
#line 456
  if ([((ACPeer *) nil_chk(peer)) getPeerType] == JreLoadStatic(ACPeerTypeEnum, GROUP)) {
    
#line 459
    if ([((ACGroup *) nil_chk([self getGroupWithInt:[peer getPeerId]])) isHidden]) {
      return false;
    }
    
#line 463
    if ([((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isGroupNotificationsEnabled]) {
      
#line 466
      if (hasMention) {
        return true;
      }
      
#line 470
      if ([((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isNotificationsEnabledWithACPeer:peer]) {
        
#line 473
        if ([((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isGroupNotificationsOnlyMentionsEnabled]) {
          return false;
        }
        else {
          
#line 476
          return true;
        }
      }
      else {
        
#line 481
        return false;
      }
    }
    else {
      
#line 486
      return false;
    }
  }
  else
#line 488
  if ([peer getPeerType] == JreLoadStatic(ACPeerTypeEnum, PRIVATE)) {
    
#line 491
    return [((ACSettingsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getSettingsModule])) isNotificationsEnabledWithACPeer:peer];
  }
  else {
    
#line 495
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unknown peer type");
  }
}


#line 504
id<JavaUtilList> ACNotificationsActor_getNotifications(ACNotificationsActor *self) {
  return [((ACPendingStorage *) nil_chk(self->pendingStorage_)) getNotifications];
}


#line 511
void ACNotificationsActor_saveStorage(ACNotificationsActor *self) {
  [((ARSyncKeyValue *) nil_chk(self->storage_)) putWithLong:0 withByteArray:[((ACPendingStorage *) nil_chk(self->pendingStorage_)) toByteArray]];
}


#line 521
jlong ACNotificationsActor_getLastReadDateWithACPeer_(ACNotificationsActor *self, ACPeer *peer) {
  if ([((JavaUtilHashMap *) nil_chk(self->readStates_)) containsKeyWithId:peer]) {
    return [((JavaLangLong *) nil_chk([self->readStates_ getWithId:peer])) longLongValue];
  }
  
#line 526
  IOSByteArray *data = [((ARSyncKeyValue *) nil_chk(self->storage_)) getWithLong:[((ACPeer *) nil_chk(peer)) getUnuqueId]];
  if (data != nil) {
    @try {
      return [((ACReadState *) nil_chk(ACReadState_fromBytesWithByteArray_(data))) getSortDate];
    }
    @catch (
#line 530
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  return 0;
}


#line 543
void ACNotificationsActor_setLastReadDateWithACPeer_withLong_(ACNotificationsActor *self, ACPeer *peer, jlong date) {
  [((ARSyncKeyValue *) nil_chk(self->storage_)) putWithLong:[((ACPeer *) nil_chk(peer)) getUnuqueId] withByteArray:[new_ACReadState_initWithLong_(date) toByteArray]];
  (void) [((JavaUtilHashMap *) nil_chk(self->readStates_)) putWithId:peer withId:JavaLangLong_valueOfWithLong_(date)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACNotificationsActor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java"


#line 596
@implementation ACNotificationsActor_NewMessage


#line 603
- (instancetype)initWithACPeer:(ACPeer *)peer
                       withInt:(jint)sender
                      withLong:(jlong)sortDate
      withACContentDescription:(ACContentDescription *)contentDescription
                   withBoolean:(jboolean)hasCurrentUserMention {
  ACNotificationsActor_NewMessage_initWithACPeer_withInt_withLong_withACContentDescription_withBoolean_(self, peer, sender, sortDate, contentDescription, hasCurrentUserMention);
  return self;
}

- (ACPeer *)getPeer {
  return peer_;
}

- (jint)getSender {
  return sender_;
}

- (jlong)getSortDate {
  return sortDate_;
}

- (ACContentDescription *)getContentDescription {
  return contentDescription_;
}

- (jboolean)getHasCurrentUserMention {
  return hasCurrentUserMention_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withInt:withLong:withACContentDescription:withBoolean:", "NewMessage", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getSender", NULL, "I", 0x1, NULL, NULL },
    { "getSortDate", NULL, "J", 0x1, NULL, NULL },
    { "getContentDescription", NULL, "Lim.actor.core.entity.ContentDescription;", 0x1, NULL, NULL },
    { "getHasCurrentUserMention", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "sender_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "sortDate_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "contentDescription_", NULL, 0x2, "Lim.actor.core.entity.ContentDescription;", NULL, NULL, .constantValue.asLong = 0 },
    { "hasCurrentUserMention_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACNotificationsActor_NewMessage = { 2, "NewMessage", "im.actor.core.modules.internal.notifications", "NotificationsActor", 0x9, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACNotificationsActor_NewMessage;
}

@end


#line 603
void ACNotificationsActor_NewMessage_initWithACPeer_withInt_withLong_withACContentDescription_withBoolean_(ACNotificationsActor_NewMessage *self, ACPeer *peer, jint sender, jlong sortDate, ACContentDescription *contentDescription, jboolean hasCurrentUserMention) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->sender_ = sender;
  self->sortDate_ = sortDate;
  self->contentDescription_ = contentDescription;
  self->hasCurrentUserMention_ = hasCurrentUserMention;
}


#line 603
ACNotificationsActor_NewMessage *new_ACNotificationsActor_NewMessage_initWithACPeer_withInt_withLong_withACContentDescription_withBoolean_(ACPeer *peer, jint sender, jlong sortDate, ACContentDescription *contentDescription, jboolean hasCurrentUserMention) {
  ACNotificationsActor_NewMessage *self = [ACNotificationsActor_NewMessage alloc];
  ACNotificationsActor_NewMessage_initWithACPeer_withInt_withLong_withACContentDescription_withBoolean_(self, peer, sender, sortDate, contentDescription, hasCurrentUserMention);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACNotificationsActor_NewMessage)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java"


#line 633
@implementation ACNotificationsActor_MessagesRead


#line 637
- (instancetype)initWithACPeer:(ACPeer *)peer
                      withLong:(jlong)fromDate {
  ACNotificationsActor_MessagesRead_initWithACPeer_withLong_(self, peer, fromDate);
  return self;
}


#line 642
- (ACPeer *)getPeer {
  return peer_;
}

- (jlong)getFromDate {
  return fromDate_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACPeer:withLong:", "MessagesRead", NULL, 0x1, NULL, NULL },
    { "getPeer", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "getFromDate", NULL, "J", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "peer_", NULL, 0x2, "Lim.actor.core.entity.Peer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fromDate_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACNotificationsActor_MessagesRead = { 2, "MessagesRead", "im.actor.core.modules.internal.notifications", "NotificationsActor", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACNotificationsActor_MessagesRead;
}

@end


#line 637
void ACNotificationsActor_MessagesRead_initWithACPeer_withLong_(ACNotificationsActor_MessagesRead *self, ACPeer *peer, jlong fromDate) {
  (void) NSObject_init(self);
  
#line 638
  self->peer_ = peer;
  self->fromDate_ = fromDate;
}


#line 637
ACNotificationsActor_MessagesRead *new_ACNotificationsActor_MessagesRead_initWithACPeer_withLong_(ACPeer *peer, jlong fromDate) {
  ACNotificationsActor_MessagesRead *self = [ACNotificationsActor_MessagesRead alloc];
  ACNotificationsActor_MessagesRead_initWithACPeer_withLong_(self, peer, fromDate);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACNotificationsActor_MessagesRead)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java"


#line 651
@implementation ACNotificationsActor_PauseNotifications

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACNotificationsActor_PauseNotifications_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACNotificationsActor_PauseNotifications = { 2, "PauseNotifications", "im.actor.core.modules.internal.notifications", "NotificationsActor", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACNotificationsActor_PauseNotifications;
}

@end

void ACNotificationsActor_PauseNotifications_init(ACNotificationsActor_PauseNotifications *self) {
  (void) NSObject_init(self);
}

ACNotificationsActor_PauseNotifications *new_ACNotificationsActor_PauseNotifications_init() {
  ACNotificationsActor_PauseNotifications *self = [ACNotificationsActor_PauseNotifications alloc];
  ACNotificationsActor_PauseNotifications_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACNotificationsActor_PauseNotifications)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/internal/notifications/NotificationsActor.java"


#line 655
@implementation ACNotificationsActor_ResumeNotifications

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACNotificationsActor_ResumeNotifications_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACNotificationsActor_ResumeNotifications = { 2, "ResumeNotifications", "im.actor.core.modules.internal.notifications", "NotificationsActor", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACNotificationsActor_ResumeNotifications;
}

@end

void ACNotificationsActor_ResumeNotifications_init(ACNotificationsActor_ResumeNotifications *self) {
  (void) NSObject_init(self);
}

ACNotificationsActor_ResumeNotifications *new_ACNotificationsActor_ResumeNotifications_init() {
  ACNotificationsActor_ResumeNotifications *self = [ACNotificationsActor_ResumeNotifications alloc];
  ACNotificationsActor_ResumeNotifications_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACNotificationsActor_ResumeNotifications)

#pragma clang diagnostic pop
