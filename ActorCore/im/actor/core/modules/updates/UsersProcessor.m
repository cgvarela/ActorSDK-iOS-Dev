//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UsersProcessor.java
//

#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiAvatar.h"
#include "im/actor/core/api/ApiUser.h"
#include "im/actor/core/api/updates/UpdateUserAboutChanged.h"
#include "im/actor/core/api/updates/UpdateUserAvatarChanged.h"
#include "im/actor/core/api/updates/UpdateUserLocalNameChanged.h"
#include "im/actor/core/api/updates/UpdateUserNameChanged.h"
#include "im/actor/core/api/updates/UpdateUserNickChanged.h"
#include "im/actor/core/entity/Avatar.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/User.h"
#include "im/actor/core/modules/AbsModule.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/ContactsModule.h"
#include "im/actor/core/modules/internal/MessagesModule.h"
#include "im/actor/core/modules/internal/contacts/ContactsSyncActor.h"
#include "im/actor/core/modules/internal/messages/DialogsActor.h"
#include "im/actor/core/modules/internal/messages/GroupedDialogsActor.h"
#include "im/actor/core/modules/updates/UsersProcessor.h"
#include "im/actor/core/util/JavaUtil.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/storage/KeyValueEngine.h"
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/util/ArrayList.h>
#include <j2objc/java/util/Collection.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUsersProcessor ()

- (void)onUserNameChangedWithInt:(jint)uid
                    withNSString:(NSString *)name;

- (void)onUserNickChangedWithInt:(jint)uid
                    withNSString:(NSString *)nick;

- (void)onUserAboutChangedWithInt:(jint)uid
                     withNSString:(NSString *)about;

- (void)onUserLocalNameChangedWithInt:(jint)uid
                         withNSString:(NSString *)name;

- (void)onUserAvatarChangedWithInt:(jint)uid
                   withARApiAvatar:(ARApiAvatar *)avatar;

- (void)onUserDescChangedWithACUser:(ACUser *)u;

@end

__attribute__((unused)) static void ACUsersProcessor_onUserNameChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *name);

__attribute__((unused)) static void ACUsersProcessor_onUserNickChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *nick);

__attribute__((unused)) static void ACUsersProcessor_onUserAboutChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *about);

__attribute__((unused)) static void ACUsersProcessor_onUserLocalNameChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *name);

__attribute__((unused)) static void ACUsersProcessor_onUserAvatarChangedWithInt_withARApiAvatar_(ACUsersProcessor *self, jint uid, ARApiAvatar *avatar);

__attribute__((unused)) static void ACUsersProcessor_onUserDescChangedWithACUser_(ACUsersProcessor *self, ACUser *u);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UsersProcessor.java"


#line 25
@implementation ACUsersProcessor

- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACUsersProcessor_initWithACModuleContext_(self, context);
  return self;
}

- (void)applyUsersWithJavaUtilCollection:(id<JavaUtilCollection>)updated
                             withBoolean:(jboolean)forced {
  JavaUtilArrayList *batch = new_JavaUtilArrayList_init();
  for (ARApiUser * __strong u in nil_chk(updated)) {
    
#line 36
    ACUser *saved = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:[((ARApiUser *) nil_chk(u)) getId]];
    if (saved == nil) {
      [batch addWithId:new_ACUser_initWithARApiUser_(u)];
    }
    else
#line 39
    if (forced) {
      ACUser *upd = new_ACUser_initWithARApiUser_(u);
      [batch addWithId:upd];
      
#line 44
      if (![((NSString *) nil_chk([upd getName])) isEqual:[saved getName]] ||
#line 45
      !ACJavaUtil_equalsEWithId_withId_([upd getAvatar], [saved getAvatar])) {
        ACUsersProcessor_onUserDescChangedWithACUser_(self, upd);
      }
    }
  }
  if ([batch size] > 0) {
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItems:batch];
  }
}


#line 57
- (jboolean)hasUsersWithJavaUtilCollection:(id<JavaUtilCollection>)uids {
  for (JavaLangInteger * __strong uid in nil_chk(uids)) {
    if ([((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:[((JavaLangInteger *) nil_chk(uid)) intValue]] == nil) {
      return false;
    }
  }
  return true;
}


#line 67
- (void)onUserNameChangedWithInt:(jint)uid
                    withNSString:(NSString *)name {
  ACUsersProcessor_onUserNameChangedWithInt_withNSString_(self, uid, name);
}


#line 90
- (void)onUserNickChangedWithInt:(jint)uid
                    withNSString:(NSString *)nick {
  ACUsersProcessor_onUserNickChangedWithInt_withNSString_(self, uid, nick);
}


#line 108
- (void)onUserAboutChangedWithInt:(jint)uid
                     withNSString:(NSString *)about {
  ACUsersProcessor_onUserAboutChangedWithInt_withNSString_(self, uid, about);
}


#line 126
- (void)onUserLocalNameChangedWithInt:(jint)uid
                         withNSString:(NSString *)name {
  ACUsersProcessor_onUserLocalNameChangedWithInt_withNSString_(self, uid, name);
}


#line 147
- (void)onUserAvatarChangedWithInt:(jint)uid
                   withARApiAvatar:(ARApiAvatar *)avatar {
  ACUsersProcessor_onUserAvatarChangedWithInt_withARApiAvatar_(self, uid, avatar);
}


#line 169
- (jboolean)processWithId:(id)update {
  if ([update isKindOfClass:[ARUpdateUserNameChanged class]]) {
    ARUpdateUserNameChanged *userNameChanged = (ARUpdateUserNameChanged *) check_class_cast(update, [ARUpdateUserNameChanged class]);
    ACUsersProcessor_onUserNameChangedWithInt_withNSString_(self, [((ARUpdateUserNameChanged *) nil_chk(userNameChanged)) getUid], [userNameChanged getName]);
    return true;
  }
  else
#line 174
  if ([update isKindOfClass:[ARUpdateUserLocalNameChanged class]]) {
    ARUpdateUserLocalNameChanged *localNameChanged = (ARUpdateUserLocalNameChanged *) check_class_cast(update, [ARUpdateUserLocalNameChanged class]);
    ACUsersProcessor_onUserLocalNameChangedWithInt_withNSString_(self, [((ARUpdateUserLocalNameChanged *) nil_chk(localNameChanged)) getUid], [localNameChanged getLocalName]);
    return true;
  }
  else
#line 178
  if ([update isKindOfClass:[ARUpdateUserNickChanged class]]) {
    ARUpdateUserNickChanged *nickChanged = (ARUpdateUserNickChanged *) check_class_cast(update, [ARUpdateUserNickChanged class]);
    ACUsersProcessor_onUserNickChangedWithInt_withNSString_(self, [((ARUpdateUserNickChanged *) nil_chk(nickChanged)) getUid], [nickChanged getNickname]);
    return true;
  }
  else
#line 182
  if ([update isKindOfClass:[ARUpdateUserAboutChanged class]]) {
    ARUpdateUserAboutChanged *userAboutChanged = (ARUpdateUserAboutChanged *) check_class_cast(update, [ARUpdateUserAboutChanged class]);
    ACUsersProcessor_onUserAboutChangedWithInt_withNSString_(self, [((ARUpdateUserAboutChanged *) nil_chk(userAboutChanged)) getUid], [userAboutChanged getAbout]);
    return true;
  }
  else
#line 186
  if ([update isKindOfClass:[ARUpdateUserAvatarChanged class]]) {
    ARUpdateUserAvatarChanged *avatarChanged = (ARUpdateUserAvatarChanged *) check_class_cast(update, [ARUpdateUserAvatarChanged class]);
    ACUsersProcessor_onUserAvatarChangedWithInt_withARApiAvatar_(self, [((ARUpdateUserAvatarChanged *) nil_chk(avatarChanged)) getUid], [avatarChanged getAvatar]);
    return true;
  }
  return false;
}


#line 195
- (void)onUserDescChangedWithACUser:(ACUser *)u {
  ACUsersProcessor_onUserDescChangedWithACUser_(self, u);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "UsersProcessor", NULL, 0x1, NULL, NULL },
    { "applyUsersWithJavaUtilCollection:withBoolean:", "applyUsers", "V", 0x1, NULL, NULL },
    { "hasUsersWithJavaUtilCollection:", "hasUsers", "Z", 0x1, NULL, NULL },
    { "onUserNameChangedWithInt:withNSString:", "onUserNameChanged", "V", 0x2, NULL, NULL },
    { "onUserNickChangedWithInt:withNSString:", "onUserNickChanged", "V", 0x2, NULL, NULL },
    { "onUserAboutChangedWithInt:withNSString:", "onUserAboutChanged", "V", 0x2, NULL, NULL },
    { "onUserLocalNameChangedWithInt:withNSString:", "onUserLocalNameChanged", "V", 0x2, NULL, NULL },
    { "onUserAvatarChangedWithInt:withARApiAvatar:", "onUserAvatarChanged", "V", 0x2, NULL, NULL },
    { "processWithId:", "process", "Z", 0x1, NULL, NULL },
    { "onUserDescChangedWithACUser:", "onUserDescChanged", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACUsersProcessor = { 2, "UsersProcessor", "im.actor.core.modules.updates", NULL, 0x1, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUsersProcessor;
}

@end


#line 27
void ACUsersProcessor_initWithACModuleContext_(ACUsersProcessor *self, id<ACModuleContext> context) {
  (void) ACAbsModule_initWithACModuleContext_(self, context);
}


#line 27
ACUsersProcessor *new_ACUsersProcessor_initWithACModuleContext_(id<ACModuleContext> context) {
  ACUsersProcessor *self = [ACUsersProcessor alloc];
  ACUsersProcessor_initWithACModuleContext_(self, context);
  return self;
}


#line 67
void ACUsersProcessor_onUserNameChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *name) {
  ACUser *u = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:uid];
  if (u != nil) {
    
#line 72
    if ([((NSString *) nil_chk([u getServerName])) isEqual:name]) {
      return;
    }
    
#line 77
    u = [u editNameWithNSString:name];
    
#line 80
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItem:u];
    
#line 83
    if ([((ACUser *) nil_chk(u)) getLocalName] == nil) {
      ACUsersProcessor_onUserDescChangedWithACUser_(self, u);
    }
  }
}


#line 90
void ACUsersProcessor_onUserNickChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *nick) {
  ACUser *u = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:uid];
  if (u != nil) {
    
#line 95
    if (ACJavaUtil_equalsEWithId_withId_([u getNick], nick)) {
      return;
    }
    
#line 100
    u = [u editNickWithNSString:nick];
    
#line 103
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItem:u];
  }
}


#line 108
void ACUsersProcessor_onUserAboutChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *about) {
  ACUser *u = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:uid];
  if (u != nil) {
    
#line 113
    if (ACJavaUtil_equalsEWithId_withId_([u getAbout], about)) {
      return;
    }
    
#line 118
    u = [u editAboutWithNSString:about];
    
#line 121
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItem:u];
  }
}


#line 126
void ACUsersProcessor_onUserLocalNameChangedWithInt_withNSString_(ACUsersProcessor *self, jint uid, NSString *name) {
  ACUser *u = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:uid];
  if (u != nil) {
    
#line 131
    if (ACJavaUtil_equalsEWithId_withId_([u getLocalName], name)) {
      return;
    }
    
#line 136
    u = [u editLocalNameWithNSString:name];
    
#line 139
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItem:u];
    
#line 142
    ACUsersProcessor_onUserDescChangedWithACUser_(self, u);
  }
}


#line 147
void ACUsersProcessor_onUserAvatarChangedWithInt_withARApiAvatar_(ACUsersProcessor *self, jint uid, ARApiAvatar *avatar) {
  ACUser *u = [((id<ARKeyValueEngine>) nil_chk([self users])) getValueWithKey:uid];
  if (u != nil) {
    
#line 158
    u = [u editAvatarWithARApiAvatar:avatar];
    
#line 161
    [((id<ARKeyValueEngine>) nil_chk([self users])) addOrUpdateItem:u];
    
#line 164
    ACUsersProcessor_onUserDescChangedWithACUser_(self, u);
  }
}


#line 195
void ACUsersProcessor_onUserDescChangedWithACUser_(ACUsersProcessor *self, ACUser *u) {
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getDialogsActor])) sendWithId:new_ACDialogsActor_UserChanged_initWithACUser_(
#line 197
  u)];
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getDialogsGroupedActor])) sendWithId:new_ACGroupedDialogsActor_PeerInformationChanged_initWithACPeer_(ACPeer_userWithInt_(
#line 199
  [((ACUser *) nil_chk(u)) getUid]))];
  [((ARActorRef *) nil_chk([((ACContactsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getContactsModule])) getContactSyncActor])) sendWithId:new_ACContactsSyncActor_UserChanged_initWithACUser_(
#line 201
  u)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUsersProcessor)

#pragma clang diagnostic pop
