//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UpdateProcessor.java
//

#include <j2objc/IOSObjectArray.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiAppCounters.h"
#include "im/actor/core/api/ApiAvatar.h"
#include "im/actor/core/api/ApiGroup.h"
#include "im/actor/core/api/ApiMessage.h"
#include "im/actor/core/api/ApiPeer.h"
#include "im/actor/core/api/ApiPeerType.h"
#include "im/actor/core/api/ApiTypingType.h"
#include "im/actor/core/api/ApiUser.h"
#include "im/actor/core/api/rpc/ResponseAuth.h"
#include "im/actor/core/api/rpc/ResponseGetContacts.h"
#include "im/actor/core/api/rpc/ResponseLoadDialogs.h"
#include "im/actor/core/api/rpc/ResponseLoadHistory.h"
#include "im/actor/core/api/updates/UpdateChatArchived.h"
#include "im/actor/core/api/updates/UpdateChatClear.h"
#include "im/actor/core/api/updates/UpdateChatDelete.h"
#include "im/actor/core/api/updates/UpdateChatGroupsChanged.h"
#include "im/actor/core/api/updates/UpdateChatRestored.h"
#include "im/actor/core/api/updates/UpdateContactRegistered.h"
#include "im/actor/core/api/updates/UpdateContactsAdded.h"
#include "im/actor/core/api/updates/UpdateContactsRemoved.h"
#include "im/actor/core/api/updates/UpdateCountersChanged.h"
#include "im/actor/core/api/updates/UpdateGroupAboutChanged.h"
#include "im/actor/core/api/updates/UpdateGroupAvatarChanged.h"
#include "im/actor/core/api/updates/UpdateGroupInvite.h"
#include "im/actor/core/api/updates/UpdateGroupMembersUpdate.h"
#include "im/actor/core/api/updates/UpdateGroupOnline.h"
#include "im/actor/core/api/updates/UpdateGroupTitleChanged.h"
#include "im/actor/core/api/updates/UpdateGroupTopicChanged.h"
#include "im/actor/core/api/updates/UpdateGroupUserInvited.h"
#include "im/actor/core/api/updates/UpdateGroupUserKick.h"
#include "im/actor/core/api/updates/UpdateGroupUserLeave.h"
#include "im/actor/core/api/updates/UpdateMessage.h"
#include "im/actor/core/api/updates/UpdateMessageContentChanged.h"
#include "im/actor/core/api/updates/UpdateMessageDelete.h"
#include "im/actor/core/api/updates/UpdateMessageRead.h"
#include "im/actor/core/api/updates/UpdateMessageReadByMe.h"
#include "im/actor/core/api/updates/UpdateMessageReceived.h"
#include "im/actor/core/api/updates/UpdateMessageSent.h"
#include "im/actor/core/api/updates/UpdateParameterChanged.h"
#include "im/actor/core/api/updates/UpdateTyping.h"
#include "im/actor/core/api/updates/UpdateUserLastSeen.h"
#include "im/actor/core/api/updates/UpdateUserLocalNameChanged.h"
#include "im/actor/core/api/updates/UpdateUserOffline.h"
#include "im/actor/core/api/updates/UpdateUserOnline.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/modules/AbsModule.h"
#include "im/actor/core/modules/ModuleContext.h"
#include "im/actor/core/modules/internal/ContactsModule.h"
#include "im/actor/core/modules/internal/MessagesModule.h"
#include "im/actor/core/modules/internal/UsersModule.h"
#include "im/actor/core/modules/internal/contacts/ContactsSyncActor.h"
#include "im/actor/core/modules/internal/messages/OwnReadActor.h"
#include "im/actor/core/modules/internal/messages/entity/EntityConverter.h"
#include "im/actor/core/modules/updates/ContactsProcessor.h"
#include "im/actor/core/modules/updates/GroupsProcessor.h"
#include "im/actor/core/modules/updates/MessagesProcessor.h"
#include "im/actor/core/modules/updates/PresenceProcessor.h"
#include "im/actor/core/modules/updates/SettingsProcessor.h"
#include "im/actor/core/modules/updates/TypingProcessor.h"
#include "im/actor/core/modules/updates/UpdateProcessor.h"
#include "im/actor/core/modules/updates/UsersProcessor.h"
#include "im/actor/core/modules/updates/internal/CombinedDifference.h"
#include "im/actor/core/modules/updates/internal/ContactsLoaded.h"
#include "im/actor/core/modules/updates/internal/DialogHistoryLoaded.h"
#include "im/actor/core/modules/updates/internal/GetDiffCombiner.h"
#include "im/actor/core/modules/updates/internal/GroupCreated.h"
#include "im/actor/core/modules/updates/internal/InternalUpdate.h"
#include "im/actor/core/modules/updates/internal/LoggedIn.h"
#include "im/actor/core/modules/updates/internal/MessagesHistoryLoaded.h"
#include "im/actor/core/modules/updates/internal/RelatedResponse.h"
#include "im/actor/core/modules/updates/internal/UsersFounded.h"
#include "im/actor/core/network/parser/Update.h"
#include "im/actor/core/viewmodel/CommandCallback.h"
#include "im/actor/core/viewmodel/UserVM.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/mvvm/MVVMCollection.h"
#include <j2objc/java/lang/Integer.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/lang/Runnable.h>
#include <j2objc/java/util/ArrayList.h>
#include <j2objc/java/util/HashMap.h>
#include <j2objc/java/util/HashSet.h>
#include <j2objc/java/util/List.h>
#include <j2objc/java/util/Set.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACUpdateProcessor () {
 @public
  ACSettingsProcessor *settingsProcessor_;
  ACUsersProcessor *usersProcessor_;
  ACMessagesProcessor *messagesProcessor_;
  ACGroupsProcessor *groupsProcessor_;
  ACPresenceProcessor *presenceProcessor_;
  ACTypingProcessor *typingProcessor_;
  ACContactsProcessor *contactsProcessor_;
}

@end

J2OBJC_FIELD_SETTER(ACUpdateProcessor, settingsProcessor_, ACSettingsProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, usersProcessor_, ACUsersProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, messagesProcessor_, ACMessagesProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, groupsProcessor_, ACGroupsProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, presenceProcessor_, ACPresenceProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, typingProcessor_, ACTypingProcessor *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor, contactsProcessor_, ACContactsProcessor *)

static NSString *ACUpdateProcessor_TAG_ = @"Updates";
J2OBJC_STATIC_FIELD_GETTER(ACUpdateProcessor, TAG_, NSString *)

@interface ACUpdateProcessor_$1 : NSObject < JavaLangRunnable > {
 @public
  ACUsersFounded *val$founded_;
  JavaUtilArrayList *val$users_;
}

- (void)run;

- (instancetype)initWithACUsersFounded:(ACUsersFounded *)capture$0
                 withJavaUtilArrayList:(JavaUtilArrayList *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUpdateProcessor_$1)

J2OBJC_FIELD_SETTER(ACUpdateProcessor_$1, val$founded_, ACUsersFounded *)
J2OBJC_FIELD_SETTER(ACUpdateProcessor_$1, val$users_, JavaUtilArrayList *)

__attribute__((unused)) static void ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(ACUpdateProcessor_$1 *self, ACUsersFounded *capture$0, JavaUtilArrayList *capture$1);

__attribute__((unused)) static ACUpdateProcessor_$1 *new_ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(ACUsersFounded *capture$0, JavaUtilArrayList *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUpdateProcessor_$1)

@interface ACUpdateProcessor_$2 : NSObject < JavaLangRunnable > {
 @public
  ACGroupCreated *val$created_;
}

- (void)run;

- (instancetype)initWithACGroupCreated:(ACGroupCreated *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACUpdateProcessor_$2)

J2OBJC_FIELD_SETTER(ACUpdateProcessor_$2, val$created_, ACGroupCreated *)

__attribute__((unused)) static void ACUpdateProcessor_$2_initWithACGroupCreated_(ACUpdateProcessor_$2 *self, ACGroupCreated *capture$0);

__attribute__((unused)) static ACUpdateProcessor_$2 *new_ACUpdateProcessor_$2_initWithACGroupCreated_(ACGroupCreated *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACUpdateProcessor_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UpdateProcessor.java"


#line 67
@implementation ACUpdateProcessor


#line 79
- (instancetype)initWithACModuleContext:(id<ACModuleContext>)context {
  ACUpdateProcessor_initWithACModuleContext_(self, context);
  return self;
}


#line 90
- (void)applyRelatedWithJavaUtilList:(id<JavaUtilList>)users
                    withJavaUtilList:(id<JavaUtilList>)groups
                         withBoolean:(jboolean)force {
  
#line 93
  [((ACUsersProcessor *) nil_chk(usersProcessor_)) applyUsersWithJavaUtilCollection:users withBoolean:force];
  [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) applyGroupsWithJavaUtilCollection:groups withBoolean:force];
}


#line 97
- (void)processInternalUpdateWithACInternalUpdate:(ACInternalUpdate *)update {
  if ([update isKindOfClass:[ACDialogHistoryLoaded class]]) {
    ARResponseLoadDialogs *dialogs = [((ACDialogHistoryLoaded *) nil_chk(((ACDialogHistoryLoaded *) check_class_cast(update, [ACDialogHistoryLoaded class])))) getDialogs];
    [self applyRelatedWithJavaUtilList:[((ARResponseLoadDialogs *) nil_chk(dialogs)) getUsers] withJavaUtilList:[dialogs getGroups] withBoolean:false];
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onDialogsLoadedWithARResponseLoadDialogs:dialogs];
  }
  else
#line 102
  if ([update isKindOfClass:[ACMessagesHistoryLoaded class]]) {
    ACMessagesHistoryLoaded *historyLoaded = (ACMessagesHistoryLoaded *) check_class_cast(update, [ACMessagesHistoryLoaded class]);
    [self applyRelatedWithJavaUtilList:[((ARResponseLoadHistory *) nil_chk([((ACMessagesHistoryLoaded *) nil_chk(historyLoaded)) getLoadHistory])) getUsers] withJavaUtilList:new_JavaUtilArrayList_init() withBoolean:false];
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessagesLoadedWithACPeer:[historyLoaded getPeer] withARResponseLoadHistory:[historyLoaded getLoadHistory]];
  }
  else
#line 106
  if ([update isKindOfClass:[ACLoggedIn class]]) {
    JavaUtilArrayList *users = new_JavaUtilArrayList_init();
    [users addWithId:[((ARResponseAuth *) nil_chk([((ACLoggedIn *) nil_chk(((ACLoggedIn *) check_class_cast(update, [ACLoggedIn class])))) getAuth])) getUser]];
    [self applyRelatedWithJavaUtilList:users withJavaUtilList:new_JavaUtilArrayList_init() withBoolean:true];
    [self runOnUiThreadWithJavaLangRunnable:[((ACLoggedIn *) nil_chk(((ACLoggedIn *) check_class_cast(update, [ACLoggedIn class])))) getRunnable]];
  }
  else
#line 111
  if ([update isKindOfClass:[ACContactsLoaded class]]) {
    ACContactsLoaded *contactsLoaded = (ACContactsLoaded *) check_class_cast(update, [ACContactsLoaded class]);
    [self applyRelatedWithJavaUtilList:[((ARResponseGetContacts *) nil_chk([((ACContactsLoaded *) nil_chk(contactsLoaded)) getContacts])) getUsers] withJavaUtilList:new_JavaUtilArrayList_init() withBoolean:false];
    [((ARActorRef *) nil_chk([((ACContactsModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getContactsModule])) getContactSyncActor])) sendWithId:new_ACContactsSyncActor_ContactsLoaded_initWithARResponseGetContacts_(
#line 115
    [contactsLoaded getContacts])];
  }
  else
#line 116
  if ([update isKindOfClass:[ACUsersFounded class]]) {
    ACUsersFounded *founded = (ACUsersFounded *) check_class_cast(update, [ACUsersFounded class]);
    [self applyRelatedWithJavaUtilList:[((ACUsersFounded *) nil_chk(((ACUsersFounded *) check_class_cast(update, [ACUsersFounded class])))) getUsers] withJavaUtilList:new_JavaUtilArrayList_init() withBoolean:false];
    JavaUtilArrayList *users = new_JavaUtilArrayList_init();
    for (ARApiUser * __strong u in nil_chk([((ACUsersFounded *) nil_chk(founded)) getUsers])) {
      [users addWithId:[((ARMVVMCollection *) nil_chk([((ACUsersModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getUsersModule])) getUsers])) getWithId:[((ARApiUser *) nil_chk(u)) getId]]];
    }
    [self runOnUiThreadWithJavaLangRunnable:new_ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(founded, users)];
  }
  else
#line 129
  if ([update isKindOfClass:[ACGroupCreated class]]) {
    ACGroupCreated *created = (ACGroupCreated *) check_class_cast(update, [ACGroupCreated class]);
    JavaUtilArrayList *groups = new_JavaUtilArrayList_init();
    [groups addWithId:[((ACGroupCreated *) nil_chk(created)) getGroup]];
    [self applyRelatedWithJavaUtilList:[created getUsers] withJavaUtilList:groups withBoolean:false];
    [self runOnUiThreadWithJavaLangRunnable:new_ACUpdateProcessor_$2_initWithACGroupCreated_(created)];
  }
  else
#line 140
  if ([update isKindOfClass:[ACRelatedResponse class]]) {
    ACRelatedResponse *relatedResponse = (ACRelatedResponse *) check_class_cast(update, [ACRelatedResponse class]);
    [self applyRelatedWithJavaUtilList:[((ACRelatedResponse *) nil_chk(relatedResponse)) getRelatedUsers] withJavaUtilList:[relatedResponse getRelatedGroups] withBoolean:false];
    [((id<JavaLangRunnable>) nil_chk([relatedResponse getAfterApply])) run];
  }
}


#line 147
- (void)applyDifferenceUpdateWithJavaUtilList:(id<JavaUtilList>)users
                             withJavaUtilList:(id<JavaUtilList>)groups
                             withJavaUtilList:(id<JavaUtilList>)updates {
  
#line 149
  [self applyRelatedWithJavaUtilList:users withJavaUtilList:groups withBoolean:false];
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getOwnReadActor])) sendWithId:new_ACOwnReadActor_StartGetDifference_init()];
  
#line 152
  ACCombinedDifference *combinedDifference = ACGetDiffCombiner_buildDiffWithJavaUtilList_(updates);
  
#line 154
  for (ACPeer * __strong peer in nil_chk([((JavaUtilHashMap *) nil_chk([((ACCombinedDifference *) nil_chk(combinedDifference)) getReceived])) keySet])) {
    jlong time = [((JavaLangLong *) nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getReceived])) getWithId:peer])) longLongValue];
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReceivedWithARApiPeer:[self buildApiPeerWithACPeer:peer] withLong:time];
  }
  
#line 159
  for (ACPeer * __strong peer in nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getRead])) keySet])) {
    jlong time = [((JavaLangLong *) nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getRead])) getWithId:peer])) longLongValue];
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReadWithARApiPeer:[self buildApiPeerWithACPeer:peer] withLong:time];
  }
  
#line 164
  for (ACPeer * __strong peer in nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getReadByMe])) keySet])) {
    jlong time = [((JavaLangLong *) nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getReadByMe])) getWithId:peer])) longLongValue];
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReadByMeWithARApiPeer:[self buildApiPeerWithACPeer:peer] withLong:time];
  }
  
#line 169
  for (ACPeer * __strong peer in nil_chk([((JavaUtilHashMap *) nil_chk([combinedDifference getMessages])) keySet])) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessagesWithARApiPeer:[self buildApiPeerWithACPeer:peer] withJavaUtilList:[((JavaUtilHashMap *) nil_chk([combinedDifference getMessages])) getWithId:peer]];
  }
  
#line 173
  for (ACUpdate * __strong u in nil_chk([combinedDifference getOtherUpdates])) {
    [self processUpdateWithACUpdate:u];
  }
  
#line 177
  if ([combinedDifference getCounters] != nil) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onCountersChangedWithARApiAppCounters:[combinedDifference getCounters]];
  }
  
#line 181
  [((ARActorRef *) nil_chk([((ACMessagesModule *) nil_chk([((id<ACModuleContext>) nil_chk([self context])) getMessagesModule])) getOwnReadActor])) sendWithId:new_ACOwnReadActor_StopGetDifference_init()];
  [self applyRelatedWithJavaUtilList:users withJavaUtilList:groups withBoolean:true];
}


#line 185
- (void)processWeakUpdateWithACUpdate:(ACUpdate *)update
                             withLong:(jlong)date {
  if ([update isKindOfClass:[ARUpdateUserOnline class]]) {
    ARUpdateUserOnline *userOnline = (ARUpdateUserOnline *) check_class_cast(update, [ARUpdateUserOnline class]);
    [((ACPresenceProcessor *) nil_chk(presenceProcessor_)) onUserOnlineWithInt:[((ARUpdateUserOnline *) nil_chk(userOnline)) getUid] withLong:date];
  }
  else
#line 189
  if ([update isKindOfClass:[ARUpdateUserOffline class]]) {
    ARUpdateUserOffline *offline = (ARUpdateUserOffline *) check_class_cast(update, [ARUpdateUserOffline class]);
    [((ACPresenceProcessor *) nil_chk(presenceProcessor_)) onUserOfflineWithInt:[((ARUpdateUserOffline *) nil_chk(offline)) getUid] withLong:date];
  }
  else
#line 192
  if ([update isKindOfClass:[ARUpdateUserLastSeen class]]) {
    ARUpdateUserLastSeen *lastSeen = (ARUpdateUserLastSeen *) check_class_cast(update, [ARUpdateUserLastSeen class]);
    [((ACPresenceProcessor *) nil_chk(presenceProcessor_)) onUserLastSeenWithInt:[((ARUpdateUserLastSeen *) nil_chk(lastSeen)) getUid] withInt:(jint) [lastSeen getDate] withLong:date];
  }
  else
#line 195
  if ([update isKindOfClass:[ARUpdateGroupOnline class]]) {
    ARUpdateGroupOnline *groupOnline = (ARUpdateGroupOnline *) check_class_cast(update, [ARUpdateGroupOnline class]);
    [((ACPresenceProcessor *) nil_chk(presenceProcessor_)) onGroupOnlineWithInt:[((ARUpdateGroupOnline *) nil_chk(groupOnline)) getGroupId] withInt:[groupOnline getCount] withLong:date];
  }
  else
#line 198
  if ([update isKindOfClass:[ARUpdateTyping class]]) {
    ARUpdateTyping *typing = (ARUpdateTyping *) check_class_cast(update, [ARUpdateTyping class]);
    [((ACTypingProcessor *) nil_chk(typingProcessor_)) onTypingWithARApiPeer:[((ARUpdateTyping *) nil_chk(typing)) getPeer] withInt:[typing getUid] withARApiTypingTypeEnum:[typing getTypingType]];
  }
}


#line 204
- (void)processUpdateWithACUpdate:(ACUpdate *)update {
  
#line 206
  if ([((ACUsersProcessor *) nil_chk(usersProcessor_)) processWithId:update]) {
    return;
  }
  if ([update isKindOfClass:[ARUpdateMessage class]]) {
    ARUpdateMessage *message = (ARUpdateMessage *) check_class_cast(update, [ARUpdateMessage class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageWithARApiPeer:[((ARUpdateMessage *) nil_chk(message)) getPeer] withInt:[message getSenderUid] withLong:[message getDate] withLong:[message getRid] withARApiMessage:
#line 212
    [message getMessage]];
    [((ACTypingProcessor *) nil_chk(typingProcessor_)) onMessageWithARApiPeer:[message getPeer] withInt:[message getSenderUid]];
  }
  else
#line 214
  if ([update isKindOfClass:[ARUpdateMessageRead class]]) {
    ARUpdateMessageRead *messageRead = (ARUpdateMessageRead *) check_class_cast(update, [ARUpdateMessageRead class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReadWithARApiPeer:[((ARUpdateMessageRead *) nil_chk(messageRead)) getPeer] withLong:[messageRead getStartDate]];
  }
  else
#line 217
  if ([update isKindOfClass:[ARUpdateMessageReadByMe class]]) {
    ARUpdateMessageReadByMe *messageReadByMe = (ARUpdateMessageReadByMe *) check_class_cast(update, [ARUpdateMessageReadByMe class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReadByMeWithARApiPeer:[((ARUpdateMessageReadByMe *) nil_chk(messageReadByMe)) getPeer] withLong:[messageReadByMe getStartDate]];
  }
  else
#line 220
  if ([update isKindOfClass:[ARUpdateMessageReceived class]]) {
    ARUpdateMessageReceived *received = (ARUpdateMessageReceived *) check_class_cast(update, [ARUpdateMessageReceived class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageReceivedWithARApiPeer:[((ARUpdateMessageReceived *) nil_chk(received)) getPeer] withLong:[received getStartDate]];
  }
  else
#line 223
  if ([update isKindOfClass:[ARUpdateMessageDelete class]]) {
    ARUpdateMessageDelete *messageDelete = (ARUpdateMessageDelete *) check_class_cast(update, [ARUpdateMessageDelete class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageDeleteWithARApiPeer:[((ARUpdateMessageDelete *) nil_chk(messageDelete)) getPeer] withJavaUtilList:[messageDelete getRids]];
  }
  else
#line 226
  if ([update isKindOfClass:[ARUpdateMessageSent class]]) {
    ARUpdateMessageSent *messageSent = (ARUpdateMessageSent *) check_class_cast(update, [ARUpdateMessageSent class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageSentWithARApiPeer:[((ARUpdateMessageSent *) nil_chk(messageSent)) getPeer] withLong:[messageSent getRid] withLong:[messageSent getDate]];
  }
  else
#line 229
  if ([update isKindOfClass:[ARUpdateMessageContentChanged class]]) {
    ARUpdateMessageContentChanged *contentChanged = (ARUpdateMessageContentChanged *) check_class_cast(update, [ARUpdateMessageContentChanged class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onMessageContentChangedWithARApiPeer:[((ARUpdateMessageContentChanged *) nil_chk(contentChanged)) getPeer] withLong:
#line 232
    [contentChanged getRid] withARApiMessage:[contentChanged getMessage]];
  }
  else
#line 233
  if ([update isKindOfClass:[ARUpdateChatClear class]]) {
    ARUpdateChatClear *chatClear = (ARUpdateChatClear *) check_class_cast(update, [ARUpdateChatClear class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onChatClearWithARApiPeer:[((ARUpdateChatClear *) nil_chk(chatClear)) getPeer]];
  }
  else
#line 236
  if ([update isKindOfClass:[ARUpdateChatDelete class]]) {
    ARUpdateChatDelete *chatDelete = (ARUpdateChatDelete *) check_class_cast(update, [ARUpdateChatDelete class]);
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onChatDeleteWithARApiPeer:[((ARUpdateChatDelete *) nil_chk(chatDelete)) getPeer]];
  }
  else
#line 239
  if ([update isKindOfClass:[ARUpdateContactRegistered class]]) {
    ARUpdateContactRegistered *registered = (ARUpdateContactRegistered *) check_class_cast(update, [ARUpdateContactRegistered class]);
    if (![((ARUpdateContactRegistered *) nil_chk(registered)) isSilent]) {
      [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onUserRegisteredWithLong:[registered getRid] withInt:[registered getUid] withLong:[registered getDate]];
    }
  }
  else
#line 244
  if ([update isKindOfClass:[ARUpdateGroupTitleChanged class]]) {
    ARUpdateGroupTitleChanged *titleChanged = (ARUpdateGroupTitleChanged *) check_class_cast(update, [ARUpdateGroupTitleChanged class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onTitleChangedWithInt:[((ARUpdateGroupTitleChanged *) nil_chk(titleChanged)) getGroupId] withLong:[titleChanged getRid] withInt:
#line 247
    [titleChanged getUid] withNSString:[titleChanged getTitle] withLong:[titleChanged getDate] withBoolean:
#line 248
    false];
  }
  else
#line 249
  if ([update isKindOfClass:[ARUpdateGroupTopicChanged class]]) {
    ARUpdateGroupTopicChanged *topicChanged = (ARUpdateGroupTopicChanged *) check_class_cast(update, [ARUpdateGroupTopicChanged class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onTopicChangedWithInt:[((ARUpdateGroupTopicChanged *) nil_chk(topicChanged)) getGroupId] withNSString:[topicChanged getTopic]];
  }
  else
#line 252
  if ([update isKindOfClass:[ARUpdateGroupAboutChanged class]]) {
    ARUpdateGroupAboutChanged *aboutChanged = (ARUpdateGroupAboutChanged *) check_class_cast(update, [ARUpdateGroupAboutChanged class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onAboutChangedWithInt:[((ARUpdateGroupAboutChanged *) nil_chk(aboutChanged)) getGroupId] withNSString:[aboutChanged getAbout]];
  }
  else
#line 255
  if ([update isKindOfClass:[ARUpdateGroupAvatarChanged class]]) {
    ARUpdateGroupAvatarChanged *avatarChanged = (ARUpdateGroupAvatarChanged *) check_class_cast(update, [ARUpdateGroupAvatarChanged class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onAvatarChangedWithInt:[((ARUpdateGroupAvatarChanged *) nil_chk(avatarChanged)) getGroupId] withLong:[avatarChanged getRid] withInt:
#line 258
    [avatarChanged getUid] withARApiAvatar:[avatarChanged getAvatar] withLong:
#line 259
    [avatarChanged getDate] withBoolean:false];
  }
  else
#line 260
  if ([update isKindOfClass:[ARUpdateGroupInvite class]]) {
    ARUpdateGroupInvite *groupInvite = (ARUpdateGroupInvite *) check_class_cast(update, [ARUpdateGroupInvite class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onGroupInviteWithInt:[((ARUpdateGroupInvite *) nil_chk(groupInvite)) getGroupId] withLong:
#line 263
    [groupInvite getRid] withInt:[groupInvite getInviteUid] withLong:[groupInvite getDate] withBoolean:
#line 264
    false];
  }
  else
#line 265
  if ([update isKindOfClass:[ARUpdateGroupUserLeave class]]) {
    ARUpdateGroupUserLeave *leave = (ARUpdateGroupUserLeave *) check_class_cast(update, [ARUpdateGroupUserLeave class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onUserLeaveWithInt:[((ARUpdateGroupUserLeave *) nil_chk(leave)) getGroupId] withLong:[leave getRid] withInt:[leave getUid] withLong:
#line 268
    [leave getDate] withBoolean:false];
  }
  else
#line 269
  if ([update isKindOfClass:[ARUpdateGroupUserKick class]]) {
    ARUpdateGroupUserKick *userKick = (ARUpdateGroupUserKick *) check_class_cast(update, [ARUpdateGroupUserKick class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onUserKickedWithInt:[((ARUpdateGroupUserKick *) nil_chk(userKick)) getGroupId] withLong:
#line 272
    [userKick getRid] withInt:[userKick getUid] withInt:[userKick getKickerUid] withLong:[userKick getDate] withBoolean:
#line 273
    false];
  }
  else
#line 274
  if ([update isKindOfClass:[ARUpdateGroupUserInvited class]]) {
    ARUpdateGroupUserInvited *userInvited = (ARUpdateGroupUserInvited *) check_class_cast(update, [ARUpdateGroupUserInvited class]);
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onUserAddedWithInt:[((ARUpdateGroupUserInvited *) nil_chk(userInvited)) getGroupId] withLong:
#line 277
    [userInvited getRid] withInt:[userInvited getUid] withInt:[userInvited getInviterUid] withLong:[userInvited getDate] withBoolean:
#line 278
    false];
  }
  else
#line 279
  if ([update isKindOfClass:[ARUpdateContactsAdded class]]) {
    ARUpdateContactsAdded *contactsAdded = (ARUpdateContactsAdded *) check_class_cast(update, [ARUpdateContactsAdded class]);
    IOSIntArray *res = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk([((ARUpdateContactsAdded *) nil_chk(contactsAdded)) getUids])) size]];
    for (jint i = 0; i < res->size_; i++) {
      *IOSIntArray_GetRef(res, i) = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([contactsAdded getUids])) getWithInt:i])) intValue];
    }
    [((ACContactsProcessor *) nil_chk(contactsProcessor_)) onContactsAddedWithIntArray:res];
  }
  else
#line 286
  if ([update isKindOfClass:[ARUpdateContactsRemoved class]]) {
    ARUpdateContactsRemoved *contactsRemoved = (ARUpdateContactsRemoved *) check_class_cast(update, [ARUpdateContactsRemoved class]);
    IOSIntArray *res = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk([((ARUpdateContactsRemoved *) nil_chk(contactsRemoved)) getUids])) size]];
    for (jint i = 0; i < res->size_; i++) {
      *IOSIntArray_GetRef(res, i) = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([contactsRemoved getUids])) getWithInt:i])) intValue];
    }
    [((ACContactsProcessor *) nil_chk(contactsProcessor_)) onContactsRemovedWithIntArray:res];
  }
  else
#line 293
  if ([update isKindOfClass:[ARUpdateGroupMembersUpdate class]]) {
    [((ACGroupsProcessor *) nil_chk(groupsProcessor_)) onMembersUpdatedWithInt:[((ARUpdateGroupMembersUpdate *) nil_chk(((ARUpdateGroupMembersUpdate *) check_class_cast(update, [ARUpdateGroupMembersUpdate class])))) getGroupId] withJavaUtilList:
#line 295
    [((ARUpdateGroupMembersUpdate *) nil_chk(((ARUpdateGroupMembersUpdate *) check_class_cast(update, [ARUpdateGroupMembersUpdate class])))) getMembers]];
  }
  else
#line 296
  if ([update isKindOfClass:[ARUpdateParameterChanged class]]) {
    [((ACSettingsProcessor *) nil_chk(settingsProcessor_)) onSettingsChangedWithNSString:
#line 298
    [((ARUpdateParameterChanged *) nil_chk(((ARUpdateParameterChanged *) check_class_cast(update, [ARUpdateParameterChanged class])))) getKey] withNSString:
#line 299
    [((ARUpdateParameterChanged *) nil_chk(((ARUpdateParameterChanged *) check_class_cast(update, [ARUpdateParameterChanged class])))) getValue]];
  }
  else
#line 300
  if ([update isKindOfClass:[ARUpdateCountersChanged class]]) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onCountersChangedWithARApiAppCounters:[((ARUpdateCountersChanged *) nil_chk(((ARUpdateCountersChanged *) check_class_cast(update, [ARUpdateCountersChanged class])))) getCounters]];
  }
  else
#line 302
  if ([update isKindOfClass:[ARUpdateChatGroupsChanged class]]) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onChatGroupsChangedWithJavaUtilList:[((ARUpdateChatGroupsChanged *) nil_chk(((ARUpdateChatGroupsChanged *) check_class_cast(update, [ARUpdateChatGroupsChanged class])))) getDialogs]];
  }
  else
#line 304
  if ([update isKindOfClass:[ARUpdateChatArchived class]]) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onChatArchivedWithACPeer:ACEntityConverter_convertWithARApiPeer_([((ARUpdateChatArchived *) nil_chk(((ARUpdateChatArchived *) check_class_cast(update, [ARUpdateChatArchived class])))) getPeer])];
  }
  else
#line 306
  if ([update isKindOfClass:[ARUpdateChatRestored class]]) {
    [((ACMessagesProcessor *) nil_chk(messagesProcessor_)) onChatRestoredWithACPeer:ACEntityConverter_convertWithARApiPeer_([((ARUpdateChatRestored *) nil_chk(((ARUpdateChatRestored *) check_class_cast(update, [ARUpdateChatRestored class])))) getPeer])];
  }
}


#line 312
- (jboolean)isCausesInvalidationWithACUpdate:(ACUpdate *)update {
  JavaUtilHashSet *users = new_JavaUtilHashSet_init();
  JavaUtilHashSet *groups = new_JavaUtilHashSet_init();
  
#line 316
  if ([update isKindOfClass:[ARUpdateMessage class]]) {
    ARUpdateMessage *updateMessage = (ARUpdateMessage *) check_class_cast(update, [ARUpdateMessage class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateMessage *) nil_chk(updateMessage)) getSenderUid])];
    if ([((ARApiPeer *) nil_chk([updateMessage getPeer])) getType] == JreLoadStatic(ARApiPeerTypeEnum, GROUP)) {
      [groups addWithId:JavaLangInteger_valueOfWithInt_([((ARApiPeer *) nil_chk([updateMessage getPeer])) getId])];
    }
    if ([((ARApiPeer *) nil_chk([updateMessage getPeer])) getType] == JreLoadStatic(ARApiPeerTypeEnum, PRIVATE)) {
      [users addWithId:JavaLangInteger_valueOfWithInt_([((ARApiPeer *) nil_chk([updateMessage getPeer])) getId])];
    }
  }
  else
#line 325
  if ([update isKindOfClass:[ARUpdateContactRegistered class]]) {
    ARUpdateContactRegistered *contactRegistered = (ARUpdateContactRegistered *) check_class_cast(update, [ARUpdateContactRegistered class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateContactRegistered *) nil_chk(contactRegistered)) getUid])];
  }
  else
#line 328
  if ([update isKindOfClass:[ARUpdateGroupInvite class]]) {
    ARUpdateGroupInvite *groupInvite = (ARUpdateGroupInvite *) check_class_cast(update, [ARUpdateGroupInvite class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateGroupInvite *) nil_chk(groupInvite)) getInviteUid])];
    [groups addWithId:JavaLangInteger_valueOfWithInt_([groupInvite getGroupId])];
  }
  else
#line 332
  if ([update isKindOfClass:[ARUpdateGroupUserInvited class]]) {
    ARUpdateGroupUserInvited *invited = (ARUpdateGroupUserInvited *) check_class_cast(update, [ARUpdateGroupUserInvited class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateGroupUserInvited *) nil_chk(invited)) getInviterUid])];
    [users addWithId:JavaLangInteger_valueOfWithInt_([invited getUid])];
    [groups addWithId:JavaLangInteger_valueOfWithInt_([invited getGroupId])];
  }
  else
#line 337
  if ([update isKindOfClass:[ARUpdateGroupUserKick class]]) {
    ARUpdateGroupUserKick *kick = (ARUpdateGroupUserKick *) check_class_cast(update, [ARUpdateGroupUserKick class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateGroupUserKick *) nil_chk(kick)) getKickerUid])];
    [users addWithId:JavaLangInteger_valueOfWithInt_([kick getUid])];
    [groups addWithId:JavaLangInteger_valueOfWithInt_([kick getGroupId])];
  }
  else
#line 342
  if ([update isKindOfClass:[ARUpdateGroupUserLeave class]]) {
    ARUpdateGroupUserLeave *leave = (ARUpdateGroupUserLeave *) check_class_cast(update, [ARUpdateGroupUserLeave class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateGroupUserLeave *) nil_chk(leave)) getUid])];
    [groups addWithId:JavaLangInteger_valueOfWithInt_([leave getGroupId])];
  }
  else
#line 346
  if ([update isKindOfClass:[ARUpdateContactsAdded class]]) {
    [users addAllWithJavaUtilCollection:[((ARUpdateContactsAdded *) nil_chk(((ARUpdateContactsAdded *) check_class_cast(update, [ARUpdateContactsAdded class])))) getUids]];
  }
  else
#line 348
  if ([update isKindOfClass:[ARUpdateContactsRemoved class]]) {
    [users addAllWithJavaUtilCollection:[((ARUpdateContactsRemoved *) nil_chk(((ARUpdateContactsRemoved *) check_class_cast(update, [ARUpdateContactsRemoved class])))) getUids]];
  }
  else
#line 350
  if ([update isKindOfClass:[ARUpdateUserLocalNameChanged class]]) {
    ARUpdateUserLocalNameChanged *localNameChanged = (ARUpdateUserLocalNameChanged *) check_class_cast(update, [ARUpdateUserLocalNameChanged class]);
    [users addWithId:JavaLangInteger_valueOfWithInt_([((ARUpdateUserLocalNameChanged *) nil_chk(localNameChanged)) getUid])];
  }
  
#line 355
  if (![((ACUsersProcessor *) nil_chk(usersProcessor_)) hasUsersWithJavaUtilCollection:users]) {
    return true;
  }
  
#line 359
  if (![((ACGroupsProcessor *) nil_chk(groupsProcessor_)) hasGroupsWithJavaUtilCollection:groups]) {
    return true;
  }
  
#line 363
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACModuleContext:", "UpdateProcessor", NULL, 0x1, NULL, NULL },
    { "applyRelatedWithJavaUtilList:withJavaUtilList:withBoolean:", "applyRelated", "V", 0x1, NULL, NULL },
    { "processInternalUpdateWithACInternalUpdate:", "processInternalUpdate", "V", 0x1, NULL, NULL },
    { "applyDifferenceUpdateWithJavaUtilList:withJavaUtilList:withJavaUtilList:", "applyDifferenceUpdate", "V", 0x1, NULL, NULL },
    { "processWeakUpdateWithACUpdate:withLong:", "processWeakUpdate", "V", 0x1, NULL, NULL },
    { "processUpdateWithACUpdate:", "processUpdate", "V", 0x1, NULL, NULL },
    { "isCausesInvalidationWithACUpdate:", "isCausesInvalidation", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACUpdateProcessor_TAG_, NULL, .constantValue.asLong = 0 },
    { "settingsProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.SettingsProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "usersProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.UsersProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "messagesProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.MessagesProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "groupsProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.GroupsProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "presenceProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.PresenceProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "typingProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.TypingProcessor;", NULL, NULL, .constantValue.asLong = 0 },
    { "contactsProcessor_", NULL, 0x2, "Lim.actor.core.modules.updates.ContactsProcessor;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACUpdateProcessor = { 2, "UpdateProcessor", "im.actor.core.modules.updates", NULL, 0x1, 7, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACUpdateProcessor;
}

@end


#line 79
void ACUpdateProcessor_initWithACModuleContext_(ACUpdateProcessor *self, id<ACModuleContext> context) {
  (void) ACAbsModule_initWithACModuleContext_(self, context);
  self->contactsProcessor_ = new_ACContactsProcessor_initWithACModuleContext_(context);
  self->settingsProcessor_ = new_ACSettingsProcessor_initWithACModuleContext_(context);
  self->usersProcessor_ = new_ACUsersProcessor_initWithACModuleContext_(context);
  self->messagesProcessor_ = new_ACMessagesProcessor_initWithACModuleContext_(context);
  self->groupsProcessor_ = new_ACGroupsProcessor_initWithACModuleContext_(context);
  self->presenceProcessor_ = new_ACPresenceProcessor_initWithACModuleContext_(context);
  self->typingProcessor_ = new_ACTypingProcessor_initWithACModuleContext_(context);
}


#line 79
ACUpdateProcessor *new_ACUpdateProcessor_initWithACModuleContext_(id<ACModuleContext> context) {
  ACUpdateProcessor *self = [ACUpdateProcessor alloc];
  ACUpdateProcessor_initWithACModuleContext_(self, context);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUpdateProcessor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UpdateProcessor.java"

@implementation ACUpdateProcessor_$1


#line 125
- (void)run {
  [((id<ACCommandCallback>) nil_chk([((ACUsersFounded *) nil_chk(val$founded_)) getCommandCallback])) onResult:[val$users_ toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(val$users_)) size] type:ACUserVM_class_()]]];
}

- (instancetype)initWithACUsersFounded:(ACUsersFounded *)capture$0
                 withJavaUtilArrayList:(JavaUtilArrayList *)capture$1 {
  ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACUsersFounded:withJavaUtilArrayList:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$founded_", NULL, 0x1012, "Lim.actor.core.modules.updates.internal.UsersFounded;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$users_", NULL, 0x1012, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lim/actor/core/viewmodel/UserVM;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUpdateProcessor", "processInternalUpdateWithACInternalUpdate:" };
  static const J2ObjcClassInfo _ACUpdateProcessor_$1 = { 2, "", "im.actor.core.modules.updates", "UpdateProcessor", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUpdateProcessor_$1;
}

@end

void ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(ACUpdateProcessor_$1 *self, ACUsersFounded *capture$0, JavaUtilArrayList *capture$1) {
  self->val$founded_ = capture$0;
  self->val$users_ = capture$1;
  (void) NSObject_init(self);
}

ACUpdateProcessor_$1 *new_ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(ACUsersFounded *capture$0, JavaUtilArrayList *capture$1) {
  ACUpdateProcessor_$1 *self = [ACUpdateProcessor_$1 alloc];
  ACUpdateProcessor_$1_initWithACUsersFounded_withJavaUtilArrayList_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUpdateProcessor_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/modules/updates/UpdateProcessor.java"

@implementation ACUpdateProcessor_$2


#line 136
- (void)run {
  [((id<ACCommandCallback>) nil_chk([((ACGroupCreated *) nil_chk(val$created_)) getCallback])) onResult:JavaLangInteger_valueOfWithInt_([((ARApiGroup *) nil_chk([val$created_ getGroup])) getId])];
}

- (instancetype)initWithACGroupCreated:(ACGroupCreated *)capture$0 {
  ACUpdateProcessor_$2_initWithACGroupCreated_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL, NULL },
    { "initWithACGroupCreated:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$created_", NULL, 0x1012, "Lim.actor.core.modules.updates.internal.GroupCreated;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACUpdateProcessor", "processInternalUpdateWithACInternalUpdate:" };
  static const J2ObjcClassInfo _ACUpdateProcessor_$2 = { 2, "", "im.actor.core.modules.updates", "UpdateProcessor", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACUpdateProcessor_$2;
}

@end

void ACUpdateProcessor_$2_initWithACGroupCreated_(ACUpdateProcessor_$2 *self, ACGroupCreated *capture$0) {
  self->val$created_ = capture$0;
  (void) NSObject_init(self);
}

ACUpdateProcessor_$2 *new_ACUpdateProcessor_$2_initWithACGroupCreated_(ACGroupCreated *capture$0) {
  ACUpdateProcessor_$2 *self = [ACUpdateProcessor_$2 alloc];
  ACUpdateProcessor_$2_initWithACGroupCreated_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACUpdateProcessor_$2)

#pragma clang diagnostic pop
