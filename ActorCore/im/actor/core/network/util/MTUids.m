//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/util/MTUids.java
//

#include "J2ObjC_source.h"
#include "im/actor/core/network/util/MTUids.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/threading/AtomicLongCompat.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

static ARAtomicLongCompat *ACMTUids_NEXT_ID_;
J2OBJC_STATIC_FIELD_GETTER(ACMTUids, NEXT_ID_, ARAtomicLongCompat *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/util/MTUids.java"

J2OBJC_INITIALIZED_DEFN(ACMTUids)


#line 10
@implementation ACMTUids


#line 14
+ (jlong)nextId {
  return ACMTUids_nextId();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACMTUids_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [ACMTUids class]) {
    ACMTUids_NEXT_ID_ = ARRuntime_createAtomicLongWithLong_(
#line 12
    1);
    J2OBJC_SET_INITIALIZED(ACMTUids)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nextId", NULL, "J", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NEXT_ID_", NULL, 0x1a, "Lim.actor.runtime.threading.AtomicLongCompat;", &ACMTUids_NEXT_ID_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACMTUids = { 2, "MTUids", "im.actor.core.network.util", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACMTUids;
}

@end


#line 14
jlong ACMTUids_nextId() {
  ACMTUids_initialize();
  
#line 15
  return [((ARAtomicLongCompat *) nil_chk(ACMTUids_NEXT_ID_)) getAndIncrement];
}

void ACMTUids_init(ACMTUids *self) {
  (void) NSObject_init(self);
}

ACMTUids *new_ACMTUids_init() {
  ACMTUids *self = [ACMTUids alloc];
  ACMTUids_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACMTUids)

#pragma clang diagnostic pop
