//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ReceiverActor.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/network/mtp/MTProto.h"
#include "im/actor/core/network/mtp/MTProtoCallback.h"
#include "im/actor/core/network/mtp/actors/PusherActor.h"
#include "im/actor/core/network/mtp/actors/ReceiverActor.h"
#include "im/actor/core/network/mtp/entity/AuthIdInvalid.h"
#include "im/actor/core/network/mtp/entity/Container.h"
#include "im/actor/core/network/mtp/entity/MTPush.h"
#include "im/actor/core/network/mtp/entity/MTRpcResponse.h"
#include "im/actor/core/network/mtp/entity/MessageAck.h"
#include "im/actor/core/network/mtp/entity/NewSessionCreated.h"
#include "im/actor/core/network/mtp/entity/ProtoMessage.h"
#include "im/actor/core/network/mtp/entity/ProtoSerializer.h"
#include "im/actor/core/network/mtp/entity/ProtoStruct.h"
#include "im/actor/core/network/mtp/entity/RequestResend.h"
#include "im/actor/core/network/mtp/entity/SessionLost.h"
#include "im/actor/core/network/mtp/entity/UnsentMessage.h"
#include "im/actor/core/network/mtp/entity/UnsentResponse.h"
#include "im/actor/core/network/util/MTUids.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorCreator.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSelection.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/Exception.h>
#include <j2objc/java/lang/Long.h>
#include <j2objc/java/util/ArrayList.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACReceiverActor_MAX_RECEIVED_BUFFER 1000

@interface ACReceiverActor () {
 @public
  ARActorRef *sender_;
  ACMTProto *proto_;
  JavaUtilArrayList *receivedMessages_;
}

- (void)onReceiveWithACProtoMessage:(ACProtoMessage *)message;

@end

J2OBJC_FIELD_SETTER(ACReceiverActor, sender_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACReceiverActor, proto_, ACMTProto *)
J2OBJC_FIELD_SETTER(ACReceiverActor, receivedMessages_, JavaUtilArrayList *)

static NSString *ACReceiverActor_TAG_ = @"ProtoReceiver";
J2OBJC_STATIC_FIELD_GETTER(ACReceiverActor, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ACReceiverActor, MAX_RECEIVED_BUFFER, jint)

__attribute__((unused)) static void ACReceiverActor_onReceiveWithACProtoMessage_(ACReceiverActor *self, ACProtoMessage *message);

@interface ACReceiverActor_$1 : NSObject < ARActorCreator > {
 @public
  ACMTProto *val$proto_;
}

- (ACReceiverActor *)create;

- (instancetype)initWithACMTProto:(ACMTProto *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACReceiverActor_$1)

J2OBJC_FIELD_SETTER(ACReceiverActor_$1, val$proto_, ACMTProto *)

__attribute__((unused)) static void ACReceiverActor_$1_initWithACMTProto_(ACReceiverActor_$1 *self, ACMTProto *capture$0);

__attribute__((unused)) static ACReceiverActor_$1 *new_ACReceiverActor_$1_initWithACMTProto_(ACMTProto *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACReceiverActor_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ReceiverActor.java"


#line 33
@implementation ACReceiverActor


#line 37
+ (ARActorRef *)receiverWithACMTProto:(ACMTProto *)proto {
  return ACReceiverActor_receiverWithACMTProto_(proto);
}


#line 53
- (instancetype)initWithACMTProto:(ACMTProto *)proto {
  ACReceiverActor_initWithACMTProto_(self, proto);
  return self;
}

- (void)preStart {
  sender_ = ACPusherActor_senderActorWithACMTProto_(proto_);
}


#line 63
- (void)postStop {
  self->sender_ = nil;
  self->proto_ = nil;
  self->receivedMessages_ = nil;
}


#line 70
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ACProtoMessage class]]) {
    ACReceiverActor_onReceiveWithACProtoMessage_(self, (ACProtoMessage *) check_class_cast(message, [ACProtoMessage class]));
  }
  else {
    
#line 74
    [self dropWithId:message];
  }
}


#line 78
- (void)onReceiveWithACProtoMessage:(ACProtoMessage *)message {
  ACReceiverActor_onReceiveWithACProtoMessage_(self, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "receiverWithACMTProto:", "receiver", "Lim.actor.runtime.actors.ActorRef;", 0x9, NULL, NULL },
    { "initWithACMTProto:", "ReceiverActor", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "postStop", NULL, "V", 0x1, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
    { "onReceiveWithACProtoMessage:", "onReceive", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACReceiverActor_TAG_, NULL, .constantValue.asLong = 0 },
    { "MAX_RECEIVED_BUFFER", "MAX_RECEIVED_BUFFER", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACReceiverActor_MAX_RECEIVED_BUFFER },
    { "sender_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "proto_", NULL, 0x2, "Lim.actor.core.network.mtp.MTProto;", NULL, NULL, .constantValue.asLong = 0 },
    { "receivedMessages_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Long;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACReceiverActor = { 2, "ReceiverActor", "im.actor.core.network.mtp.actors", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACReceiverActor;
}

@end


#line 37
ARActorRef *ACReceiverActor_receiverWithACMTProto_(ACMTProto *proto) {
  ACReceiverActor_initialize();
  
#line 38
  return [((ARActorSystem *) nil_chk(ARActorSystem_system())) actorOfWithARActorSelection:new_ARActorSelection_initWithARProps_withNSString_([((ARProps *) nil_chk(ARProps_createWithIOSClass_withARActorCreator_(ACReceiverActor_class_(), new_ACReceiverActor_$1_initWithACMTProto_(proto)))) changeDispatcherWithNSString:
#line 43
  @"network"], JreStrcat("$$", [((ACMTProto *) nil_chk(proto)) getActorPath], @"/receiver"))];
}


#line 53
void ACReceiverActor_initWithACMTProto_(ACReceiverActor *self, ACMTProto *proto) {
  (void) ARActor_init(self);
  self->receivedMessages_ = new_JavaUtilArrayList_init();
  
#line 54
  self->proto_ = proto;
}


#line 53
ACReceiverActor *new_ACReceiverActor_initWithACMTProto_(ACMTProto *proto) {
  ACReceiverActor *self = [ACReceiverActor alloc];
  ACReceiverActor_initWithACMTProto_(self, proto);
  return self;
}


#line 78
void ACReceiverActor_onReceiveWithACProtoMessage_(ACReceiverActor *self, ACProtoMessage *message) {
  
#line 80
  [((ARActorRef *) nil_chk(self->sender_)) sendWithId:new_ACPusherActor_ReadPackageFromConnection_init()];
  
#line 82
  jboolean disableConfirm = false;
  @try {
    
#line 91
    if ([((JavaUtilArrayList *) nil_chk(self->receivedMessages_)) size] >= ACReceiverActor_MAX_RECEIVED_BUFFER) {
      (void) [self->receivedMessages_ removeWithInt:0];
    }
    [self->receivedMessages_ addWithId:JavaLangLong_valueOfWithLong_([((ACProtoMessage *) nil_chk(message)) getMessageId])];
    
#line 96
    ACProtoStruct *obj;
    @try {
      obj = ACProtoSerializer_readMessagePayloadWithByteArray_([message getPayload]);
    }
    @catch (
#line 99
    JavaIoIOException *e) {
      ARLog_wWithNSString_withNSString_(ACReceiverActor_TAG_, @"Unable to parse message: ignoring");
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      return;
    }
    
#line 107
    if ([obj isKindOfClass:[ACNewSessionCreated class]]) {
      ACNewSessionCreated *newSessionCreated = (ACNewSessionCreated *) check_class_cast(obj, [ACNewSessionCreated class]);
      [self->sender_ sendWithId:new_ACPusherActor_NewSession_initWithLong_([((ACNewSessionCreated *) nil_chk(newSessionCreated)) getMessageId])];
      [((id<ACMTProtoCallback>) nil_chk([((ACMTProto *) nil_chk(self->proto_)) getCallback])) onSessionCreated];
    }
    else
#line 111
    if ([obj isKindOfClass:[ACContainer class]]) {
      ACContainer *container = (ACContainer *) check_class_cast(obj, [ACContainer class]);
      {
        IOSObjectArray *a__ =
#line 113
        [((ACContainer *) nil_chk(container)) getMessages];
        ACProtoMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        ACProtoMessage * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          ACProtoMessage *m = *b__++;
          
#line 114
          [((ARActorRef *) nil_chk([self self__])) sendWithId:m withARActorRef:[self sender]];
        }
      }
    }
    else
#line 116
    if ([obj isKindOfClass:[ACSessionLost class]]) {
      [self->sender_ sendWithId:new_ACPusherActor_SessionLost_init()];
    }
    else
#line 118
    if ([obj isKindOfClass:[ACMTRpcResponse class]]) {
      ACMTRpcResponse *responseBox = (ACMTRpcResponse *) check_class_cast(obj, [ACMTRpcResponse class]);
      
#line 121
      [self->sender_ sendWithId:new_ACPusherActor_ForgetMessage_initWithLong_([((ACMTRpcResponse *) nil_chk(responseBox)) getMessageId])];
      [((id<ACMTProtoCallback>) nil_chk([((ACMTProto *) nil_chk(self->proto_)) getCallback])) onRpcResponseWithLong:[responseBox getMessageId] withByteArray:[responseBox getPayload]];
    }
    else
#line 123
    if ([obj isKindOfClass:[ACMessageAck class]]) {
      ACMessageAck *ack = (ACMessageAck *) check_class_cast(obj, [ACMessageAck class]);
      {
        IOSLongArray *a__ = ((ACMessageAck *) nil_chk(ack))->messagesIds_;
        jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
        jlong const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jlong ackMsgId = *b__++;
          
#line 127
          [self->sender_ sendWithId:new_ACPusherActor_ForgetMessage_initWithLong_(ackMsgId)];
        }
      }
    }
    else
#line 129
    if ([obj isKindOfClass:[ACMTPush class]]) {
      ACMTPush *box = (ACMTPush *) check_class_cast(obj, [ACMTPush class]);
      [((id<ACMTProtoCallback>) nil_chk([((ACMTProto *) nil_chk(self->proto_)) getCallback])) onUpdateWithByteArray:[((ACMTPush *) nil_chk(box)) getPayload]];
    }
    else
#line 132
    if ([obj isKindOfClass:[ACUnsentResponse class]]) {
      ACUnsentResponse *unsent = (ACUnsentResponse *) check_class_cast(obj, [ACUnsentResponse class]);
      if (![self->receivedMessages_ containsWithId:JavaLangLong_valueOfWithLong_([((ACUnsentResponse *) nil_chk(unsent)) getResponseMessageId])]) {
        disableConfirm = true;
        [self->sender_ sendWithId:new_ACPusherActor_SendMessage_initWithLong_withByteArray_(ACMTUids_nextId(),
#line 137
        [new_ACRequestResend_initWithLong_([unsent getMessageId]) toByteArray])];
      }
    }
    else
#line 139
    if ([obj isKindOfClass:[ACUnsentMessage class]]) {
      ACUnsentMessage *unsent = (ACUnsentMessage *) check_class_cast(obj, [ACUnsentMessage class]);
      if (![self->receivedMessages_ containsWithId:JavaLangLong_valueOfWithLong_([((ACUnsentMessage *) nil_chk(unsent)) getMessageId])]) {
        disableConfirm = true;
        [self->sender_ sendWithId:new_ACPusherActor_SendMessage_initWithLong_withByteArray_(ACMTUids_nextId(),
#line 144
        [new_ACRequestResend_initWithLong_([unsent getMessageId]) toByteArray])];
      }
    }
    else
#line 146
    if ([obj isKindOfClass:[ACAuthIdInvalid class]]) {
      [((id<ACMTProtoCallback>) nil_chk([((ACMTProto *) nil_chk(self->proto_)) getCallback])) onAuthKeyInvalidatedWithLong:[self->proto_ getAuthId]];
      [self->proto_ stopProto];
    }
    else {
      
#line 150
      ARLog_wWithNSString_withNSString_(ACReceiverActor_TAG_, JreStrcat("$@", @"Unsupported package ", obj));
    }
  }
  @catch (
#line 152
  JavaLangException *e) {
    ARLog_wWithNSString_withNSString_(ACReceiverActor_TAG_, @"Parsing error");
  }
  @finally {
    if (!disableConfirm) {
      [self->sender_ sendWithId:new_ACPusherActor_ConfirmMessage_initWithLong_([((ACProtoMessage *) nil_chk(message)) getMessageId])];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACReceiverActor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ReceiverActor.java"

@implementation ACReceiverActor_$1


#line 40
- (ACReceiverActor *)create {
  return new_ACReceiverActor_initWithACMTProto_(val$proto_);
}

- (instancetype)initWithACMTProto:(ACMTProto *)capture$0 {
  ACReceiverActor_$1_initWithACMTProto_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lim.actor.core.network.mtp.actors.ReceiverActor;", 0x1, NULL, NULL },
    { "initWithACMTProto:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$proto_", NULL, 0x1012, "Lim.actor.core.network.mtp.MTProto;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACReceiverActor", "receiverWithACMTProto:" };
  static const J2ObjcClassInfo _ACReceiverActor_$1 = { 2, "", "im.actor.core.network.mtp.actors", "ReceiverActor", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/runtime/actors/ActorCreator<Lim/actor/core/network/mtp/actors/ReceiverActor;>;" };
  return &_ACReceiverActor_$1;
}

@end

void ACReceiverActor_$1_initWithACMTProto_(ACReceiverActor_$1 *self, ACMTProto *capture$0) {
  self->val$proto_ = capture$0;
  (void) NSObject_init(self);
}

ACReceiverActor_$1 *new_ACReceiverActor_$1_initWithACMTProto_(ACMTProto *capture$0) {
  ACReceiverActor_$1 *self = [ACReceiverActor_$1 alloc];
  ACReceiverActor_$1_initWithACMTProto_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACReceiverActor_$1)

#pragma clang diagnostic pop
