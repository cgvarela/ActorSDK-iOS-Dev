//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/network/ActorApi.h"
#include "im/actor/core/network/Endpoints.h"
#include "im/actor/core/network/NetworkState.h"
#include "im/actor/core/network/mtp/MTProto.h"
#include "im/actor/core/network/mtp/MTProtoCallback.h"
#include "im/actor/core/network/mtp/actors/ManagerActor.h"
#include "im/actor/core/network/mtp/actors/PusherActor.h"
#include "im/actor/core/network/mtp/actors/ReceiverActor.h"
#include "im/actor/core/network/mtp/entity/ProtoMessage.h"
#include "im/actor/core/util/ExponentialBackoff.h"
#include "im/actor/runtime/Log.h"
#include "im/actor/runtime/Network.h"
#include "im/actor/runtime/Runtime.h"
#include "im/actor/runtime/actors/Actor.h"
#include "im/actor/runtime/actors/ActorCreator.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/ActorSelection.h"
#include "im/actor/runtime/actors/ActorSystem.h"
#include "im/actor/runtime/actors/Props.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/mtproto/Connection.h"
#include "im/actor/runtime/mtproto/ConnectionCallback.h"
#include "im/actor/runtime/mtproto/ConnectionEndpoint.h"
#include "im/actor/runtime/mtproto/CreateConnectionCallback.h"
#include "im/actor/runtime/threading/AtomicIntegerCompat.h"
#include <j2objc/java/io/IOException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACManagerActor () {
 @public
  ACMTProto *mtProto_;
  ACEndpoints *endpoints_;
  jlong authId_;
  jlong sessionId_;
  jboolean isEnableLog_;
  jint currentConnectionId_;
  id<ARConnection> currentConnection_;
  ACNetworkStateEnum *networkState_;
  jboolean isCheckingConnections_;
  ACExponentialBackoff *backoff_;
  ARActorRef *receiver_;
  ARActorRef *sender_;
}

- (void)onConnectionCreatedWithInt:(jint)id_
                  withARConnection:(id<ARConnection>)connection;

- (void)onConnectionCreateFailure;

- (void)onConnectionDieWithInt:(jint)id_;

- (void)onNetworkChangedWithACNetworkStateEnum:(ACNetworkStateEnum *)state;

- (void)forceNetworkCheck;

- (void)requestCheckConnection;

- (void)requestCheckConnectionWithLong:(jlong)wait;

- (void)checkConnection;

- (void)connectionStateChanged;

- (void)onInMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)len;

- (void)onOutMessageWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ACManagerActor, mtProto_, ACMTProto *)
J2OBJC_FIELD_SETTER(ACManagerActor, endpoints_, ACEndpoints *)
J2OBJC_FIELD_SETTER(ACManagerActor, currentConnection_, id<ARConnection>)
J2OBJC_FIELD_SETTER(ACManagerActor, networkState_, ACNetworkStateEnum *)
J2OBJC_FIELD_SETTER(ACManagerActor, backoff_, ACExponentialBackoff *)
J2OBJC_FIELD_SETTER(ACManagerActor, receiver_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACManagerActor, sender_, ARActorRef *)

static NSString *ACManagerActor_TAG_ = @"Manager";
J2OBJC_STATIC_FIELD_GETTER(ACManagerActor, TAG_, NSString *)

static ARAtomicIntegerCompat *ACManagerActor_NEXT_CONNECTION_;
J2OBJC_STATIC_FIELD_GETTER(ACManagerActor, NEXT_CONNECTION_, ARAtomicIntegerCompat *)

__attribute__((unused)) static void ACManagerActor_onConnectionCreatedWithInt_withARConnection_(ACManagerActor *self, jint id_, id<ARConnection> connection);

__attribute__((unused)) static void ACManagerActor_onConnectionCreateFailure(ACManagerActor *self);

__attribute__((unused)) static void ACManagerActor_onConnectionDieWithInt_(ACManagerActor *self, jint id_);

__attribute__((unused)) static void ACManagerActor_onNetworkChangedWithACNetworkStateEnum_(ACManagerActor *self, ACNetworkStateEnum *state);

__attribute__((unused)) static void ACManagerActor_forceNetworkCheck(ACManagerActor *self);

__attribute__((unused)) static void ACManagerActor_requestCheckConnection(ACManagerActor *self);

__attribute__((unused)) static void ACManagerActor_requestCheckConnectionWithLong_(ACManagerActor *self, jlong wait);

__attribute__((unused)) static void ACManagerActor_checkConnection(ACManagerActor *self);

__attribute__((unused)) static void ACManagerActor_connectionStateChanged(ACManagerActor *self);

__attribute__((unused)) static void ACManagerActor_onInMessageWithByteArray_withInt_withInt_(ACManagerActor *self, IOSByteArray *data, jint offset, jint len);

__attribute__((unused)) static void ACManagerActor_onOutMessageWithByteArray_withInt_withInt_(ACManagerActor *self, IOSByteArray *data, jint offset, jint len);

@interface ACManagerActor_OutMessage () {
 @public
  IOSByteArray *message_;
  jint offset_;
  jint len_;
}

@end

J2OBJC_FIELD_SETTER(ACManagerActor_OutMessage, message_, IOSByteArray *)

@interface ACManagerActor_InMessage () {
 @public
  IOSByteArray *data_;
  jint offset_;
  jint len_;
}

@end

J2OBJC_FIELD_SETTER(ACManagerActor_InMessage, data_, IOSByteArray *)

@interface ACManagerActor_NetworkChanged () {
 @public
  ACNetworkStateEnum *state_;
}

@end

J2OBJC_FIELD_SETTER(ACManagerActor_NetworkChanged, state_, ACNetworkStateEnum *)

@interface ACManagerActor_PerformConnectionCheck : NSObject

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_PerformConnectionCheck)

__attribute__((unused)) static void ACManagerActor_PerformConnectionCheck_init(ACManagerActor_PerformConnectionCheck *self);

__attribute__((unused)) static ACManagerActor_PerformConnectionCheck *new_ACManagerActor_PerformConnectionCheck_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_PerformConnectionCheck)

@interface ACManagerActor_ConnectionDie : NSObject {
 @public
  jint connectionId_;
}

- (instancetype)initWithInt:(jint)connectionId;

- (jint)getConnectionId;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_ConnectionDie)

__attribute__((unused)) static void ACManagerActor_ConnectionDie_initWithInt_(ACManagerActor_ConnectionDie *self, jint connectionId);

__attribute__((unused)) static ACManagerActor_ConnectionDie *new_ACManagerActor_ConnectionDie_initWithInt_(jint connectionId) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_ConnectionDie)

@interface ACManagerActor_ConnectionCreateFailure : NSObject

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_ConnectionCreateFailure)

__attribute__((unused)) static void ACManagerActor_ConnectionCreateFailure_init(ACManagerActor_ConnectionCreateFailure *self);

__attribute__((unused)) static ACManagerActor_ConnectionCreateFailure *new_ACManagerActor_ConnectionCreateFailure_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_ConnectionCreateFailure)

@interface ACManagerActor_ConnectionCreated : NSObject {
 @public
  jint connectionId_;
  id<ARConnection> connection_;
}

- (instancetype)initWithInt:(jint)connectionId
           withARConnection:(id<ARConnection>)connection;

- (jint)getConnectionId;

- (id<ARConnection>)getConnection;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_ConnectionCreated)

J2OBJC_FIELD_SETTER(ACManagerActor_ConnectionCreated, connection_, id<ARConnection>)

__attribute__((unused)) static void ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(ACManagerActor_ConnectionCreated *self, jint connectionId, id<ARConnection> connection);

__attribute__((unused)) static ACManagerActor_ConnectionCreated *new_ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(jint connectionId, id<ARConnection> connection) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_ConnectionCreated)

@interface ACManagerActor_$1 : NSObject < ARActorCreator > {
 @public
  ACMTProto *val$mtProto_;
}

- (ACManagerActor *)create;

- (instancetype)initWithACMTProto:(ACMTProto *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_$1)

J2OBJC_FIELD_SETTER(ACManagerActor_$1, val$mtProto_, ACMTProto *)

__attribute__((unused)) static void ACManagerActor_$1_initWithACMTProto_(ACManagerActor_$1 *self, ACMTProto *capture$0);

__attribute__((unused)) static ACManagerActor_$1 *new_ACManagerActor_$1_initWithACMTProto_(ACMTProto *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_$1)

@interface ACManagerActor_$2 : NSObject < ARConnectionCallback > {
 @public
  ACManagerActor *this$0_;
  jint val$id_;
}

- (void)onConnectionRedirectWithHost:(NSString *)host
                            withPort:(jint)port
                         withTimeout:(jint)timeout;

- (void)onMessageWithData:(IOSByteArray *)data
               withOffset:(jint)offset
               withLength:(jint)len;

- (void)onConnectionDie;

- (instancetype)initWithACManagerActor:(ACManagerActor *)outer$
                               withInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_$2)

J2OBJC_FIELD_SETTER(ACManagerActor_$2, this$0_, ACManagerActor *)

__attribute__((unused)) static void ACManagerActor_$2_initWithACManagerActor_withInt_(ACManagerActor_$2 *self, ACManagerActor *outer$, jint capture$0);

__attribute__((unused)) static ACManagerActor_$2 *new_ACManagerActor_$2_initWithACManagerActor_withInt_(ACManagerActor *outer$, jint capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_$2)

@interface ACManagerActor_$3 : NSObject < ARCreateConnectionCallback > {
 @public
  ACManagerActor *this$0_;
  jint val$id_;
}

- (void)onConnectionCreatedWithConnection:(id<ARConnection>)connection;

- (void)onConnectionCreateError;

- (instancetype)initWithACManagerActor:(ACManagerActor *)outer$
                               withInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ACManagerActor_$3)

J2OBJC_FIELD_SETTER(ACManagerActor_$3, this$0_, ACManagerActor *)

__attribute__((unused)) static void ACManagerActor_$3_initWithACManagerActor_withInt_(ACManagerActor_$3 *self, ACManagerActor *outer$, jint capture$0);

__attribute__((unused)) static ACManagerActor_$3 *new_ACManagerActor_$3_initWithACManagerActor_withInt_(ACManagerActor *outer$, jint capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACManagerActor_$3)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"

J2OBJC_INITIALIZED_DEFN(ACManagerActor)


#line 33
@implementation ACManagerActor


#line 37
+ (ARActorRef *)managerWithACMTProto:(ACMTProto *)mtProto {
  return ACManagerActor_managerWithACMTProto_(mtProto);
}


#line 67
- (instancetype)initWithACMTProto:(ACMTProto *)mtProto {
  ACManagerActor_initWithACMTProto_(self, mtProto);
  return self;
}


#line 77
- (void)preStart {
  receiver_ = ACReceiverActor_receiverWithACMTProto_(mtProto_);
  sender_ = ACPusherActor_senderActorWithACMTProto_(mtProto_);
  ACManagerActor_connectionStateChanged(self);
  ACManagerActor_checkConnection(self);
}


#line 85
- (void)postStop {
  self->receiver_ = nil;
  self->sender_ = nil;
  currentConnectionId_ = -1;
  if (currentConnection_ != nil) {
    [currentConnection_ close];
    currentConnection_ = nil;
  }
  ACManagerActor_connectionStateChanged(self);
}


#line 97
- (void)onReceiveWithId:(id)message {
  
#line 100
  if ([message isKindOfClass:[ACManagerActor_ConnectionCreated class]]) {
    ACManagerActor_ConnectionCreated *c = (ACManagerActor_ConnectionCreated *) check_class_cast(message, [ACManagerActor_ConnectionCreated class]);
    ACManagerActor_onConnectionCreatedWithInt_withARConnection_(self, ((ACManagerActor_ConnectionCreated *) nil_chk(c))->connectionId_, c->connection_);
  }
  else
#line 103
  if ([message isKindOfClass:[ACManagerActor_ConnectionCreateFailure class]]) {
    ACManagerActor_onConnectionCreateFailure(self);
  }
  else
#line 105
  if ([message isKindOfClass:[ACManagerActor_ConnectionDie class]]) {
    ACManagerActor_onConnectionDieWithInt_(self, ((ACManagerActor_ConnectionDie *) nil_chk(((ACManagerActor_ConnectionDie *) check_class_cast(message, [ACManagerActor_ConnectionDie class]))))->connectionId_);
  }
  else
#line 107
  if ([message isKindOfClass:[ACManagerActor_PerformConnectionCheck class]]) {
    ACManagerActor_checkConnection(self);
  }
  else
#line 109
  if ([message isKindOfClass:[ACManagerActor_NetworkChanged class]]) {
    ACManagerActor_onNetworkChangedWithACNetworkStateEnum_(self, ((ACManagerActor_NetworkChanged *) nil_chk(((ACManagerActor_NetworkChanged *) check_class_cast(message, [ACManagerActor_NetworkChanged class]))))->state_);
  }
  else
#line 111
  if ([message isKindOfClass:[ACManagerActor_ForceNetworkCheck class]]) {
    ACManagerActor_forceNetworkCheck(self);
  }
  else
#line 115
  if ([message isKindOfClass:[ACManagerActor_OutMessage class]]) {
    ACManagerActor_OutMessage *m = (ACManagerActor_OutMessage *) check_class_cast(message, [ACManagerActor_OutMessage class]);
    ACManagerActor_onOutMessageWithByteArray_withInt_withInt_(self, ((ACManagerActor_OutMessage *) nil_chk(m))->message_, m->offset_, m->len_);
  }
  else
#line 118
  if ([message isKindOfClass:[ACManagerActor_InMessage class]]) {
    ACManagerActor_InMessage *m = (ACManagerActor_InMessage *) check_class_cast(message, [ACManagerActor_InMessage class]);
    ACManagerActor_onInMessageWithByteArray_withInt_withInt_(self, ((ACManagerActor_InMessage *) nil_chk(m))->data_, m->offset_, m->len_);
  }
  else {
    
#line 122
    [self dropWithId:message];
  }
}


#line 126
- (void)onConnectionCreatedWithInt:(jint)id_
                  withARConnection:(id<ARConnection>)connection {
  ACManagerActor_onConnectionCreatedWithInt_withARConnection_(self, id_, connection);
}


#line 161
- (void)onConnectionCreateFailure {
  ACManagerActor_onConnectionCreateFailure(self);
}


#line 169
- (void)onConnectionDieWithInt:(jint)id_ {
  ACManagerActor_onConnectionDieWithInt_(self, id_);
}


#line 180
- (void)onNetworkChangedWithACNetworkStateEnum:(ACNetworkStateEnum *)state {
  ACManagerActor_onNetworkChangedWithACNetworkStateEnum_(self, state);
}


#line 187
- (void)forceNetworkCheck {
  ACManagerActor_forceNetworkCheck(self);
}


#line 193
- (void)requestCheckConnection {
  ACManagerActor_requestCheckConnection(self);
}

- (void)requestCheckConnectionWithLong:(jlong)wait {
  ACManagerActor_requestCheckConnectionWithLong_(self, wait);
}


#line 210
- (void)checkConnection {
  ACManagerActor_checkConnection(self);
}


#line 260
- (void)connectionStateChanged {
  ACManagerActor_connectionStateChanged(self);
}

- (void)onInMessageWithByteArray:(IOSByteArray *)data
                         withInt:(jint)offset
                         withInt:(jint)len {
  ACManagerActor_onInMessageWithByteArray_withInt_withInt_(self, data, offset, len);
}


#line 294
- (void)onOutMessageWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len {
  ACManagerActor_onOutMessageWithByteArray_withInt_withInt_(self, data, offset, len);
}

+ (void)initialize {
  if (self == [ACManagerActor class]) {
    ACManagerActor_NEXT_CONNECTION_ = ARRuntime_createAtomicIntWithInt_(
#line 47
    1);
    J2OBJC_SET_INITIALIZED(ACManagerActor)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "managerWithACMTProto:", "manager", "Lim.actor.runtime.actors.ActorRef;", 0x9, NULL, NULL },
    { "initWithACMTProto:", "ManagerActor", NULL, 0x1, NULL, NULL },
    { "preStart", NULL, "V", 0x1, NULL, NULL },
    { "postStop", NULL, "V", 0x1, NULL, NULL },
    { "onReceiveWithId:", "onReceive", "V", 0x1, NULL, NULL },
    { "onConnectionCreatedWithInt:withARConnection:", "onConnectionCreated", "V", 0x2, NULL, NULL },
    { "onConnectionCreateFailure", NULL, "V", 0x2, NULL, NULL },
    { "onConnectionDieWithInt:", "onConnectionDie", "V", 0x2, NULL, NULL },
    { "onNetworkChangedWithACNetworkStateEnum:", "onNetworkChanged", "V", 0x2, NULL, NULL },
    { "forceNetworkCheck", NULL, "V", 0x2, NULL, NULL },
    { "requestCheckConnection", NULL, "V", 0x2, NULL, NULL },
    { "requestCheckConnectionWithLong:", "requestCheckConnection", "V", 0x2, NULL, NULL },
    { "checkConnection", NULL, "V", 0x2, NULL, NULL },
    { "connectionStateChanged", NULL, "V", 0x2, NULL, NULL },
    { "onInMessageWithByteArray:withInt:withInt:", "onInMessage", "V", 0x2, NULL, NULL },
    { "onOutMessageWithByteArray:withInt:withInt:", "onOutMessage", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_", NULL, 0x1a, "Ljava.lang.String;", &ACManagerActor_TAG_, NULL, .constantValue.asLong = 0 },
    { "NEXT_CONNECTION_", NULL, 0x1a, "Lim.actor.runtime.threading.AtomicIntegerCompat;", &ACManagerActor_NEXT_CONNECTION_, NULL, .constantValue.asLong = 0 },
    { "mtProto_", NULL, 0x12, "Lim.actor.core.network.mtp.MTProto;", NULL, NULL, .constantValue.asLong = 0 },
    { "endpoints_", NULL, 0x12, "Lim.actor.core.network.Endpoints;", NULL, NULL, .constantValue.asLong = 0 },
    { "authId_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sessionId_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "isEnableLog_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "currentConnectionId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentConnection_", NULL, 0x2, "Lim.actor.runtime.mtproto.Connection;", NULL, NULL, .constantValue.asLong = 0 },
    { "networkState_", NULL, 0x2, "Lim.actor.core.network.NetworkState;", NULL, NULL, .constantValue.asLong = 0 },
    { "isCheckingConnections_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "backoff_", NULL, 0x12, "Lim.actor.core.util.ExponentialBackoff;", NULL, NULL, .constantValue.asLong = 0 },
    { "receiver_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "sender_", NULL, 0x2, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lim.actor.core.network.mtp.actors.ManagerActor$OutMessage;", "Lim.actor.core.network.mtp.actors.ManagerActor$InMessage;", "Lim.actor.core.network.mtp.actors.ManagerActor$NetworkChanged;", "Lim.actor.core.network.mtp.actors.ManagerActor$ForceNetworkCheck;", "Lim.actor.core.network.mtp.actors.ManagerActor$PerformConnectionCheck;", "Lim.actor.core.network.mtp.actors.ManagerActor$ConnectionDie;", "Lim.actor.core.network.mtp.actors.ManagerActor$ConnectionCreateFailure;", "Lim.actor.core.network.mtp.actors.ManagerActor$ConnectionCreated;"};
  static const J2ObjcClassInfo _ACManagerActor = { 2, "ManagerActor", "im.actor.core.network.mtp.actors", NULL, 0x1, 16, methods, 14, fields, 0, NULL, 8, inner_classes, NULL, NULL };
  return &_ACManagerActor;
}

@end


#line 37
ARActorRef *ACManagerActor_managerWithACMTProto_(ACMTProto *mtProto) {
  ACManagerActor_initialize();
  
#line 38
  return [((ARActorSystem *) nil_chk(ARActorSystem_system())) actorOfWithARActorSelection:new_ARActorSelection_initWithARProps_withNSString_(
#line 39
  [((ARProps *) nil_chk(ARProps_createWithIOSClass_withARActorCreator_(ACManagerActor_class_(), new_ACManagerActor_$1_initWithACMTProto_(mtProto)))) changeDispatcherWithNSString:
#line 44
  @"network"], JreStrcat("$$", [((ACMTProto *) nil_chk(mtProto)) getActorPath], @"/manager"))];
}


#line 67
void ACManagerActor_initWithACMTProto_(ACManagerActor *self, ACMTProto *mtProto) {
  (void) ARActor_init(self);
  self->networkState_ = JreLoadStatic(ACNetworkStateEnum, UNKNOWN);
  self->isCheckingConnections_ =
#line 61
  false;
  
#line 68
  self->mtProto_ = mtProto;
  self->endpoints_ = [((ACMTProto *) nil_chk(mtProto)) getEndpoints];
  self->authId_ = [mtProto getAuthId];
  self->sessionId_ = [mtProto getSessionId];
  self->isEnableLog_ = [mtProto isEnableLog];
  self->backoff_ = new_ACExponentialBackoff_initWithInt_withInt_withInt_([mtProto getMinDelay], [mtProto getMaxDelay], [mtProto getMaxFailureCount]);
}


#line 67
ACManagerActor *new_ACManagerActor_initWithACMTProto_(ACMTProto *mtProto) {
  ACManagerActor *self = [ACManagerActor alloc];
  ACManagerActor_initWithACMTProto_(self, mtProto);
  return self;
}


#line 126
void ACManagerActor_onConnectionCreatedWithInt_withARConnection_(ACManagerActor *self, jint id_, id<ARConnection> connection) {
  
#line 128
  if ([((id<ARConnection>) nil_chk(connection)) isClosed]) {
    if (self->isEnableLog_) {
      ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$I$", @"Unable to register connection #", id_, @": already closed"));
    }
    return;
  }
  
#line 135
  if (self->currentConnectionId_ == id_) {
    if (self->isEnableLog_) {
      ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$I$", @"Unable to register connection #", id_, @": already have connection"));
    }
    return;
  }
  
#line 142
  ARLog_dWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$I$", @"Connection #", id_, @" created"));
  
#line 144
  if (self->currentConnection_ != nil) {
    [self->currentConnection_ close];
    self->currentConnectionId_ = 0;
  }
  
#line 149
  self->currentConnectionId_ = id_;
  self->currentConnection_ = connection;
  ACManagerActor_connectionStateChanged(self);
  
#line 154
  [((ACExponentialBackoff *) nil_chk(self->backoff_)) onSuccess];
  self->isCheckingConnections_ = false;
  ACManagerActor_requestCheckConnection(self);
  
#line 158
  [((ARActorRef *) nil_chk(self->sender_)) sendWithId:new_ACPusherActor_ConnectionCreated_init()];
}


#line 161
void ACManagerActor_onConnectionCreateFailure(ACManagerActor *self) {
  ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, @"Connection create failure");
  
#line 164
  [((ACExponentialBackoff *) nil_chk(self->backoff_)) onFailure];
  self->isCheckingConnections_ = false;
  ACManagerActor_requestCheckConnectionWithLong_(self, [self->backoff_ exponentialWait]);
}


#line 169
void ACManagerActor_onConnectionDieWithInt_(ACManagerActor *self, jint id_) {
  ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$I$", @"Connection #", id_, @" dies"));
  
#line 172
  if (self->currentConnectionId_ == id_) {
    self->currentConnectionId_ = 0;
    self->currentConnection_ = nil;
    ACManagerActor_connectionStateChanged(self);
    ACManagerActor_requestCheckConnection(self);
  }
}


#line 180
void ACManagerActor_onNetworkChangedWithACNetworkStateEnum_(ACManagerActor *self, ACNetworkStateEnum *state) {
  ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$@", @"Network configuration changed: ", state));
  self->networkState_ = state;
  [((ACExponentialBackoff *) nil_chk(self->backoff_)) reset];
  ACManagerActor_checkConnection(self);
}

void ACManagerActor_forceNetworkCheck(ACManagerActor *self) {
  if (self->currentConnection_ != nil) {
    [self->currentConnection_ checkConnection];
  }
}

void ACManagerActor_requestCheckConnection(ACManagerActor *self) {
  ACManagerActor_requestCheckConnectionWithLong_(self, 0);
}

void ACManagerActor_requestCheckConnectionWithLong_(ACManagerActor *self, jlong wait) {
  if (!self->isCheckingConnections_) {
    if (self->currentConnection_ == nil) {
      if (wait == 0) {
        ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, @"Requesting connection creating");
      }
      else {
        
#line 203
        ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, JreStrcat("$J$", @"Requesting connection creating in ", wait, @" ms"));
      }
    }
    [((ARActorRef *) nil_chk([self self__])) sendOnceWithId:new_ACManagerActor_PerformConnectionCheck_init() withLong:wait];
  }
}


#line 210
void ACManagerActor_checkConnection(ACManagerActor *self) {
  if (self->isCheckingConnections_) {
    return;
  }
  
#line 215
  if (self->currentConnection_ == nil) {
    if (self->networkState_ == JreLoadStatic(ACNetworkStateEnum, NO_CONNECTION)) {
      ARLog_dWithNSString_withNSString_(ACManagerActor_TAG_, @"Not trying to create connection: Not network available");
      return;
    }
    ARLog_dWithNSString_withNSString_(ACManagerActor_TAG_, @"Trying to create connection...");
    
#line 222
    self->isCheckingConnections_ = true;
    
#line 224
    jint id_ = [((ARAtomicIntegerCompat *) nil_chk(ACManagerActor_NEXT_CONNECTION_)) getAndIncrement];
    
#line 226
    ARNetwork_createConnectionWithInt_withInt_withInt_withInt_withARConnectionEndpoint_withARConnectionCallback_withARCreateConnectionCallback_(id_, ACActorApi_MTPROTO_VERSION,
#line 227
    ACActorApi_API_MAJOR_VERSION,
#line 228
    ACActorApi_API_MINOR_VERSION,
#line 229
    [((ACEndpoints *) nil_chk(self->endpoints_)) fetchEndpoint], new_ACManagerActor_$2_initWithACManagerActor_withInt_(self, id_), new_ACManagerActor_$3_initWithACManagerActor_withInt_(self, id_));
  }
}


#line 260
void ACManagerActor_connectionStateChanged(ACManagerActor *self) {
  [((id<ACMTProtoCallback>) nil_chk([((ACMTProto *) nil_chk(self->mtProto_)) getCallback])) onConnectionsCountChangedWithInt:self->currentConnection_ != nil ? 1 : 0];
}

void ACManagerActor_onInMessageWithByteArray_withInt_withInt_(ACManagerActor *self, IOSByteArray *data, jint offset, jint len) {
  
#line 267
  ARDataInput *bis = new_ARDataInput_initWithByteArray_withInt_withInt_(data, offset, len);
  @try {
    jlong authId = [bis readLong];
    jlong sessionId = [bis readLong];
    
#line 272
    if (authId != self->authId_ || sessionId != self->sessionId_) {
      @throw new_JavaIoIOException_initWithNSString_(@"Incorrect header");
    }
    
#line 276
    jlong messageId = [bis readLong];
    IOSByteArray *payload = [bis readProtoBytes];
    
#line 279
    [((ARActorRef *) nil_chk(self->receiver_)) sendWithId:new_ACProtoMessage_initWithLong_withByteArray_(messageId, payload)];
  }
  @catch (
#line 280
  JavaIoIOException *e) {
    ARLog_wWithNSString_withNSString_(ACManagerActor_TAG_, @"Closing connection: incorrect package");
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    
#line 284
    if (self->currentConnection_ != nil) {
      [self->currentConnection_ close];
      self->currentConnection_ = nil;
      self->currentConnectionId_ = 0;
    }
    
#line 290
    ACManagerActor_checkConnection(self);
  }
}


#line 294
void ACManagerActor_onOutMessageWithByteArray_withInt_withInt_(ACManagerActor *self, IOSByteArray *data, jint offset, jint len) {
  
#line 298
  if (self->currentConnection_ != nil && [self->currentConnection_ isClosed]) {
    self->currentConnection_ = nil;
    
#line 301
    self->currentConnectionId_ = 0;
    ACManagerActor_checkConnection(self);
  }
  
#line 305
  if (self->currentConnection_ != nil) {
    ARDataOutput *bos = new_ARDataOutput_init();
    [bos writeLongWithLong:self->authId_];
    [bos writeLongWithLong:self->sessionId_];
    [bos writeBytesWithByteArray:data withInt:offset withInt:len];
    IOSByteArray *pkg = [bos toByteArray];
    [self->currentConnection_ postWithData:pkg withOffset:0 withLength:((IOSByteArray *) nil_chk(pkg))->size_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 316
@implementation ACManagerActor_OutMessage


#line 321
- (instancetype)initWithByteArray:(IOSByteArray *)message
                          withInt:(jint)offset
                          withInt:(jint)len {
  ACManagerActor_OutMessage_initWithByteArray_withInt_withInt_(self, message, offset, len);
  return self;
}


#line 327
- (jint)getOffset {
  return offset_;
}

- (jint)getLen {
  return len_;
}

- (IOSByteArray *)getMessage {
  return message_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:withInt:withInt:", "OutMessage", NULL, 0x1, NULL, NULL },
    { "getOffset", NULL, "I", 0x1, NULL, NULL },
    { "getLen", NULL, "I", 0x1, NULL, NULL },
    { "getMessage", NULL, "[B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "message_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "offset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "len_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACManagerActor_OutMessage = { 2, "OutMessage", "im.actor.core.network.mtp.actors", "ManagerActor", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_OutMessage;
}

@end


#line 321
void ACManagerActor_OutMessage_initWithByteArray_withInt_withInt_(ACManagerActor_OutMessage *self, IOSByteArray *message, jint offset, jint len) {
  (void) NSObject_init(self);
  
#line 322
  self->message_ = message;
  self->offset_ = offset;
  self->len_ = len;
}


#line 321
ACManagerActor_OutMessage *new_ACManagerActor_OutMessage_initWithByteArray_withInt_withInt_(IOSByteArray *message, jint offset, jint len) {
  ACManagerActor_OutMessage *self = [ACManagerActor_OutMessage alloc];
  ACManagerActor_OutMessage_initWithByteArray_withInt_withInt_(self, message, offset, len);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_OutMessage)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 340
@implementation ACManagerActor_InMessage


#line 345
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len {
  ACManagerActor_InMessage_initWithByteArray_withInt_withInt_(self, data, offset, len);
  return self;
}


#line 351
- (IOSByteArray *)getData {
  return data_;
}

- (jint)getOffset {
  return offset_;
}

- (jint)getLen {
  return len_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:withInt:withInt:", "InMessage", NULL, 0x1, NULL, NULL },
    { "getData", NULL, "[B", 0x1, NULL, NULL },
    { "getOffset", NULL, "I", 0x1, NULL, NULL },
    { "getLen", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "data_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "offset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "len_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACManagerActor_InMessage = { 2, "InMessage", "im.actor.core.network.mtp.actors", "ManagerActor", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_InMessage;
}

@end


#line 345
void ACManagerActor_InMessage_initWithByteArray_withInt_withInt_(ACManagerActor_InMessage *self, IOSByteArray *data, jint offset, jint len) {
  (void) NSObject_init(self);
  
#line 346
  self->data_ = data;
  self->offset_ = offset;
  self->len_ = len;
}


#line 345
ACManagerActor_InMessage *new_ACManagerActor_InMessage_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint len) {
  ACManagerActor_InMessage *self = [ACManagerActor_InMessage alloc];
  ACManagerActor_InMessage_initWithByteArray_withInt_withInt_(self, data, offset, len);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_InMessage)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 364
@implementation ACManagerActor_NetworkChanged


#line 367
- (instancetype)initWithACNetworkStateEnum:(ACNetworkStateEnum *)state {
  ACManagerActor_NetworkChanged_initWithACNetworkStateEnum_(self, state);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACNetworkStateEnum:", "NetworkChanged", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "state_", NULL, 0x2, "Lim.actor.core.network.NetworkState;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACManagerActor_NetworkChanged = { 2, "NetworkChanged", "im.actor.core.network.mtp.actors", "ManagerActor", 0x9, 1, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_NetworkChanged;
}

@end


#line 367
void ACManagerActor_NetworkChanged_initWithACNetworkStateEnum_(ACManagerActor_NetworkChanged *self, ACNetworkStateEnum *state) {
  (void) NSObject_init(self);
  
#line 368
  self->state_ = state;
}


#line 367
ACManagerActor_NetworkChanged *new_ACManagerActor_NetworkChanged_initWithACNetworkStateEnum_(ACNetworkStateEnum *state) {
  ACManagerActor_NetworkChanged *self = [ACManagerActor_NetworkChanged alloc];
  ACManagerActor_NetworkChanged_initWithACNetworkStateEnum_(self, state);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_NetworkChanged)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 372
@implementation ACManagerActor_ForceNetworkCheck

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACManagerActor_ForceNetworkCheck_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACManagerActor_ForceNetworkCheck = { 2, "ForceNetworkCheck", "im.actor.core.network.mtp.actors", "ManagerActor", 0x9, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_ForceNetworkCheck;
}

@end

void ACManagerActor_ForceNetworkCheck_init(ACManagerActor_ForceNetworkCheck *self) {
  (void) NSObject_init(self);
}

ACManagerActor_ForceNetworkCheck *new_ACManagerActor_ForceNetworkCheck_init() {
  ACManagerActor_ForceNetworkCheck *self = [ACManagerActor_ForceNetworkCheck alloc];
  ACManagerActor_ForceNetworkCheck_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_ForceNetworkCheck)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 376
@implementation ACManagerActor_PerformConnectionCheck

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACManagerActor_PerformConnectionCheck_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACManagerActor_PerformConnectionCheck = { 2, "PerformConnectionCheck", "im.actor.core.network.mtp.actors", "ManagerActor", 0xa, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_PerformConnectionCheck;
}

@end

void ACManagerActor_PerformConnectionCheck_init(ACManagerActor_PerformConnectionCheck *self) {
  (void) NSObject_init(self);
}

ACManagerActor_PerformConnectionCheck *new_ACManagerActor_PerformConnectionCheck_init() {
  ACManagerActor_PerformConnectionCheck *self = [ACManagerActor_PerformConnectionCheck alloc];
  ACManagerActor_PerformConnectionCheck_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_PerformConnectionCheck)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 380
@implementation ACManagerActor_ConnectionDie


#line 383
- (instancetype)initWithInt:(jint)connectionId {
  ACManagerActor_ConnectionDie_initWithInt_(self, connectionId);
  return self;
}


#line 387
- (jint)getConnectionId {
  return connectionId_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "ConnectionDie", NULL, 0x1, NULL, NULL },
    { "getConnectionId", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "connectionId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACManagerActor_ConnectionDie = { 2, "ConnectionDie", "im.actor.core.network.mtp.actors", "ManagerActor", 0xa, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_ConnectionDie;
}

@end


#line 383
void ACManagerActor_ConnectionDie_initWithInt_(ACManagerActor_ConnectionDie *self, jint connectionId) {
  (void) NSObject_init(self);
  
#line 384
  self->connectionId_ = connectionId;
}


#line 383
ACManagerActor_ConnectionDie *new_ACManagerActor_ConnectionDie_initWithInt_(jint connectionId) {
  ACManagerActor_ConnectionDie *self = [ACManagerActor_ConnectionDie alloc];
  ACManagerActor_ConnectionDie_initWithInt_(self, connectionId);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_ConnectionDie)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 392
@implementation ACManagerActor_ConnectionCreateFailure

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACManagerActor_ConnectionCreateFailure_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACManagerActor_ConnectionCreateFailure = { 2, "ConnectionCreateFailure", "im.actor.core.network.mtp.actors", "ManagerActor", 0xa, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_ConnectionCreateFailure;
}

@end

void ACManagerActor_ConnectionCreateFailure_init(ACManagerActor_ConnectionCreateFailure *self) {
  (void) NSObject_init(self);
}

ACManagerActor_ConnectionCreateFailure *new_ACManagerActor_ConnectionCreateFailure_init() {
  ACManagerActor_ConnectionCreateFailure *self = [ACManagerActor_ConnectionCreateFailure alloc];
  ACManagerActor_ConnectionCreateFailure_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_ConnectionCreateFailure)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"


#line 396
@implementation ACManagerActor_ConnectionCreated


#line 400
- (instancetype)initWithInt:(jint)connectionId
           withARConnection:(id<ARConnection>)connection {
  ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(self, connectionId, connection);
  return self;
}


#line 405
- (jint)getConnectionId {
  return connectionId_;
}

- (id<ARConnection>)getConnection {
  return connection_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withARConnection:", "ConnectionCreated", NULL, 0x1, NULL, NULL },
    { "getConnectionId", NULL, "I", 0x1, NULL, NULL },
    { "getConnection", NULL, "Lim.actor.runtime.mtproto.Connection;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "connectionId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "connection_", NULL, 0x2, "Lim.actor.runtime.mtproto.Connection;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACManagerActor_ConnectionCreated = { 2, "ConnectionCreated", "im.actor.core.network.mtp.actors", "ManagerActor", 0xa, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACManagerActor_ConnectionCreated;
}

@end


#line 400
void ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(ACManagerActor_ConnectionCreated *self, jint connectionId, id<ARConnection> connection) {
  (void) NSObject_init(self);
  
#line 401
  self->connectionId_ = connectionId;
  self->connection_ = connection;
}


#line 400
ACManagerActor_ConnectionCreated *new_ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(jint connectionId, id<ARConnection> connection) {
  ACManagerActor_ConnectionCreated *self = [ACManagerActor_ConnectionCreated alloc];
  ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(self, connectionId, connection);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_ConnectionCreated)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"

@implementation ACManagerActor_$1


#line 41
- (ACManagerActor *)create {
  return new_ACManagerActor_initWithACMTProto_(val$mtProto_);
}

- (instancetype)initWithACMTProto:(ACMTProto *)capture$0 {
  ACManagerActor_$1_initWithACMTProto_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "create", NULL, "Lim.actor.core.network.mtp.actors.ManagerActor;", 0x1, NULL, NULL },
    { "initWithACMTProto:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$mtProto_", NULL, 0x1012, "Lim.actor.core.network.mtp.MTProto;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACManagerActor", "managerWithACMTProto:" };
  static const J2ObjcClassInfo _ACManagerActor_$1 = { 2, "", "im.actor.core.network.mtp.actors", "ManagerActor", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lim/actor/runtime/actors/ActorCreator<Lim/actor/core/network/mtp/actors/ManagerActor;>;" };
  return &_ACManagerActor_$1;
}

@end

void ACManagerActor_$1_initWithACMTProto_(ACManagerActor_$1 *self, ACMTProto *capture$0) {
  self->val$mtProto_ = capture$0;
  (void) NSObject_init(self);
}

ACManagerActor_$1 *new_ACManagerActor_$1_initWithACMTProto_(ACMTProto *capture$0) {
  ACManagerActor_$1 *self = [ACManagerActor_$1 alloc];
  ACManagerActor_$1_initWithACMTProto_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"

@implementation ACManagerActor_$2


#line 232
- (void)onConnectionRedirectWithHost:(NSString *)host
                            withPort:(jint)port
                         withTimeout:(jint)timeout {
  
#line 234
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACManagerActor_ConnectionDie_initWithInt_(val$id_)];
}


#line 238
- (void)onMessageWithData:(IOSByteArray *)data
               withOffset:(jint)offset
               withLength:(jint)len {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACManagerActor_InMessage_initWithByteArray_withInt_withInt_(data, offset, len)];
}


#line 243
- (void)onConnectionDie {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACManagerActor_ConnectionDie_initWithInt_(val$id_)];
}

- (instancetype)initWithACManagerActor:(ACManagerActor *)outer$
                               withInt:(jint)capture$0 {
  ACManagerActor_$2_initWithACManagerActor_withInt_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onConnectionRedirectWithHost:withPort:withTimeout:", "onConnectionRedirect", "V", 0x1, NULL, NULL },
    { "onMessageWithData:withOffset:withLength:", "onMessage", "V", 0x1, NULL, NULL },
    { "onConnectionDie", NULL, "V", 0x1, NULL, NULL },
    { "initWithACManagerActor:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.network.mtp.actors.ManagerActor;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$id_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACManagerActor", "checkConnection" };
  static const J2ObjcClassInfo _ACManagerActor_$2 = { 2, "", "im.actor.core.network.mtp.actors", "ManagerActor", 0x8008, 4, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACManagerActor_$2;
}

@end

void ACManagerActor_$2_initWithACManagerActor_withInt_(ACManagerActor_$2 *self, ACManagerActor *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$id_ = capture$0;
  (void) NSObject_init(self);
}

ACManagerActor_$2 *new_ACManagerActor_$2_initWithACManagerActor_withInt_(ACManagerActor *outer$, jint capture$0) {
  ACManagerActor_$2 *self = [ACManagerActor_$2 alloc];
  ACManagerActor_$2_initWithACManagerActor_withInt_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_$2)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/actors/ManagerActor.java"

@implementation ACManagerActor_$3


#line 248
- (void)onConnectionCreatedWithConnection:(id<ARConnection>)connection {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACManagerActor_ConnectionCreated_initWithInt_withARConnection_(val$id_, connection)];
}


#line 253
- (void)onConnectionCreateError {
  [((ARActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ACManagerActor_ConnectionCreateFailure_init()];
}

- (instancetype)initWithACManagerActor:(ACManagerActor *)outer$
                               withInt:(jint)capture$0 {
  ACManagerActor_$3_initWithACManagerActor_withInt_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "onConnectionCreatedWithConnection:", "onConnectionCreated", "V", 0x1, NULL, NULL },
    { "onConnectionCreateError", NULL, "V", 0x1, NULL, NULL },
    { "initWithACManagerActor:withInt:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lim.actor.core.network.mtp.actors.ManagerActor;", NULL, NULL, .constantValue.asLong = 0 },
    { "val$id_", NULL, 0x1012, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "ACManagerActor", "checkConnection" };
  static const J2ObjcClassInfo _ACManagerActor_$3 = { 2, "", "im.actor.core.network.mtp.actors", "ManagerActor", 0x8008, 3, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_ACManagerActor_$3;
}

@end

void ACManagerActor_$3_initWithACManagerActor_withInt_(ACManagerActor_$3 *self, ACManagerActor *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$id_ = capture$0;
  (void) NSObject_init(self);
}

ACManagerActor_$3 *new_ACManagerActor_$3_initWithACManagerActor_withInt_(ACManagerActor *outer$, jint capture$0) {
  ACManagerActor_$3 *self = [ACManagerActor_$3 alloc];
  ACManagerActor_$3_initWithACManagerActor_withInt_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACManagerActor_$3)

#pragma clang diagnostic pop
