//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/entity/rpc/RpcFloodWait.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/network/mtp/entity/ProtoStruct.h"
#include "im/actor/core/network/mtp/entity/rpc/RpcFloodWait.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include <j2objc/java/io/IOException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACRpcFloodWait () {
 @public
  jint delay_;
}

@end

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/entity/rpc/RpcFloodWait.java"


#line 13
@implementation ACRpcFloodWait

+ (jbyte)HEADER {
  return ACRpcFloodWait_HEADER;
}


#line 18
- (instancetype)initWithARDataInput:(ARDataInput *)stream {
  ACRpcFloodWait_initWithARDataInput_(self, stream);
  return self;
}


#line 22
- (instancetype)initWithInt:(jint)delay {
  ACRpcFloodWait_initWithInt_(self, delay);
  return self;
}


#line 26
- (jint)getDelay {
  return delay_;
}


#line 31
- (jbyte)getHeader {
  return ACRpcFloodWait_HEADER;
}


#line 36
- (void)writeBodyWithARDataOutput:(ARDataOutput *)bs {
  [((ARDataOutput *) nil_chk(bs)) writeIntWithInt:delay_];
}


#line 41
- (void)readBodyWithARDataInput:(ARDataInput *)bs {
  delay_ = [((ARDataInput *) nil_chk(bs)) readInt];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARDataInput:", "RpcFloodWait", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "initWithInt:", "RpcFloodWait", NULL, 0x1, NULL, NULL },
    { "getDelay", NULL, "I", 0x1, NULL, NULL },
    { "getHeader", NULL, "B", 0x4, NULL, NULL },
    { "writeBodyWithARDataOutput:", "writeBody", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "readBodyWithARDataInput:", "readBody", "V", 0x4, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER", "HEADER", 0x19, "B", NULL, NULL, .constantValue.asChar = ACRpcFloodWait_HEADER },
    { "delay_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACRpcFloodWait = { 2, "RpcFloodWait", "im.actor.core.network.mtp.entity.rpc", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACRpcFloodWait;
}

@end


#line 18
void ACRpcFloodWait_initWithARDataInput_(ACRpcFloodWait *self, ARDataInput *stream) {
  (void) ACProtoStruct_initWithARDataInput_(self, stream);
}


#line 18
ACRpcFloodWait *new_ACRpcFloodWait_initWithARDataInput_(ARDataInput *stream) {
  ACRpcFloodWait *self = [ACRpcFloodWait alloc];
  ACRpcFloodWait_initWithARDataInput_(self, stream);
  return self;
}


#line 22
void ACRpcFloodWait_initWithInt_(ACRpcFloodWait *self, jint delay) {
  (void) ACProtoStruct_init(self);
  
#line 23
  self->delay_ = delay;
}


#line 22
ACRpcFloodWait *new_ACRpcFloodWait_initWithInt_(jint delay) {
  ACRpcFloodWait *self = [ACRpcFloodWait alloc];
  ACRpcFloodWait_initWithInt_(self, delay);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACRpcFloodWait)

#pragma clang diagnostic pop
