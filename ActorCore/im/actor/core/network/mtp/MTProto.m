//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/MTProto.java
//

#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/network/Endpoints.h"
#include "im/actor/core/network/NetworkState.h"
#include "im/actor/core/network/mtp/MTProto.h"
#include "im/actor/core/network/mtp/MTProtoCallback.h"
#include "im/actor/core/network/mtp/actors/ManagerActor.h"
#include "im/actor/core/network/mtp/actors/PusherActor.h"
#include "im/actor/core/network/mtp/actors/ReceiverActor.h"
#include "im/actor/core/network/mtp/entity/MTRpcRequest.h"
#include "im/actor/core/network/mtp/entity/ProtoStruct.h"
#include "im/actor/core/network/util/MTUids.h"
#include "im/actor/runtime/actors/ActorRef.h"
#include "im/actor/runtime/actors/messages/PoisonPill.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACMTProto () {
 @public
  jlong authId_;
  jlong sessionId_;
  ACEndpoints *endpoints_;
  id<ACMTProtoCallback> callback_;
  ARActorRef *receiver_;
  ARActorRef *manager_;
  ARActorRef *sender_;
  NSString *actorPath_;
  jboolean isEnableLog_;
  jint minDelay_;
  jint maxDelay_;
  jint maxFailureCount_;
  jboolean isClosed_;
}

@end

J2OBJC_FIELD_SETTER(ACMTProto, endpoints_, ACEndpoints *)
J2OBJC_FIELD_SETTER(ACMTProto, callback_, id<ACMTProtoCallback>)
J2OBJC_FIELD_SETTER(ACMTProto, receiver_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACMTProto, manager_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACMTProto, sender_, ARActorRef *)
J2OBJC_FIELD_SETTER(ACMTProto, actorPath_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/mtp/MTProto.java"


#line 18
@implementation ACMTProto


#line 37
- (instancetype)initWithLong:(jlong)authId
                    withLong:(jlong)sessionId
             withACEndpoints:(ACEndpoints *)endpoints
       withACMTProtoCallback:(id<ACMTProtoCallback>)callback
                 withBoolean:(jboolean)isEnableLog
                withNSString:(NSString *)basePath
                     withInt:(jint)minDelay
                     withInt:(jint)maxDelay
                     withInt:(jint)maxFailureCount {
  ACMTProto_initWithLong_withLong_withACEndpoints_withACMTProtoCallback_withBoolean_withNSString_withInt_withInt_withInt_(self, authId, sessionId, endpoints, callback, isEnableLog, basePath, minDelay, maxDelay, maxFailureCount);
  return self;
}


#line 61
- (id<ACMTProtoCallback>)getCallback {
  return callback_;
}

- (ACEndpoints *)getEndpoints {
  return endpoints_;
}

- (jlong)getAuthId {
  return authId_;
}

- (jlong)getSessionId {
  return sessionId_;
}

- (NSString *)getActorPath {
  return actorPath_;
}

- (jboolean)isEnableLog {
  return isEnableLog_;
}

- (jlong)sendRpcMessageWithACProtoStruct:(ACProtoStruct *)protoStruct {
  jlong mtId = ACMTUids_nextId();
  [((ARActorRef *) nil_chk(sender_)) sendWithId:new_ACPusherActor_SendMessage_initWithLong_withByteArray_(mtId, [new_ACMTRpcRequest_initWithByteArray_([((ACProtoStruct *) nil_chk(protoStruct)) toByteArray]) toByteArray])];
  return mtId;
}

- (void)cancelRpcWithLong:(jlong)mtId {
  [((ARActorRef *) nil_chk(sender_)) sendWithId:new_ACPusherActor_ForgetMessage_initWithLong_(mtId)];
}

- (void)onNetworkChangedWithACNetworkStateEnum:(ACNetworkStateEnum *)state {
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACManagerActor_NetworkChanged_initWithACNetworkStateEnum_(state)];
}

- (void)forceNetworkCheck {
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:new_ACManagerActor_ForceNetworkCheck_init()];
}

- (void)stopProto {
  [((ARActorRef *) nil_chk(self->sender_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  [((ARActorRef *) nil_chk(self->manager_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  [((ARActorRef *) nil_chk(self->receiver_)) sendWithId:JreLoadStatic(ARPoisonPill, INSTANCE_)];
  self->isClosed_ = true;
}

- (jint)getMinDelay {
  return minDelay_;
}

- (jint)getMaxDelay {
  return maxDelay_;
}

- (jint)getMaxFailureCount {
  return maxFailureCount_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withLong:withACEndpoints:withACMTProtoCallback:withBoolean:withNSString:withInt:withInt:withInt:", "MTProto", NULL, 0x1, NULL, NULL },
    { "getCallback", NULL, "Lim.actor.core.network.mtp.MTProtoCallback;", 0x1, NULL, NULL },
    { "getEndpoints", NULL, "Lim.actor.core.network.Endpoints;", 0x1, NULL, NULL },
    { "getAuthId", NULL, "J", 0x1, NULL, NULL },
    { "getSessionId", NULL, "J", 0x1, NULL, NULL },
    { "getActorPath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEnableLog", NULL, "Z", 0x1, NULL, NULL },
    { "sendRpcMessageWithACProtoStruct:", "sendRpcMessage", "J", 0x1, NULL, NULL },
    { "cancelRpcWithLong:", "cancelRpc", "V", 0x1, NULL, NULL },
    { "onNetworkChangedWithACNetworkStateEnum:", "onNetworkChanged", "V", 0x1, NULL, NULL },
    { "forceNetworkCheck", NULL, "V", 0x1, NULL, NULL },
    { "stopProto", NULL, "V", 0x1, NULL, NULL },
    { "getMinDelay", NULL, "I", 0x1, NULL, NULL },
    { "getMaxDelay", NULL, "I", 0x1, NULL, NULL },
    { "getMaxFailureCount", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "authId_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "sessionId_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "endpoints_", NULL, 0x12, "Lim.actor.core.network.Endpoints;", NULL, NULL, .constantValue.asLong = 0 },
    { "callback_", NULL, 0x12, "Lim.actor.core.network.mtp.MTProtoCallback;", NULL, NULL, .constantValue.asLong = 0 },
    { "receiver_", NULL, 0x12, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "manager_", NULL, 0x12, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "sender_", NULL, 0x12, "Lim.actor.runtime.actors.ActorRef;", NULL, NULL, .constantValue.asLong = 0 },
    { "actorPath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isEnableLog_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "minDelay_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDelay_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxFailureCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "isClosed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACMTProto = { 2, "MTProto", "im.actor.core.network.mtp", NULL, 0x1, 15, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACMTProto;
}

@end


#line 37
void ACMTProto_initWithLong_withLong_withACEndpoints_withACMTProtoCallback_withBoolean_withNSString_withInt_withInt_withInt_(ACMTProto *self, jlong authId, jlong sessionId, ACEndpoints *endpoints, id<ACMTProtoCallback> callback, jboolean isEnableLog, NSString *basePath, jint minDelay, jint maxDelay, jint maxFailureCount) {
  (void) NSObject_init(self);
  
#line 46
  self->authId_ = authId;
  self->sessionId_ = sessionId;
  self->endpoints_ = endpoints;
  self->callback_ = callback;
  self->actorPath_ = basePath;
  self->isEnableLog_ = isEnableLog;
  self->minDelay_ = minDelay;
  self->maxDelay_ = maxDelay;
  self->maxFailureCount_ = maxFailureCount;
  self->isClosed_ = false;
  self->manager_ = ACManagerActor_managerWithACMTProto_(self);
  self->sender_ = ACPusherActor_senderActorWithACMTProto_(self);
  self->receiver_ = ACReceiverActor_receiverWithACMTProto_(self);
}


#line 37
ACMTProto *new_ACMTProto_initWithLong_withLong_withACEndpoints_withACMTProtoCallback_withBoolean_withNSString_withInt_withInt_withInt_(jlong authId, jlong sessionId, ACEndpoints *endpoints, id<ACMTProtoCallback> callback, jboolean isEnableLog, NSString *basePath, jint minDelay, jint maxDelay, jint maxFailureCount) {
  ACMTProto *self = [ACMTProto alloc];
  ACMTProto_initWithLong_withLong_withACEndpoints_withACMTProtoCallback_withBoolean_withNSString_withInt_withInt_withInt_(self, authId, sessionId, endpoints, callback, isEnableLog, basePath, minDelay, maxDelay, maxFailureCount);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACMTProto)

#pragma clang diagnostic pop
