//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/RpcException.java
//

#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/network/RpcException.h"
#include <j2objc/java/lang/Exception.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACRpcException () {
 @public
  NSString *tag_;
  jint code_;
  NSString *message_;
  jboolean canTryAgain_;
  IOSByteArray *relatedData_;
}

@end

J2OBJC_FIELD_SETTER(ACRpcException, tag_, NSString *)
J2OBJC_FIELD_SETTER(ACRpcException, message_, NSString *)
J2OBJC_FIELD_SETTER(ACRpcException, relatedData_, IOSByteArray *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/network/RpcException.java"


#line 7
@implementation ACRpcException


#line 14
- (instancetype)initWithNSString:(NSString *)tag
                         withInt:(jint)code
                    withNSString:(NSString *)message
                     withBoolean:(jboolean)canTryAgain
                   withByteArray:(IOSByteArray *)relatedData {
  ACRpcException_initWithNSString_withInt_withNSString_withBoolean_withByteArray_(self, tag, code, message, canTryAgain, relatedData);
  return self;
}


#line 22
- (jboolean)isCanTryAgain {
  return canTryAgain_;
}

- (IOSByteArray *)getRelatedData {
  return relatedData_;
}

- (NSString *)getTag {
  return tag_;
}

- (jint)getCode {
  return code_;
}


#line 39
- (NSString *)getMessage {
  return message_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withNSString:withBoolean:withByteArray:", "RpcException", NULL, 0x1, NULL, NULL },
    { "isCanTryAgain", NULL, "Z", 0x1, NULL, NULL },
    { "getRelatedData", NULL, "[B", 0x1, NULL, NULL },
    { "getTag", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCode", NULL, "I", 0x1, NULL, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tag_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "code_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "message_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "canTryAgain_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "relatedData_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACRpcException = { 2, "RpcException", "im.actor.core.network", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACRpcException;
}

@end


#line 14
void ACRpcException_initWithNSString_withInt_withNSString_withBoolean_withByteArray_(ACRpcException *self, NSString *tag, jint code, NSString *message, jboolean canTryAgain, IOSByteArray *relatedData) {
  (void) JavaLangException_init(self);
  
#line 15
  self->tag_ = tag;
  self->code_ = code;
  self->message_ = message;
  self->canTryAgain_ = canTryAgain;
  self->relatedData_ = relatedData;
}


#line 14
ACRpcException *new_ACRpcException_initWithNSString_withInt_withNSString_withBoolean_withByteArray_(NSString *tag, jint code, NSString *message, jboolean canTryAgain, IOSByteArray *relatedData) {
  ACRpcException *self = [ACRpcException alloc];
  ACRpcException_initWithNSString_withInt_withNSString_withBoolean_withByteArray_(self, tag, code, message, canTryAgain, relatedData);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACRpcException)

#pragma clang diagnostic pop
