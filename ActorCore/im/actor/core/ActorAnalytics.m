//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/ActorAnalytics.java
//

#include "J2ObjC_source.h"
#include "im/actor/core/ActorAnalytics.h"
#include "im/actor/core/Messenger.h"
#include "im/actor/core/analytics/Event.h"
#include "im/actor/core/analytics/Page.h"
#include "im/actor/runtime/Log.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/ActorAnalytics.java"


#line 7
@implementation ACActorAnalytics

- (instancetype)initWithACMessenger:(ACMessenger *)messenger {
  ACActorAnalytics_initWithACMessenger_(self, messenger);
  return self;
}


#line 13
- (void)trackContentVisibleWithACPage:(ACPage *)page {
  ARLog_dWithNSString_withNSString_(@"ActorAnalytics", JreStrcat("$$$$", @"Content visible: ", [((ACPage *) nil_chk(page)) getContentType], @" #", [page getContentId]));
}

- (void)trackContentHiddenWithACPage:(ACPage *)page {
  ARLog_dWithNSString_withNSString_(@"ActorAnalytics", JreStrcat("$$$$", @"Content hidden: ", [((ACPage *) nil_chk(page)) getContentType], @" #", [page getContentId]));
}

- (void)trackEventWithACEvent:(ACEvent *)event {
  ARLog_dWithNSString_withNSString_(@"ActorAnalytics", JreStrcat("$$$$", @"Event: ", [((ACEvent *) nil_chk(event)) getActionType], @" #", [event getActionId]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithACMessenger:", "ActorAnalytics", NULL, 0x1, NULL, NULL },
    { "trackContentVisibleWithACPage:", "trackContentVisible", "V", 0x1, NULL, NULL },
    { "trackContentHiddenWithACPage:", "trackContentHidden", "V", 0x1, NULL, NULL },
    { "trackEventWithACEvent:", "trackEvent", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACActorAnalytics = { 2, "ActorAnalytics", "im.actor.core", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACActorAnalytics;
}

@end


#line 9
void ACActorAnalytics_initWithACMessenger_(ACActorAnalytics *self, ACMessenger *messenger) {
  (void) NSObject_init(self);
}


#line 9
ACActorAnalytics *new_ACActorAnalytics_initWithACMessenger_(ACMessenger *messenger) {
  ACActorAnalytics *self = [ACActorAnalytics alloc];
  ACActorAnalytics_initWithACMessenger_(self, messenger);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACActorAnalytics)

#pragma clang diagnostic pop
