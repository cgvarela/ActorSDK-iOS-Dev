//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/WrapperEntity.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/entity/WrapperEntity.h"
#include "im/actor/runtime/bser/Bser.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "java/io/IOException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACWrapperEntity () {
 @public
  jint recordField_;
  ARBserObject *wrapped_;
}

@end

J2OBJC_FIELD_SETTER(ACWrapperEntity, wrapped_, id)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/WrapperEntity.java"


#line 19
@implementation ACWrapperEntity


#line 26
- (instancetype)initWithInt:(jint)recordField
              withByteArray:(IOSByteArray *)data {
  ACWrapperEntity_initWithInt_withByteArray_(self, recordField, data);
  return self;
}


#line 36
- (instancetype)initWithInt:(jint)recordField
           withARBserObject:(ARBserObject *)wrapped {
  ACWrapperEntity_initWithInt_withARBserObject_(self, recordField, wrapped);
  return self;
}

- (instancetype)initWithInt:(jint)recordField {
  ACWrapperEntity_initWithInt_(self, recordField);
  return self;
}

- (id)getWrapped {
  return wrapped_;
}


#line 52
- (id)toWrapped {
  return wrapped_;
}

- (void)setWrappedWithARBserObject:(ARBserObject *)wrapped {
  self->wrapped_ = wrapped;
  [self applyWrappedWithARBserObject:wrapped];
}

- (void)applyWrappedWithARBserObject:(ARBserObject *)wrapped {
}


#line 65
- (id)createInstance {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 68
- (void)parseWithARBserValues:(ARBserValues *)values {
  IOSByteArray *rawWrapper = [((ARBserValues *) nil_chk(values)) optBytesWithInt:recordField_];
  if (rawWrapper != nil) {
    wrapped_ = ARBser_parseWithARBserObject_withByteArray_([self createInstance], rawWrapper);
    [self applyWrappedWithARBserObject:wrapped_];
  }
}


#line 77
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  [((ARBserWriter *) nil_chk(writer)) writeBytesWithInt:recordField_ withByteArray:[((ARBserObject *) nil_chk(wrapped_)) toByteArray]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withByteArray:", "WrapperEntity", NULL, 0x4, "Ljava.io.IOException;", NULL },
    { "initWithInt:withARBserObject:", "WrapperEntity", NULL, 0x4, NULL, "(ITT;)V" },
    { "initWithInt:", "WrapperEntity", NULL, 0x4, NULL, NULL },
    { "getWrapped", NULL, "TT;", 0x4, NULL, "()TT;" },
    { "toWrapped", NULL, "TT;", 0x1, NULL, "()TT;" },
    { "setWrappedWithARBserObject:", "setWrapped", "V", 0x4, NULL, "(TT;)V" },
    { "applyWrappedWithARBserObject:", "applyWrapped", "V", 0x4, NULL, "(TT;)V" },
    { "createInstance", NULL, "TT;", 0x404, NULL, "()TT;" },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "recordField_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "wrapped_", NULL, 0x2, "TT;", NULL, "TT;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACWrapperEntity = { 2, "WrapperEntity", "im.actor.core.entity", NULL, 0x401, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<T:Lim/actor/runtime/bser/BserObject;>Lim/actor/runtime/bser/BserObject;" };
  return &_ACWrapperEntity;
}

@end


#line 26
void ACWrapperEntity_initWithInt_withByteArray_(ACWrapperEntity *self, jint recordField, IOSByteArray *data) {
  (void) ARBserObject_init(self);
  
#line 27
  self->recordField_ = recordField;
  [self load__WithByteArray:data];
  
#line 31
  if (self->wrapped_ == nil) {
    @throw new_JavaIoIOException_initWithNSString_(@"Unable to deserialize wrapped object");
  }
}


#line 36
void ACWrapperEntity_initWithInt_withARBserObject_(ACWrapperEntity *self, jint recordField, ARBserObject *wrapped) {
  (void) ARBserObject_init(self);
  
#line 37
  self->recordField_ = recordField;
  self->wrapped_ = wrapped;
  [self applyWrappedWithARBserObject:wrapped];
}


#line 42
void ACWrapperEntity_initWithInt_(ACWrapperEntity *self, jint recordField) {
  (void) ARBserObject_init(self);
  
#line 43
  self->recordField_ = recordField;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACWrapperEntity)

#pragma clang diagnostic pop
