//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/Peer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/entity/Peer.h"
#include "im/actor/core/entity/PeerType.h"
#include "im/actor/runtime/bser/Bser.h"
#include "im/actor/runtime/bser/BserCreator.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "java/io/IOException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACPeer () {
 @public
  ACPeerTypeEnum *peerType_;
  jint peerId_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(ACPeer, peerType_, ACPeerTypeEnum *)

__attribute__((unused)) static void ACPeer_init(ACPeer *self);

__attribute__((unused)) static ACPeer *new_ACPeer_init() NS_RETURNS_RETAINED;

@interface ACPeer_$1 : NSObject < ARBserCreator >

- (ACPeer *)createInstance;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ACPeer_$1)

__attribute__((unused)) static void ACPeer_$1_init(ACPeer_$1 *self);

__attribute__((unused)) static ACPeer_$1 *new_ACPeer_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ACPeer_$1)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/Peer.java"

J2OBJC_INITIALIZED_DEFN(ACPeer)

id<ARBserCreator> ACPeer_CREATOR_;


#line 17
@implementation ACPeer

@synthesize peerType = peerType_;
@synthesize peerId = peerId_;

+ (id<ARBserCreator>)CREATOR {
  return ACPeer_CREATOR_;
}

+ (ACPeer *)fromBytesWithByteArray:(IOSByteArray *)data {
  return ACPeer_fromBytesWithByteArray_(data);
}

+ (ACPeer *)fromUniqueIdWithLong:(jlong)uid {
  return ACPeer_fromUniqueIdWithLong_(uid);
}


#line 43
+ (ACPeer *)userWithInt:(jint)uid {
  return ACPeer_userWithInt_(uid);
}

+ (ACPeer *)groupWithInt:(jint)gid {
  return ACPeer_groupWithInt_(gid);
}


#line 56
- (instancetype)initWithACPeerTypeEnum:(ACPeerTypeEnum *)peerType
                               withInt:(jint)peerId {
  ACPeer_initWithACPeerTypeEnum_withInt_(self, peerType, peerId);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 61
- (instancetype)init {
  ACPeer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 65
- (jlong)getUnuqueId {
  jint type;
  switch ([peerType_ ordinal]) {
    default:
    case ACPeerType_PRIVATE:
    type = 0;
    break;
    case ACPeerType_GROUP:
    type = 1;
    break;
  }
  return ((jlong) peerId_ & (jlong) 0xFFFFFFFFLL) + (JreLShift64(((jlong) type & (jlong) 0xFFFFFFFFLL), 32));
}

- (ACPeerTypeEnum *)getPeerType {
  return peerType_;
}

- (jint)getPeerId {
  return peerId_;
}


#line 88
- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self getClass] != [o getClass]) return false;
  
#line 92
  ACPeer *peer = (ACPeer *) check_class_cast(o, [ACPeer class]);
  
#line 94
  if (peerId_ != ((ACPeer *) nil_chk(peer))->peerId_) return false;
  if (peerType_ != peer->peerType_) return false;
  
#line 97
  return true;
}


#line 101
- (NSUInteger)hash {
  jint result = ((jint) [((ACPeerTypeEnum *) nil_chk(peerType_)) hash]);
  result = 31 * result + peerId_;
  return result;
}


#line 108
- (void)parseWithARBserValues:(ARBserValues *)values {
  peerId_ = [((ARBserValues *) nil_chk(values)) getIntWithInt:1];
  switch ([values getIntWithInt:2]) {
    default:
    case 1:
    peerType_ = JreLoadStatic(ACPeerTypeEnum, PRIVATE);
    break;
    case 3:
    peerType_ = JreLoadStatic(ACPeerTypeEnum, GROUP);
    break;
  }
}


#line 122
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  [((ARBserWriter *) nil_chk(writer)) writeIntWithInt:1 withInt:peerId_];
  switch ([peerType_ ordinal]) {
    default:
    case ACPeerType_PRIVATE:
    [writer writeIntWithInt:2 withInt:1];
    break;
    case ACPeerType_GROUP:
    [writer writeIntWithInt:2 withInt:3];
    break;
  }
}


#line 136
- (NSString *)description {
  return JreStrcat("$@$IC", @"{type:", peerType_, @", id:", peerId_, '}');
}

- (NSString *)toIdString {
  return JreStrcat("@CI", peerType_, '_', peerId_);
}

+ (void)initialize {
  if (self == [ACPeer class]) {
    ACPeer_CREATOR_ = new_ACPeer_$1_init();
    J2OBJC_SET_INITIALIZED(ACPeer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "fromBytesWithByteArray:", "fromBytes", "Lim.actor.core.entity.Peer;", 0x9, "Ljava.io.IOException;", NULL },
    { "fromUniqueIdWithLong:", "fromUniqueId", "Lim.actor.core.entity.Peer;", 0x9, NULL, NULL },
    { "userWithInt:", "user", "Lim.actor.core.entity.Peer;", 0x9, NULL, NULL },
    { "groupWithInt:", "group", "Lim.actor.core.entity.Peer;", 0x9, NULL, NULL },
    { "initWithACPeerTypeEnum:withInt:", "Peer", NULL, 0x1, NULL, NULL },
    { "init", "Peer", NULL, 0x2, NULL, NULL },
    { "getUnuqueId", NULL, "J", 0x1, NULL, NULL },
    { "getPeerType", NULL, "Lim.actor.core.entity.PeerType;", 0x1, NULL, NULL },
    { "getPeerId", NULL, "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toIdString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CREATOR_", NULL, 0x19, "Lim.actor.runtime.bser.BserCreator;", &ACPeer_CREATOR_, "Lim/actor/runtime/bser/BserCreator<Lim/actor/core/entity/Peer;>;", .constantValue.asLong = 0 },
    { "peerType_", NULL, 0x2, "Lim.actor.core.entity.PeerType;", NULL, NULL, .constantValue.asLong = 0 },
    { "peerId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACPeer = { 2, "Peer", "im.actor.core.entity", NULL, 0x1, 15, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACPeer;
}

@end


#line 26
ACPeer *ACPeer_fromBytesWithByteArray_(IOSByteArray *data) {
  ACPeer_initialize();
  
#line 27
  return ARBser_parseWithARBserObject_withByteArray_(new_ACPeer_init(), data);
}


#line 30
ACPeer *ACPeer_fromUniqueIdWithLong_(jlong uid) {
  ACPeer_initialize();
  
#line 31
  jint id_ = (jint) (uid & (jlong) 0xFFFFFFFFLL);
  jint type = (jint) ((JreRShift64(uid, 32)) & (jlong) 0xFFFFFFFFLL);
  
#line 34
  switch (type) {
    default:
    case 0:
    return new_ACPeer_initWithACPeerTypeEnum_withInt_(JreLoadStatic(ACPeerTypeEnum, PRIVATE), id_);
    case 1:
    return new_ACPeer_initWithACPeerTypeEnum_withInt_(JreLoadStatic(ACPeerTypeEnum, GROUP), id_);
  }
}


#line 43
ACPeer *ACPeer_userWithInt_(jint uid) {
  ACPeer_initialize();
  
#line 44
  return new_ACPeer_initWithACPeerTypeEnum_withInt_(JreLoadStatic(ACPeerTypeEnum, PRIVATE), uid);
}


#line 47
ACPeer *ACPeer_groupWithInt_(jint gid) {
  ACPeer_initialize();
  
#line 48
  return new_ACPeer_initWithACPeerTypeEnum_withInt_(JreLoadStatic(ACPeerTypeEnum, GROUP), gid);
}


#line 56
void ACPeer_initWithACPeerTypeEnum_withInt_(ACPeer *self, ACPeerTypeEnum *peerType, jint peerId) {
  (void) ARBserObject_init(self);
  
#line 57
  self->peerType_ = peerType;
  self->peerId_ = peerId;
}


#line 56
ACPeer *new_ACPeer_initWithACPeerTypeEnum_withInt_(ACPeerTypeEnum *peerType, jint peerId) {
  ACPeer *self = [ACPeer alloc];
  ACPeer_initWithACPeerTypeEnum_withInt_(self, peerType, peerId);
  return self;
}


#line 61
void ACPeer_init(ACPeer *self) {
  (void) ARBserObject_init(self);
}


#line 61
ACPeer *new_ACPeer_init() {
  ACPeer *self = [ACPeer alloc];
  ACPeer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACPeer)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/Peer.java"

@implementation ACPeer_$1


#line 21
- (ACPeer *)createInstance {
  return new_ACPeer_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACPeer_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createInstance", NULL, "Lim.actor.core.entity.Peer;", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _ACPeer_$1 = { 2, "", "im.actor.core.entity", "Peer", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Lim/actor/runtime/bser/BserCreator<Lim/actor/core/entity/Peer;>;" };
  return &_ACPeer_$1;
}

@end

void ACPeer_$1_init(ACPeer_$1 *self) {
  (void) NSObject_init(self);
}

ACPeer_$1 *new_ACPeer_$1_init() {
  ACPeer_$1 *self = [ACPeer_$1 alloc];
  ACPeer_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACPeer_$1)

#pragma clang diagnostic pop
