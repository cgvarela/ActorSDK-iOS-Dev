//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/FileReference.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/core/api/ApiFileLocation.h"
#include "im/actor/core/entity/FileReference.h"
#include "im/actor/core/entity/WrapperEntity.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "java/io/IOException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACFileReference_RECORD_ID 10

@interface ACFileReference () {
 @public
  jint fileSize_;
  NSString *fileName_;
}

@end

J2OBJC_FIELD_SETTER(ACFileReference, fileName_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ACFileReference, RECORD_ID, jint)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/FileReference.java"


#line 17
@implementation ACFileReference

@synthesize fileSize = fileSize_;
@synthesize fileName = fileName_;


#line 26
- (instancetype)initWithARApiFileLocation:(ARApiFileLocation *)fileLocation
                             withNSString:(NSString *)fileName
                                  withInt:(jint)fileSize {
  ACFileReference_initWithARApiFileLocation_withNSString_withInt_(self, fileLocation, fileName, fileSize);
  return self;
}


#line 32
- (instancetype)initWithByteArray:(IOSByteArray *)data {
  ACFileReference_initWithByteArray_(self, data);
  return self;
}


#line 36
- (ARApiFileLocation *)getFileLocation {
  return [self getWrapped];
}

- (jint)getFileSize {
  return fileSize_;
}

- (jlong)getFileId {
  return [((ARApiFileLocation *) nil_chk([self getWrapped])) getFileId];
}

- (jlong)getAccessHash {
  return [((ARApiFileLocation *) nil_chk([self getWrapped])) getAccessHash];
}

- (NSString *)getFileName {
  return fileName_;
}


#line 57
- (void)parseWithARBserValues:(ARBserValues *)values {
  
#line 59
  if (![((ARBserValues *) nil_chk(values)) getBoolWithInt:5 withBoolean:false]) {
    jlong fileId = [values getLongWithInt:1];
    jlong accessHash = [values getLongWithInt:2];
    [self setWrappedWithARBserObject:new_ARApiFileLocation_initWithLong_withLong_(fileId, accessHash)];
  }
  
#line 66
  [super parseWithARBserValues:values];
  
#line 68
  fileSize_ = [values getIntWithInt:3];
  fileName_ = [values getStringWithInt:4];
}


#line 73
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  
#line 75
  [((ARBserWriter *) nil_chk(writer)) writeBoolWithInt:5 withBoolean:true];
  [writer writeIntWithInt:3 withInt:fileSize_];
  [writer writeStringWithInt:4 withNSString:fileName_];
  
#line 80
  [super serializeWithARBserWriter:writer];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self getClass] != [o getClass]) return false;
  
#line 88
  ACFileReference *that = (ACFileReference *) check_class_cast(o, [ACFileReference class]);
  
#line 90
  if ([((ARApiFileLocation *) nil_chk([self getWrapped])) getFileId] != [((ARApiFileLocation *) nil_chk([((ACFileReference *) nil_chk(that)) getWrapped])) getFileId]) return false;
  
#line 92
  return true;
}


#line 96
- (NSUInteger)hash {
  return (jint) ([((ARApiFileLocation *) nil_chk([self getWrapped])) getFileId] ^ (JreURShift64([((ARApiFileLocation *) nil_chk([self getWrapped])) getFileId], 32)));
}


#line 102
- (ARApiFileLocation *)createInstance {
  return new_ARApiFileLocation_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithARApiFileLocation:withNSString:withInt:", "FileReference", NULL, 0x1, NULL, NULL },
    { "initWithByteArray:", "FileReference", NULL, 0x1, "Ljava.io.IOException;", NULL },
    { "getFileLocation", NULL, "Lim.actor.core.api.ApiFileLocation;", 0x1, NULL, NULL },
    { "getFileSize", NULL, "I", 0x1, NULL, NULL },
    { "getFileId", NULL, "J", 0x1, NULL, NULL },
    { "getAccessHash", NULL, "J", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "createInstance", NULL, "Lim.actor.core.api.ApiFileLocation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RECORD_ID", "RECORD_ID", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACFileReference_RECORD_ID },
    { "fileSize_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lim.actor.core.api.ApiFileLocation;"};
  static const J2ObjcClassInfo _ACFileReference = { 2, "FileReference", "im.actor.core.entity", NULL, 0x1, 12, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Lim/actor/core/entity/WrapperEntity<Lim/actor/core/api/ApiFileLocation;>;" };
  return &_ACFileReference;
}

@end


#line 26
void ACFileReference_initWithARApiFileLocation_withNSString_withInt_(ACFileReference *self, ARApiFileLocation *fileLocation, NSString *fileName, jint fileSize) {
  (void) ACWrapperEntity_initWithInt_withARBserObject_(self, ACFileReference_RECORD_ID, fileLocation);
  self->fileSize_ = fileSize;
  self->fileName_ = fileName;
}


#line 26
ACFileReference *new_ACFileReference_initWithARApiFileLocation_withNSString_withInt_(ARApiFileLocation *fileLocation, NSString *fileName, jint fileSize) {
  ACFileReference *self = [ACFileReference alloc];
  ACFileReference_initWithARApiFileLocation_withNSString_withInt_(self, fileLocation, fileName, fileSize);
  return self;
}

void ACFileReference_initWithByteArray_(ACFileReference *self, IOSByteArray *data) {
  (void) ACWrapperEntity_initWithInt_withByteArray_(self, ACFileReference_RECORD_ID, data);
}


#line 32
ACFileReference *new_ACFileReference_initWithByteArray_(IOSByteArray *data) {
  ACFileReference *self = [ACFileReference alloc];
  ACFileReference_initWithByteArray_(self, data);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACFileReference)

#pragma clang diagnostic pop
