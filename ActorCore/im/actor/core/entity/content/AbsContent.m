//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/content/AbsContent.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSObjectArray.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiDocumentEx.h"
#include "im/actor/core/api/ApiDocumentExPhoto.h"
#include "im/actor/core/api/ApiDocumentExVideo.h"
#include "im/actor/core/api/ApiDocumentMessage.h"
#include "im/actor/core/api/ApiJsonMessage.h"
#include "im/actor/core/api/ApiMessage.h"
#include "im/actor/core/api/ApiServiceEx.h"
#include "im/actor/core/api/ApiServiceExChangedAvatar.h"
#include "im/actor/core/api/ApiServiceExChangedTitle.h"
#include "im/actor/core/api/ApiServiceExContactRegistered.h"
#include "im/actor/core/api/ApiServiceExGroupCreated.h"
#include "im/actor/core/api/ApiServiceExUserInvited.h"
#include "im/actor/core/api/ApiServiceExUserJoined.h"
#include "im/actor/core/api/ApiServiceExUserKicked.h"
#include "im/actor/core/api/ApiServiceExUserLeft.h"
#include "im/actor/core/api/ApiServiceMessage.h"
#include "im/actor/core/api/ApiTextMessage.h"
#include "im/actor/core/entity/content/AbsContent.h"
#include "im/actor/core/entity/content/BannerContent.h"
#include "im/actor/core/entity/content/ContentConverter.h"
#include "im/actor/core/entity/content/DocumentContent.h"
#include "im/actor/core/entity/content/PhotoContent.h"
#include "im/actor/core/entity/content/ServiceContent.h"
#include "im/actor/core/entity/content/ServiceGroupAvatarChanged.h"
#include "im/actor/core/entity/content/ServiceGroupCreated.h"
#include "im/actor/core/entity/content/ServiceGroupTitleChanged.h"
#include "im/actor/core/entity/content/ServiceGroupUserInvited.h"
#include "im/actor/core/entity/content/ServiceGroupUserJoined.h"
#include "im/actor/core/entity/content/ServiceGroupUserKicked.h"
#include "im/actor/core/entity/content/ServiceGroupUserLeave.h"
#include "im/actor/core/entity/content/ServiceUserRegistered.h"
#include "im/actor/core/entity/content/TextContent.h"
#include "im/actor/core/entity/content/UnsupportedContent.h"
#include "im/actor/core/entity/content/VideoContent.h"
#include "im/actor/core/entity/content/internal/AbsContentContainer.h"
#include "im/actor/core/entity/content/internal/AbsLocalContent.h"
#include "im/actor/core/entity/content/internal/ContentLocalContainer.h"
#include "im/actor/core/entity/content/internal/ContentRemoteContainer.h"
#include "im/actor/core/entity/content/internal/LocalDocument.h"
#include "im/actor/core/entity/content/internal/LocalPhoto.h"
#include "im/actor/core/entity/content/internal/LocalVideo.h"
#include "im/actor/runtime/bser/BserParser.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include "im/actor/runtime/json/JSONObject.h"
#include <j2objc/java/io/IOException.h>
#include <j2objc/java/lang/Exception.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ACAbsContent () {
 @public
  ACAbsContentContainer *contentContainer_;
}

@end

J2OBJC_FIELD_SETTER(ACAbsContent, contentContainer_, ACAbsContentContainer *)

static IOSObjectArray *ACAbsContent_converters_;
J2OBJC_STATIC_FIELD_GETTER(ACAbsContent, converters_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(ACAbsContent, converters_, IOSObjectArray *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/content/AbsContent.java"

J2OBJC_INITIALIZED_DEFN(ACAbsContent)


#line 41
@implementation ACAbsContent


#line 45
+ (void)registerConverterWithACContentConverter:(id<ACContentConverter>)contentConverter {
  ACAbsContent_registerConverterWithACContentConverter_(contentConverter);
}


#line 54
+ (IOSByteArray *)serializeWithACAbsContent:(ACAbsContent *)content {
  return ACAbsContent_serializeWithACAbsContent_(content);
}


#line 64
+ (ACAbsContent *)fromMessageWithARApiMessage:(ARApiMessage *)message {
  return ACAbsContent_fromMessageWithARApiMessage_(message);
}

+ (ACAbsContent *)parseWithByteArray:(IOSByteArray *)data {
  return ACAbsContent_parseWithByteArray_(data);
}


#line 80
+ (ACAbsContent *)convertDataWithACAbsContentContainer:(ACAbsContentContainer *)container {
  return ACAbsContent_convertDataWithACAbsContentContainer_(container);
}


#line 162
- (instancetype)initWithACContentRemoteContainer:(ACContentRemoteContainer *)contentContainer {
  ACAbsContent_initWithACContentRemoteContainer_(self, contentContainer);
  return self;
}


#line 166
- (instancetype)initWithACContentLocalContainer:(ACContentLocalContainer *)contentContainer {
  ACAbsContent_initWithACContentLocalContainer_(self, contentContainer);
  return self;
}


#line 170
- (ACAbsContentContainer *)getContentContainer {
  return contentContainer_;
}

+ (void)initialize {
  if (self == [ACAbsContent class]) {
    ACAbsContent_converters_ = [IOSObjectArray newArrayWithLength:
#line 43
    0 type:ACContentConverter_class_()];
    J2OBJC_SET_INITIALIZED(ACAbsContent)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "registerConverterWithACContentConverter:", "registerConverter", "V", 0x9, NULL, NULL },
    { "serializeWithACAbsContent:", "serialize", "[B", 0x9, "Ljava.io.IOException;", NULL },
    { "fromMessageWithARApiMessage:", "fromMessage", "Lim.actor.core.entity.content.AbsContent;", 0x9, "Ljava.io.IOException;", NULL },
    { "parseWithByteArray:", "parse", "Lim.actor.core.entity.content.AbsContent;", 0x9, "Ljava.io.IOException;", NULL },
    { "convertDataWithACAbsContentContainer:", "convertData", "Lim.actor.core.entity.content.AbsContent;", 0xc, "Ljava.io.IOException;", NULL },
    { "initWithACContentRemoteContainer:", "AbsContent", NULL, 0x1, NULL, NULL },
    { "initWithACContentLocalContainer:", "AbsContent", NULL, 0x1, NULL, NULL },
    { "getContentContainer", NULL, "Lim.actor.core.entity.content.internal.AbsContentContainer;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "converters_", NULL, 0xa, "[Lim.actor.core.entity.content.ContentConverter;", &ACAbsContent_converters_, NULL, .constantValue.asLong = 0 },
    { "contentContainer_", NULL, 0x2, "Lim.actor.core.entity.content.internal.AbsContentContainer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ACAbsContent = { 2, "AbsContent", "im.actor.core.entity.content", NULL, 0x401, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACAbsContent;
}

@end


#line 45
void ACAbsContent_registerConverterWithACContentConverter_(id<ACContentConverter> contentConverter) {
  ACAbsContent_initialize();
  
#line 46
  IOSObjectArray *nConverters = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(ACAbsContent_converters_))->size_ + 1 type:ACContentConverter_class_()];
  for (jint i = 0; i < ACAbsContent_converters_->size_; i++) {
    (void) IOSObjectArray_Set(nConverters, i, IOSObjectArray_Get(ACAbsContent_converters_, i));
  }
  (void) IOSObjectArray_Set(nConverters, nConverters->size_ - 1, contentConverter);
  ACAbsContent_converters_ = nConverters;
}


#line 54
IOSByteArray *ACAbsContent_serializeWithACAbsContent_(ACAbsContent *content) {
  ACAbsContent_initialize();
  
#line 55
  ARDataOutput *dataOutput = new_ARDataOutput_init();
  ARBserWriter *writer = new_ARBserWriter_initWithARDataOutput_(dataOutput);
  
#line 58
  [writer writeBoolWithInt:32 withBoolean:true];
  
#line 60
  [writer writeBytesWithInt:33 withByteArray:[((ACAbsContentContainer *) nil_chk([((ACAbsContent *) nil_chk(content)) getContentContainer])) buildContainer]];
  return [dataOutput toByteArray];
}


#line 64
ACAbsContent *ACAbsContent_fromMessageWithARApiMessage_(ARApiMessage *message) {
  ACAbsContent_initialize();
  
#line 65
  return ACAbsContent_convertDataWithACAbsContentContainer_(new_ACContentRemoteContainer_initWithARApiMessage_(message));
}


#line 68
ACAbsContent *ACAbsContent_parseWithByteArray_(IOSByteArray *data) {
  ACAbsContent_initialize();
  
#line 69
  ARBserValues *reader = new_ARBserValues_initWithARSparseArray_(ARBserParser_deserializeWithARDataInput_(new_ARDataInput_initWithByteArray_(data)));
  ACAbsContentContainer *container;
  
#line 72
  if ([reader getBoolWithInt:32 withBoolean:false]) {
    container = ACAbsContentContainer_loadContainerWithByteArray_([reader getBytesWithInt:33]);
  }
  else {
    
#line 75
    @throw new_JavaIoIOException_initWithNSString_(@"Unsupported obsolete format");
  }
  return ACAbsContent_convertDataWithACAbsContentContainer_(container);
}


#line 80
ACAbsContent *ACAbsContent_convertDataWithACAbsContentContainer_(ACAbsContentContainer *container) {
  ACAbsContent_initialize();
  {
    IOSObjectArray *a__ = ACAbsContent_converters_;
    id<ACContentConverter> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<ACContentConverter> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<ACContentConverter> converter = *b__++;
      
#line 84
      @try {
        ACAbsContent *res = [((id<ACContentConverter>) nil_chk(converter)) convertWithACAbsContentContainer:container];
        if (res != nil) {
          return res;
        }
      }
      @catch (
#line 89
      JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
    }
  }
  if ([container isKindOfClass:[ACContentLocalContainer class]]) {
    ACContentLocalContainer *localContainer = (ACContentLocalContainer *) check_class_cast(container, [ACContentLocalContainer class]);
    ACAbsLocalContent *content = [((ACContentLocalContainer *) nil_chk(((ACContentLocalContainer *) check_class_cast(container, [ACContentLocalContainer class])))) getContent];
    if ([content isKindOfClass:[ACLocalPhoto class]]) {
      return new_ACPhotoContent_initWithACContentLocalContainer_(localContainer);
    }
    else
#line 99
    if ([content isKindOfClass:[ACLocalVideo class]]) {
      return new_ACVideoContent_initWithACContentLocalContainer_(localContainer);
    }
    else
#line 101
    if ([content isKindOfClass:[ACLocalDocument class]]) {
      return new_ACDocumentContent_initWithACContentLocalContainer_(localContainer);
    }
    else {
      
#line 104
      @throw new_JavaIoIOException_initWithNSString_(@"Unknown type");
    }
  }
  else
#line 106
  if ([container isKindOfClass:[ACContentRemoteContainer class]]) {
    ACContentRemoteContainer *remoteContainer = (ACContentRemoteContainer *) check_class_cast(container, [ACContentRemoteContainer class]);
    ARApiMessage *content = [((ACContentRemoteContainer *) nil_chk(((ACContentRemoteContainer *) check_class_cast(container, [ACContentRemoteContainer class])))) getMessage];
    @try {
      if ([content isKindOfClass:[ARApiDocumentMessage class]]) {
        ARApiDocumentMessage *d = (ARApiDocumentMessage *) check_class_cast(content, [ARApiDocumentMessage class]);
        if ([[((ARApiDocumentMessage *) nil_chk(d)) getExt] isKindOfClass:[ARApiDocumentExPhoto class]]) {
          return new_ACPhotoContent_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 114
        if ([[d getExt] isKindOfClass:[ARApiDocumentExVideo class]]) {
          return new_ACVideoContent_initWithACContentRemoteContainer_(remoteContainer);
        }
        else {
          
#line 117
          return new_ACDocumentContent_initWithACContentRemoteContainer_(remoteContainer);
        }
      }
      else
#line 119
      if ([content isKindOfClass:[ARApiTextMessage class]]) {
        return new_ACTextContent_initWithACContentRemoteContainer_(remoteContainer);
      }
      else
#line 121
      if ([content isKindOfClass:[ARApiServiceMessage class]]) {
        ARApiServiceEx *ext = [((ARApiServiceMessage *) nil_chk(((ARApiServiceMessage *) check_class_cast(content, [ARApiServiceMessage class])))) getExt];
        if ([ext isKindOfClass:[ARApiServiceExContactRegistered class]]) {
          return new_ACServiceUserRegistered_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 125
        if ([ext isKindOfClass:[ARApiServiceExChangedTitle class]]) {
          return new_ACServiceGroupTitleChanged_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 127
        if ([ext isKindOfClass:[ARApiServiceExChangedAvatar class]]) {
          return new_ACServiceGroupAvatarChanged_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 129
        if ([ext isKindOfClass:[ARApiServiceExGroupCreated class]]) {
          return new_ACServiceGroupCreated_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 131
        if ([ext isKindOfClass:[ARApiServiceExUserInvited class]]) {
          return new_ACServiceGroupUserInvited_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 133
        if ([ext isKindOfClass:[ARApiServiceExUserKicked class]]) {
          return new_ACServiceGroupUserKicked_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 135
        if ([ext isKindOfClass:[ARApiServiceExUserLeft class]]) {
          return new_ACServiceGroupUserLeave_initWithACContentRemoteContainer_(remoteContainer);
        }
        else
#line 137
        if ([ext isKindOfClass:[ARApiServiceExUserJoined class]]) {
          return new_ACServiceGroupUserJoined_initWithACContentRemoteContainer_(remoteContainer);
        }
        else {
          
#line 140
          return new_ACServiceContent_initWithACContentRemoteContainer_(remoteContainer);
        }
      }
      else
#line 142
      if ([content isKindOfClass:[ARApiJsonMessage class]]) {
        ARApiJsonMessage *json = (ARApiJsonMessage *) check_class_cast(content, [ARApiJsonMessage class]);
        ARJSONObject *object = new_ARJSONObject_initWithNSString_([((ARApiJsonMessage *) nil_chk(json)) getRawJson]);
        if ([((NSString *) nil_chk([object getStringWithNSString:@"dataType"])) isEqual:@"banner"]) {
          return new_ACBannerContent_initWithACContentRemoteContainer_(remoteContainer);
        }
      }
    }
    @catch (
#line 149
    JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    
#line 154
    return new_ACUnsupportedContent_initWithACContentRemoteContainer_(remoteContainer);
  }
  else {
    
#line 156
    @throw new_JavaIoIOException_initWithNSString_(@"Unknown type");
  }
}


#line 162
void ACAbsContent_initWithACContentRemoteContainer_(ACAbsContent *self, ACContentRemoteContainer *contentContainer) {
  (void) NSObject_init(self);
  
#line 163
  self->contentContainer_ = contentContainer;
}


#line 166
void ACAbsContent_initWithACContentLocalContainer_(ACAbsContent *self, ACContentLocalContainer *contentContainer) {
  (void) NSObject_init(self);
  
#line 167
  self->contentContainer_ = contentContainer;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACAbsContent)

#pragma clang diagnostic pop
