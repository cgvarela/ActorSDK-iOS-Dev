//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/content/internal/AbsContentContainer.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiMessage.h"
#include "im/actor/core/entity/content/internal/AbsContentContainer.h"
#include "im/actor/core/entity/content/internal/AbsLocalContent.h"
#include "im/actor/core/entity/content/internal/ContentLocalContainer.h"
#include "im/actor/core/entity/content/internal/ContentRemoteContainer.h"
#include "im/actor/runtime/bser/BserParser.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "im/actor/runtime/bser/DataInput.h"
#include "im/actor/runtime/bser/DataOutput.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include <j2objc/java/io/IOException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define ACAbsContentContainer_TYPE_LOCAL 0
#define ACAbsContentContainer_TYPE_REMOTE 1

J2OBJC_STATIC_FIELD_GETTER(ACAbsContentContainer, TYPE_LOCAL, jint)

J2OBJC_STATIC_FIELD_GETTER(ACAbsContentContainer, TYPE_REMOTE, jint)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/entity/content/internal/AbsContentContainer.java"


#line 16
@implementation ACAbsContentContainer


#line 20
+ (ACAbsContentContainer *)loadContainerWithByteArray:(IOSByteArray *)data {
  return ACAbsContentContainer_loadContainerWithByteArray_(data);
}


#line 33
- (IOSByteArray *)buildContainer {
  ARDataOutput *res = new_ARDataOutput_init();
  ARBserWriter *writer = new_ARBserWriter_initWithARDataOutput_(res);
  if ([self isKindOfClass:[ACContentLocalContainer class]]) {
    [writer writeIntWithInt:1 withInt:ACAbsContentContainer_TYPE_LOCAL];
    [writer writeBytesWithInt:2 withByteArray:[((ACAbsLocalContent *) nil_chk([((ACContentLocalContainer *) check_class_cast(self, [ACContentLocalContainer class])) getContent])) buildContainer]];
  }
  else
#line 39
  if ([self isKindOfClass:[ACContentRemoteContainer class]]) {
    [writer writeIntWithInt:1 withInt:ACAbsContentContainer_TYPE_REMOTE];
    [writer writeBytesWithInt:2 withByteArray:[((ARApiMessage *) nil_chk([((ACContentRemoteContainer *) check_class_cast(self, [ACContentRemoteContainer class])) getMessage])) buildContainer]];
  }
  else {
    
#line 43
    @throw new_JavaIoIOException_initWithNSString_(@"Unknown type");
  }
  
#line 46
  return [res toByteArray];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ACAbsContentContainer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "loadContainerWithByteArray:", "loadContainer", "Lim.actor.core.entity.content.internal.AbsContentContainer;", 0x9, "Ljava.io.IOException;", NULL },
    { "buildContainer", NULL, "[B", 0x1, "Ljava.io.IOException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_LOCAL", "TYPE_LOCAL", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACAbsContentContainer_TYPE_LOCAL },
    { "TYPE_REMOTE", "TYPE_REMOTE", 0x1a, "I", NULL, NULL, .constantValue.asInt = ACAbsContentContainer_TYPE_REMOTE },
  };
  static const J2ObjcClassInfo _ACAbsContentContainer = { 2, "AbsContentContainer", "im.actor.core.entity.content.internal", NULL, 0x401, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ACAbsContentContainer;
}

@end


#line 20
ACAbsContentContainer *ACAbsContentContainer_loadContainerWithByteArray_(IOSByteArray *data) {
  ACAbsContentContainer_initialize();
  
#line 21
  ARBserValues *values = new_ARBserValues_initWithARSparseArray_(ARBserParser_deserializeWithARDataInput_(new_ARDataInput_initWithByteArray_(data)));
  jint type = [values getIntWithInt:1];
  IOSByteArray *content = [values getBytesWithInt:2];
  if (type == ACAbsContentContainer_TYPE_LOCAL) {
    return new_ACContentLocalContainer_initWithACAbsLocalContent_(ACAbsLocalContent_loadContainerWithByteArray_(content));
  }
  else
#line 26
  if (type == ACAbsContentContainer_TYPE_REMOTE) {
    return new_ACContentRemoteContainer_initWithARApiMessage_(ARApiMessage_fromBytesWithByteArray_(content));
  }
  else {
    
#line 29
    @throw new_JavaIoIOException_initWithNSString_(@"Unknown type");
  }
}

void ACAbsContentContainer_init(ACAbsContentContainer *self) {
  (void) NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ACAbsContentContainer)

#pragma clang diagnostic pop
