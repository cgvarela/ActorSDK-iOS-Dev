//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/rpc/RequestCommitFileUpload.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/rpc/RequestCommitFileUpload.h"
#include "im/actor/core/network/parser/Request.h"
#include "im/actor/runtime/bser/Bser.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include <j2objc/java/io/IOException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARRequestCommitFileUpload () {
 @public
  IOSByteArray *uploadKey_;
  NSString *fileName_;
}

@end

J2OBJC_FIELD_SETTER(ARRequestCommitFileUpload, uploadKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ARRequestCommitFileUpload, fileName_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/rpc/RequestCommitFileUpload.java"


#line 18
@implementation ARRequestCommitFileUpload

+ (jint)HEADER {
  return ARRequestCommitFileUpload_HEADER;
}


#line 21
+ (ARRequestCommitFileUpload *)fromBytesWithByteArray:(IOSByteArray *)data {
  return ARRequestCommitFileUpload_fromBytesWithByteArray_(data);
}


#line 28
- (instancetype)initWithByteArray:(IOSByteArray *)uploadKey
                     withNSString:(NSString *)fileName {
  ARRequestCommitFileUpload_initWithByteArray_withNSString_(self, uploadKey, fileName);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 33
- (instancetype)init {
  ARRequestCommitFileUpload_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 38
- (IOSByteArray *)getUploadKey {
  return self->uploadKey_;
}


#line 43
- (NSString *)getFileName {
  return self->fileName_;
}


#line 48
- (void)parseWithARBserValues:(ARBserValues *)values {
  self->uploadKey_ = [((ARBserValues *) nil_chk(values)) getBytesWithInt:1];
  self->fileName_ = [values getStringWithInt:2];
}


#line 54
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  if (self->uploadKey_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [((ARBserWriter *) nil_chk(writer)) writeBytesWithInt:1 withByteArray:self->uploadKey_];
  if (self->fileName_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [writer writeStringWithInt:2 withNSString:self->fileName_];
}


#line 66
- (NSString *)description {
  NSString *res = @"rpc CommitFileUpload{";
  (void) JreStrAppendStrong(&res, "$", @"}");
  return res;
}


#line 73
- (jint)getHeaderKey {
  return ARRequestCommitFileUpload_HEADER;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "fromBytesWithByteArray:", "fromBytes", "Lim.actor.core.api.rpc.RequestCommitFileUpload;", 0x9, "Ljava.io.IOException;", NULL },
    { "initWithByteArray:withNSString:", "RequestCommitFileUpload", NULL, 0x1, NULL, NULL },
    { "init", "RequestCommitFileUpload", NULL, 0x1, NULL, NULL },
    { "getUploadKey", NULL, "[B", 0x1, NULL, NULL },
    { "getFileName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getHeaderKey", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER", "HEADER", 0x19, "I", NULL, NULL, .constantValue.asInt = ARRequestCommitFileUpload_HEADER },
    { "uploadKey_", NULL, 0x2, "[B", NULL, NULL, .constantValue.asLong = 0 },
    { "fileName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lim.actor.core.api.rpc.ResponseCommitFileUpload;"};
  static const J2ObjcClassInfo _ARRequestCommitFileUpload = { 2, "RequestCommitFileUpload", "im.actor.core.api.rpc", NULL, 0x1, 9, methods, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Lim/actor/core/network/parser/Request<Lim/actor/core/api/rpc/ResponseCommitFileUpload;>;" };
  return &_ARRequestCommitFileUpload;
}

@end


#line 21
ARRequestCommitFileUpload *ARRequestCommitFileUpload_fromBytesWithByteArray_(IOSByteArray *data) {
  ARRequestCommitFileUpload_initialize();
  
#line 22
  return ARBser_parseWithARBserObject_withByteArray_(new_ARRequestCommitFileUpload_init(), data);
}

void ARRequestCommitFileUpload_initWithByteArray_withNSString_(ARRequestCommitFileUpload *self, IOSByteArray *uploadKey, NSString *fileName) {
  (void) ACRequest_init(self);
  
#line 29
  self->uploadKey_ = uploadKey;
  self->fileName_ = fileName;
}


#line 28
ARRequestCommitFileUpload *new_ARRequestCommitFileUpload_initWithByteArray_withNSString_(IOSByteArray *uploadKey, NSString *fileName) {
  ARRequestCommitFileUpload *self = [ARRequestCommitFileUpload alloc];
  ARRequestCommitFileUpload_initWithByteArray_withNSString_(self, uploadKey, fileName);
  return self;
}


#line 33
void ARRequestCommitFileUpload_init(ARRequestCommitFileUpload *self) {
  (void) ACRequest_init(self);
}


#line 33
ARRequestCommitFileUpload *new_ARRequestCommitFileUpload_init() {
  ARRequestCommitFileUpload *self = [ARRequestCommitFileUpload alloc];
  ARRequestCommitFileUpload_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARRequestCommitFileUpload)

#pragma clang diagnostic pop
