//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiTextExMarkdown.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/core/api/ApiTextExMarkdown.h"
#include "im/actor/core/api/ApiTextMessageEx.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include "java/io/IOException.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARApiTextExMarkdown () {
 @public
  NSString *markdown_;
}

@end

J2OBJC_FIELD_SETTER(ARApiTextExMarkdown, markdown_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiTextExMarkdown.java"


#line 17
@implementation ARApiTextExMarkdown


#line 21
- (instancetype)initWithNSString:(NSString *)markdown {
  ARApiTextExMarkdown_initWithNSString_(self, markdown);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 25
- (instancetype)init {
  ARApiTextExMarkdown_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 29
- (jint)getHeader {
  return 1;
}


#line 34
- (NSString *)getMarkdown {
  return self->markdown_;
}


#line 39
- (void)parseWithARBserValues:(ARBserValues *)values {
  self->markdown_ = [((ARBserValues *) nil_chk(values)) getStringWithInt:2];
  if ([values hasRemaining]) {
    [self setUnmappedObjectsWithARSparseArray:[values buildRemaining]];
  }
}


#line 47
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  if (self->markdown_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [((ARBserWriter *) nil_chk(writer)) writeStringWithInt:2 withNSString:self->markdown_];
  if ([self getUnmappedObjects] != nil) {
    ARSparseArray *unmapped = [self getUnmappedObjects];
    for (jint i = 0; i < [((ARSparseArray *) nil_chk(unmapped)) size]; i++) {
      jint key = [unmapped keyAtWithInt:i];
      [writer writeUnmappedWithInt:key withId:[unmapped getWithInt:key]];
    }
  }
}


#line 62
- (NSString *)description {
  NSString *res = @"struct TextExMarkdown{";
  (void) JreStrAppendStrong(&res, "$$", @"markdown=", self->markdown_);
  (void) JreStrAppendStrong(&res, "$", @"}");
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "ApiTextExMarkdown", NULL, 0x1, NULL, NULL },
    { "init", "ApiTextExMarkdown", NULL, 0x1, NULL, NULL },
    { "getHeader", NULL, "I", 0x1, NULL, NULL },
    { "getMarkdown", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "markdown_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARApiTextExMarkdown = { 2, "ApiTextExMarkdown", "im.actor.core.api", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARApiTextExMarkdown;
}

@end


#line 21
void ARApiTextExMarkdown_initWithNSString_(ARApiTextExMarkdown *self, NSString *markdown) {
  (void) ARApiTextMessageEx_init(self);
  
#line 22
  self->markdown_ = markdown;
}


#line 21
ARApiTextExMarkdown *new_ARApiTextExMarkdown_initWithNSString_(NSString *markdown) {
  ARApiTextExMarkdown *self = [ARApiTextExMarkdown alloc];
  ARApiTextExMarkdown_initWithNSString_(self, markdown);
  return self;
}


#line 25
void ARApiTextExMarkdown_init(ARApiTextExMarkdown *self) {
  (void) ARApiTextMessageEx_init(self);
}


#line 25
ARApiTextExMarkdown *new_ARApiTextExMarkdown_init() {
  ARApiTextExMarkdown *self = [ARApiTextExMarkdown alloc];
  ARApiTextExMarkdown_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARApiTextExMarkdown)

#pragma clang diagnostic pop
