//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiAppCounters.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/core/api/ApiAppCounters.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include "im/actor/runtime/collections/SparseArray.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARApiAppCounters () {
 @public
  JavaLangInteger *globalCounter_;
}

@end

J2OBJC_FIELD_SETTER(ARApiAppCounters, globalCounter_, JavaLangInteger *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiAppCounters.java"


#line 17
@implementation ARApiAppCounters


#line 21
- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)globalCounter {
  ARApiAppCounters_initWithJavaLangInteger_(self, globalCounter);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 25
- (instancetype)init {
  ARApiAppCounters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 30
- (JavaLangInteger *)getGlobalCounter {
  return self->globalCounter_;
}


#line 35
- (void)parseWithARBserValues:(ARBserValues *)values {
  self->globalCounter_ = JavaLangInteger_valueOfWithInt_([((ARBserValues *) nil_chk(values)) optIntWithInt:1]);
  if ([values hasRemaining]) {
    [self setUnmappedObjectsWithARSparseArray:[values buildRemaining]];
  }
}


#line 43
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  if (self->globalCounter_ != nil) {
    [((ARBserWriter *) nil_chk(writer)) writeIntWithInt:1 withInt:[self->globalCounter_ intValue]];
  }
  if ([self getUnmappedObjects] != nil) {
    ARSparseArray *unmapped = [self getUnmappedObjects];
    for (jint i = 0; i < [((ARSparseArray *) nil_chk(unmapped)) size]; i++) {
      jint key = [unmapped keyAtWithInt:i];
      [((ARBserWriter *) nil_chk(writer)) writeUnmappedWithInt:key withId:[unmapped getWithInt:key]];
    }
  }
}


#line 57
- (NSString *)description {
  NSString *res = @"struct AppCounters{";
  (void) JreStrAppendStrong(&res, "$@", @"globalCounter=", self->globalCounter_);
  (void) JreStrAppendStrong(&res, "$", @"}");
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangInteger:", "ApiAppCounters", NULL, 0x1, NULL, NULL },
    { "init", "ApiAppCounters", NULL, 0x1, NULL, NULL },
    { "getGlobalCounter", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "globalCounter_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARApiAppCounters = { 2, "ApiAppCounters", "im.actor.core.api", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARApiAppCounters;
}

@end


#line 21
void ARApiAppCounters_initWithJavaLangInteger_(ARApiAppCounters *self, JavaLangInteger *globalCounter) {
  (void) ARBserObject_init(self);
  
#line 22
  self->globalCounter_ = globalCounter;
}


#line 21
ARApiAppCounters *new_ARApiAppCounters_initWithJavaLangInteger_(JavaLangInteger *globalCounter) {
  ARApiAppCounters *self = [ARApiAppCounters alloc];
  ARApiAppCounters_initWithJavaLangInteger_(self, globalCounter);
  return self;
}


#line 25
void ARApiAppCounters_init(ARApiAppCounters *self) {
  (void) ARBserObject_init(self);
}


#line 25
ARApiAppCounters *new_ARApiAppCounters_init() {
  ARApiAppCounters *self = [ARApiAppCounters alloc];
  ARApiAppCounters_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARApiAppCounters)

#pragma clang diagnostic pop
