//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiEmailToImport.java
//

#include <j2objc/IOSClass.h>
#include <j2objc/J2ObjC_source.h>
#include "im/actor/core/api/ApiEmailToImport.h"
#include "im/actor/runtime/bser/BserObject.h"
#include "im/actor/runtime/bser/BserValues.h"
#include "im/actor/runtime/bser/BserWriter.h"
#include <j2objc/java/io/IOException.h>

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

@interface ARApiEmailToImport () {
 @public
  NSString *email_;
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(ARApiEmailToImport, email_, NSString *)
J2OBJC_FIELD_SETTER(ARApiEmailToImport, name_, NSString *)

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/core/core-shared/src/main/java//im/actor/core/api/ApiEmailToImport.java"


#line 17
@implementation ARApiEmailToImport


#line 22
- (instancetype)initWithNSString:(NSString *)email
                    withNSString:(NSString *)name {
  ARApiEmailToImport_initWithNSString_withNSString_(self, email, name);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 27
- (instancetype)init {
  ARApiEmailToImport_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 32
- (NSString *)getEmail {
  return self->email_;
}


#line 37
- (NSString *)getName {
  return self->name_;
}


#line 42
- (void)parseWithARBserValues:(ARBserValues *)values {
  self->email_ = [((ARBserValues *) nil_chk(values)) getStringWithInt:1];
  self->name_ = [values optStringWithInt:2];
}


#line 48
- (void)serializeWithARBserWriter:(ARBserWriter *)writer {
  if (self->email_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [((ARBserWriter *) nil_chk(writer)) writeStringWithInt:1 withNSString:self->email_];
  if (self->name_ != nil) {
    [writer writeStringWithInt:2 withNSString:self->name_];
  }
}


#line 59
- (NSString *)description {
  NSString *res = @"struct EmailToImport{";
  (void) JreStrAppendStrong(&res, "$$", @"email=", self->email_);
  (void) JreStrAppendStrong(&res, "$$", @", name=", self->name_);
  (void) JreStrAppendStrong(&res, "$", @"}");
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:", "ApiEmailToImport", NULL, 0x1, NULL, NULL },
    { "init", "ApiEmailToImport", NULL, 0x1, NULL, NULL },
    { "getEmail", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseWithARBserValues:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "serializeWithARBserWriter:", "serialize", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "email_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _ARApiEmailToImport = { 2, "ApiEmailToImport", "im.actor.core.api", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ARApiEmailToImport;
}

@end


#line 22
void ARApiEmailToImport_initWithNSString_withNSString_(ARApiEmailToImport *self, NSString *email, NSString *name) {
  (void) ARBserObject_init(self);
  
#line 23
  self->email_ = email;
  self->name_ = name;
}


#line 22
ARApiEmailToImport *new_ARApiEmailToImport_initWithNSString_withNSString_(NSString *email, NSString *name) {
  ARApiEmailToImport *self = [ARApiEmailToImport alloc];
  ARApiEmailToImport_initWithNSString_withNSString_(self, email, name);
  return self;
}


#line 27
void ARApiEmailToImport_init(ARApiEmailToImport *self) {
  (void) ARBserObject_init(self);
}


#line 27
ARApiEmailToImport *new_ARApiEmailToImport_init() {
  ARApiEmailToImport *self = [ARApiEmailToImport alloc];
  ARApiEmailToImport_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ARApiEmailToImport)

#pragma clang diagnostic pop
