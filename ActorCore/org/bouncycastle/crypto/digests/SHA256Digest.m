//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//org/bouncycastle/crypto/digests/SHA256Digest.java
//

#include <j2objc/IOSPrimitiveArray.h>
#include <j2objc/J2ObjC_source.h>
#include <j2objc/java/lang/System.h>
#include "org/bouncycastle/crypto/digests/GeneralDigest.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/util/Memoable.h"
#include "org/bouncycastle/util/Pack.h"

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#define OrgBouncycastleCryptoDigestsSHA256Digest_DIGEST_LENGTH 32

@interface OrgBouncycastleCryptoDigestsSHA256Digest () {
 @public
  jint H1_, H2_, H3_, H4_, H5_, H6_, H7_, H8_;
  IOSIntArray *X_;
  jint xOff_;
}

- (void)copyInWithOrgBouncycastleCryptoDigestsSHA256Digest:(OrgBouncycastleCryptoDigestsSHA256Digest *)t OBJC_METHOD_FAMILY_NONE;

- (jint)ChWithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z;

- (jint)MajWithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

- (jint)Sum0WithInt:(jint)x;

- (jint)Sum1WithInt:(jint)x;

- (jint)Theta0WithInt:(jint)x;

- (jint)Theta1WithInt:(jint)x;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsSHA256Digest, X_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA256Digest, DIGEST_LENGTH, jint)

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x, jint y, jint z);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x, jint y, jint z);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_Theta0WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA256Digest_Theta1WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x);

#line 0 "/Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//org/bouncycastle/crypto/digests/SHA256Digest.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoDigestsSHA256Digest)

IOSIntArray *OrgBouncycastleCryptoDigestsSHA256Digest_K_;


#line 18
@implementation OrgBouncycastleCryptoDigestsSHA256Digest

+ (IOSIntArray *)K {
  return OrgBouncycastleCryptoDigestsSHA256Digest_K_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 31
- (instancetype)init {
  OrgBouncycastleCryptoDigestsSHA256Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 39
- (instancetype)initWithOrgBouncycastleCryptoDigestsSHA256Digest:(OrgBouncycastleCryptoDigestsSHA256Digest *)t {
  OrgBouncycastleCryptoDigestsSHA256Digest_initWithOrgBouncycastleCryptoDigestsSHA256Digest_(self, t);
  return self;
}


#line 45
- (void)copyInWithOrgBouncycastleCryptoDigestsSHA256Digest:(OrgBouncycastleCryptoDigestsSHA256Digest *)t {
  [super copyInWithOrgBouncycastleCryptoDigestsGeneralDigest:t];
  
#line 48
  H1_ = ((OrgBouncycastleCryptoDigestsSHA256Digest *) nil_chk(t))->H1_;
  H2_ = t->H2_;
  H3_ = t->H3_;
  H4_ = t->H4_;
  H5_ = t->H5_;
  H6_ = t->H6_;
  H7_ = t->H7_;
  H8_ = t->H8_;
  
#line 57
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(t->X_, 0, X_, 0, ((IOSIntArray *) nil_chk(t->X_))->size_);
  xOff_ = t->xOff_;
}


#line 61
- (instancetype)initWithByteArray:(IOSByteArray *)encodedState {
  OrgBouncycastleCryptoDigestsSHA256Digest_initWithByteArray_(self, encodedState);
  return self;
}


#line 80
- (NSString *)getAlgorithmName {
  return @"SHA-256";
}

- (jint)getDigestSize {
  return OrgBouncycastleCryptoDigestsSHA256Digest_DIGEST_LENGTH;
}

- (void)processWordWithByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inOff {
  
#line 93
  jint n = JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff), 24);
  n |= JreLShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 16);
  n |= JreLShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff);
  *IOSIntArray_GetRef(nil_chk(X_), xOff_) = n;
  
#line 99
  if (++xOff_ == 16) {
    [self processBlock];
  }
}

- (void)processLengthWithLong:(jlong)bitLength {
  
#line 106
  if (xOff_ > 14) {
    [self processBlock];
  }
  
#line 110
  *IOSIntArray_GetRef(nil_chk(X_), 14) = (jint) (JreURShift64(bitLength, 32));
  *IOSIntArray_GetRef(X_, 15) = (jint) (bitLength & (jint) 0xffffffff);
}


#line 114
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 117
  [self finish];
  
#line 119
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, outArg, outOff);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, outArg, outOff + 4);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, outArg, outOff + 8);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, outArg, outOff + 12);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, outArg, outOff + 16);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H6_, outArg, outOff + 20);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H7_, outArg, outOff + 24);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H8_, outArg, outOff + 28);
  
#line 128
  [self reset];
  
#line 130
  return OrgBouncycastleCryptoDigestsSHA256Digest_DIGEST_LENGTH;
}


#line 136
- (void)reset {
  [super reset];
  
#line 144
  H1_ = (jint) 0x6a09e667;
  H2_ = (jint) 0xbb67ae85;
  H3_ = (jint) 0x3c6ef372;
  H4_ = (jint) 0xa54ff53a;
  H5_ = (jint) 0x510e527f;
  H6_ = (jint) 0x9b05688c;
  H7_ = (jint) 0x1f83d9ab;
  H8_ = (jint) 0x5be0cd19;
  
#line 153
  xOff_ = 0;
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(X_))->size_; i++) {
    *IOSIntArray_GetRef(X_, i) = 0;
  }
}


#line 159
- (void)processBlock {
  
#line 163
  for (jint t = 16; t <= 63; t++) {
    *IOSIntArray_GetRef(nil_chk(X_), t) = OrgBouncycastleCryptoDigestsSHA256Digest_Theta1WithInt_(self, IOSIntArray_Get(X_, t - 2)) + IOSIntArray_Get(X_, t - 7) + OrgBouncycastleCryptoDigestsSHA256Digest_Theta0WithInt_(self, IOSIntArray_Get(X_, t - 15)) + IOSIntArray_Get(X_, t - 16);
  }
  
#line 170
  jint a = H1_;
  jint b = H2_;
  jint c = H3_;
  jint d = H4_;
  jint e = H5_;
  jint f = H6_;
  jint g = H7_;
  jint h = H8_;
  
#line 179
  jint t = 0;
  for (jint i = 0; i < 8; i++) {
    
#line 182
    h += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, e) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, e, f, g) + IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoDigestsSHA256Digest_K_), t) + IOSIntArray_Get(nil_chk(X_), t);
    d += h;
    h += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, a) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, a, b, c);
    ++t;
    
#line 188
    g += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, d) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, d, e, f) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    c += g;
    g += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, h) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, h, a, b);
    ++t;
    
#line 194
    f += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, c) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, c, d, e) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    b += f;
    f += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, g) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, g, h, a);
    ++t;
    
#line 200
    e += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, b) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, b, c, d) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    a += e;
    e += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, f) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, f, g, h);
    ++t;
    
#line 206
    d += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, a) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, a, b, c) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    h += d;
    d += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, e) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, e, f, g);
    ++t;
    
#line 212
    c += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, h) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, h, a, b) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    g += c;
    c += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, d) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, d, e, f);
    ++t;
    
#line 218
    b += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, g) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, g, h, a) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    f += b;
    b += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, c) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, c, d, e);
    ++t;
    
#line 224
    a += OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, f) + OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, f, g, h) + IOSIntArray_Get(OrgBouncycastleCryptoDigestsSHA256Digest_K_, t) + IOSIntArray_Get(X_, t);
    e += a;
    a += OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, b) + OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, b, c, d);
    ++t;
  }
  
#line 230
  H1_ = (H1_ + a) & (jint) 0xffffffff;
  H2_ = (H2_ + b) & (jint) 0xffffffff;
  H3_ = (H3_ + c) & (jint) 0xffffffff;
  H4_ = (H4_ + d) & (jint) 0xffffffff;
  H5_ = (H5_ + e) & (jint) 0xffffffff;
  H6_ = (H6_ + f) & (jint) 0xffffffff;
  H7_ = (H7_ + g) & (jint) 0xffffffff;
  H8_ = (H8_ + h) & (jint) 0xffffffff;
  
#line 242
  xOff_ = 0;
  for (jint i = 0; i < 16; i++) {
    *IOSIntArray_GetRef(nil_chk(X_), i) = 0;
  }
}


#line 249
- (jint)ChWithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z {
  return OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(self, x, y, z);
}


#line 256
- (jint)MajWithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(self, x, y, z);
}


#line 263
- (jint)Sum0WithInt:(jint)x {
  return OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(self, x);
}


#line 268
- (jint)Sum1WithInt:(jint)x {
  return OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(self, x);
}


#line 273
- (jint)Theta0WithInt:(jint)x {
  return OrgBouncycastleCryptoDigestsSHA256Digest_Theta0WithInt_(self, x);
}


#line 278
- (jint)Theta1WithInt:(jint)x {
  return OrgBouncycastleCryptoDigestsSHA256Digest_Theta1WithInt_(self, x);
}


#line 298
- (id<OrgBouncycastleUtilMemoable>)copy__ {
  return new_OrgBouncycastleCryptoDigestsSHA256Digest_initWithOrgBouncycastleCryptoDigestsSHA256Digest_(self);
}

- (void)resetWithOrgBouncycastleUtilMemoable:(id<OrgBouncycastleUtilMemoable>)other {
  OrgBouncycastleCryptoDigestsSHA256Digest *d = (OrgBouncycastleCryptoDigestsSHA256Digest *) check_class_cast(other, [OrgBouncycastleCryptoDigestsSHA256Digest class]);
  
#line 305
  [self copyInWithOrgBouncycastleCryptoDigestsSHA256Digest:d];
}


#line 308
- (IOSByteArray *)getEncodedState {
  IOSByteArray *state = [IOSByteArray newArrayWithLength:52 + xOff_ * 4];
  
#line 311
  [super populateStateWithByteArray:state];
  
#line 313
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, state, 16);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, state, 20);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, state, 24);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, state, 28);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, state, 32);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H6_, state, 36);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H7_, state, 40);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H8_, state, 44);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(xOff_, state, 48);
  
#line 323
  for (jint i = 0; i != xOff_; i++) {
    OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(X_), i), state, 52 + (i * 4));
  }
  
#line 327
  return state;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoDigestsSHA256Digest class]) {
    OrgBouncycastleCryptoDigestsSHA256Digest_K_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 288
      (jint) 0x428a2f98, (jint) 0x71374491, (jint) 0xb5c0fbcf, (jint) 0xe9b5dba5, (jint) 0x3956c25b, (jint) 0x59f111f1, (jint) 0x923f82a4, (jint) 0xab1c5ed5,
#line 289
      (jint) 0xd807aa98, (jint) 0x12835b01, (jint) 0x243185be, (jint) 0x550c7dc3, (jint) 0x72be5d74, (jint) 0x80deb1fe, (jint) 0x9bdc06a7, (jint) 0xc19bf174,
#line 290
      (jint) 0xe49b69c1, (jint) 0xefbe4786, (jint) 0x0fc19dc6, (jint) 0x240ca1cc, (jint) 0x2de92c6f, (jint) 0x4a7484aa, (jint) 0x5cb0a9dc, (jint) 0x76f988da,
#line 291
      (jint) 0x983e5152, (jint) 0xa831c66d, (jint) 0xb00327c8, (jint) 0xbf597fc7, (jint) 0xc6e00bf3, (jint) 0xd5a79147, (jint) 0x06ca6351, (jint) 0x14292967,
#line 292
      (jint) 0x27b70a85, (jint) 0x2e1b2138, (jint) 0x4d2c6dfc, (jint) 0x53380d13, (jint) 0x650a7354, (jint) 0x766a0abb, (jint) 0x81c2c92e, (jint) 0x92722c85,
#line 293
      (jint) 0xa2bfe8a1, (jint) 0xa81a664b, (jint) 0xc24b8b70, (jint) 0xc76c51a3, (jint) 0xd192e819, (jint) 0xd6990624, (jint) 0xf40e3585, (jint) 0x106aa070,
#line 294
      (jint) 0x19a4c116, (jint) 0x1e376c08, (jint) 0x2748774c, (jint) 0x34b0bcb5, (jint) 0x391c0cb3, (jint) 0x4ed8aa4a, (jint) 0x5b9cca4f, (jint) 0x682e6ff3,
#line 295
      (jint) 0x748f82ee, (jint) 0x78a5636f, (jint) 0x84c87814, (jint) 0x8cc70208, (jint) 0x90befffa, (jint) 0xa4506ceb, (jint) 0xbef9a3f7, (jint) 0xc67178f2 } count:64];
      J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoDigestsSHA256Digest)
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SHA256Digest", NULL, 0x1, NULL, NULL },
    { "initWithOrgBouncycastleCryptoDigestsSHA256Digest:", "SHA256Digest", NULL, 0x1, NULL, NULL },
    { "copyInWithOrgBouncycastleCryptoDigestsSHA256Digest:", "copyIn", "V", 0x2, NULL, NULL },
    { "initWithByteArray:", "SHA256Digest", NULL, 0x1, NULL, NULL },
    { "getAlgorithmName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDigestSize", NULL, "I", 0x1, NULL, NULL },
    { "processWordWithByteArray:withInt:", "processWord", "V", 0x4, NULL, NULL },
    { "processLengthWithLong:", "processLength", "V", 0x4, NULL, NULL },
    { "doFinalWithByteArray:withInt:", "doFinal", "I", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "processBlock", NULL, "V", 0x4, NULL, NULL },
    { "ChWithInt:withInt:withInt:", "Ch", "I", 0x2, NULL, NULL },
    { "MajWithInt:withInt:withInt:", "Maj", "I", 0x2, NULL, NULL },
    { "Sum0WithInt:", "Sum0", "I", 0x2, NULL, NULL },
    { "Sum1WithInt:", "Sum1", "I", 0x2, NULL, NULL },
    { "Theta0WithInt:", "Theta0", "I", 0x2, NULL, NULL },
    { "Theta1WithInt:", "Theta1", "I", 0x2, NULL, NULL },
    { "copy__", "copy", "Lorg.bouncycastle.util.Memoable;", 0x1, NULL, NULL },
    { "resetWithOrgBouncycastleUtilMemoable:", "reset", "V", 0x1, NULL, NULL },
    { "getEncodedState", NULL, "[B", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DIGEST_LENGTH", "DIGEST_LENGTH", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgBouncycastleCryptoDigestsSHA256Digest_DIGEST_LENGTH },
    { "H1_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H2_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H3_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H4_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H5_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H6_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H7_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "H8_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "X_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "xOff_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "K_", NULL, 0x18, "[I", &OrgBouncycastleCryptoDigestsSHA256Digest_K_, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoDigestsSHA256Digest = { 2, "SHA256Digest", "org.bouncycastle.crypto.digests", NULL, 0x1, 20, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgBouncycastleCryptoDigestsSHA256Digest;
}

@end


#line 31
void OrgBouncycastleCryptoDigestsSHA256Digest_init(OrgBouncycastleCryptoDigestsSHA256Digest *self) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_init(self);
  self->X_ = [IOSIntArray newArrayWithLength:
#line 25
  64];
  
#line 32
  [self reset];
}


#line 31
OrgBouncycastleCryptoDigestsSHA256Digest *new_OrgBouncycastleCryptoDigestsSHA256Digest_init() {
  OrgBouncycastleCryptoDigestsSHA256Digest *self = [OrgBouncycastleCryptoDigestsSHA256Digest alloc];
  OrgBouncycastleCryptoDigestsSHA256Digest_init(self);
  return self;
}


#line 39
void OrgBouncycastleCryptoDigestsSHA256Digest_initWithOrgBouncycastleCryptoDigestsSHA256Digest_(OrgBouncycastleCryptoDigestsSHA256Digest *self, OrgBouncycastleCryptoDigestsSHA256Digest *t) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_initWithOrgBouncycastleCryptoDigestsGeneralDigest_(self, t);
  self->X_ = [IOSIntArray newArrayWithLength:
#line 25
  64];
  
#line 42
  [self copyInWithOrgBouncycastleCryptoDigestsSHA256Digest:t];
}


#line 39
OrgBouncycastleCryptoDigestsSHA256Digest *new_OrgBouncycastleCryptoDigestsSHA256Digest_initWithOrgBouncycastleCryptoDigestsSHA256Digest_(OrgBouncycastleCryptoDigestsSHA256Digest *t) {
  OrgBouncycastleCryptoDigestsSHA256Digest *self = [OrgBouncycastleCryptoDigestsSHA256Digest alloc];
  OrgBouncycastleCryptoDigestsSHA256Digest_initWithOrgBouncycastleCryptoDigestsSHA256Digest_(self, t);
  return self;
}


#line 61
void OrgBouncycastleCryptoDigestsSHA256Digest_initWithByteArray_(OrgBouncycastleCryptoDigestsSHA256Digest *self, IOSByteArray *encodedState) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_initWithByteArray_(self, encodedState);
  self->X_ = [IOSIntArray newArrayWithLength:
#line 25
  64];
  
#line 64
  self->H1_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 16);
  self->H2_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 20);
  self->H3_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 24);
  self->H4_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 28);
  self->H5_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 32);
  self->H6_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 36);
  self->H7_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 40);
  self->H8_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 44);
  
#line 73
  self->xOff_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 48);
  for (jint i = 0; i != self->xOff_; i++) {
    *IOSIntArray_GetRef(self->X_, i) = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 52 + (i * 4));
  }
}


#line 61
OrgBouncycastleCryptoDigestsSHA256Digest *new_OrgBouncycastleCryptoDigestsSHA256Digest_initWithByteArray_(IOSByteArray *encodedState) {
  OrgBouncycastleCryptoDigestsSHA256Digest *self = [OrgBouncycastleCryptoDigestsSHA256Digest alloc];
  OrgBouncycastleCryptoDigestsSHA256Digest_initWithByteArray_(self, encodedState);
  return self;
}


#line 249
jint OrgBouncycastleCryptoDigestsSHA256Digest_ChWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x, jint y, jint z) {
  
#line 253
  return (x & y) ^ ((~x) & z);
}


#line 256
jint OrgBouncycastleCryptoDigestsSHA256Digest_MajWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x, jint y, jint z) {
  
#line 260
  return (x & y) ^ (x & z) ^ (y & z);
}


#line 263
jint OrgBouncycastleCryptoDigestsSHA256Digest_Sum0WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x) {
  
#line 265
  return ((JreURShift32(x, 2)) | (JreLShift32(x, 30))) ^ ((JreURShift32(x, 13)) | (JreLShift32(x, 19))) ^ ((JreURShift32(x, 22)) | (JreLShift32(x, 10)));
}


#line 268
jint OrgBouncycastleCryptoDigestsSHA256Digest_Sum1WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x) {
  
#line 270
  return ((JreURShift32(x, 6)) | (JreLShift32(x, 26))) ^ ((JreURShift32(x, 11)) | (JreLShift32(x, 21))) ^ ((JreURShift32(x, 25)) | (JreLShift32(x, 7)));
}


#line 273
jint OrgBouncycastleCryptoDigestsSHA256Digest_Theta0WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x) {
  
#line 275
  return ((JreURShift32(x, 7)) | (JreLShift32(x, 25))) ^ ((JreURShift32(x, 18)) | (JreLShift32(x, 14))) ^ (JreURShift32(x, 3));
}


#line 278
jint OrgBouncycastleCryptoDigestsSHA256Digest_Theta1WithInt_(OrgBouncycastleCryptoDigestsSHA256Digest *self, jint x) {
  
#line 280
  return ((JreURShift32(x, 17)) | (JreLShift32(x, 15))) ^ ((JreURShift32(x, 19)) | (JreLShift32(x, 13))) ^ (JreURShift32(x, 10));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoDigestsSHA256Digest)

#pragma clang diagnostic pop
