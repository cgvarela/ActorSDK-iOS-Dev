//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-sdk/sdk-core/runtime/runtime-shared/src/main/java//org/bouncycastle/util/BigIntegers.java
//

#ifndef _OrgBouncycastleUtilBigIntegers_H_
#define _OrgBouncycastleUtilBigIntegers_H_

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include <j2objc/J2ObjC_header.h>

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol ARRandomProvider;

/*!
 @brief BigInteger utilities.
 */
@interface OrgBouncycastleUtilBigIntegers : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the passed in value as an unsigned byte array.
 @param value value to be converted.
 @return a byte array without a leading zero byte if present in the signed encoding.
 */
+ (IOSByteArray *)asUnsignedByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Return the passed in value as an unsigned byte array.
 @param value value to be converted.
 @return a byte array without a leading zero byte if present in the signed encoding.
 */
+ (IOSByteArray *)asUnsignedByteArrayWithInt:(jint)length
                      withJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Return a random BigInteger not less than 'min' and not greater than 'max'
 @param min    the least value that may be generated
 @param max    the greatest value that may be generated
 @param random the source of randomness
 @return a random BigInteger value in the range [min,max]
 */
+ (JavaMathBigInteger *)createRandomInRangeWithJavaMathBigInteger:(JavaMathBigInteger *)min
                                           withJavaMathBigInteger:(JavaMathBigInteger *)max
                                             withARRandomProvider:(id<ARRandomProvider>)random;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf
                                                   withInt:(jint)off
                                                   withInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleUtilBigIntegers)

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *value);

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withARRandomProvider_(JavaMathBigInteger *min, JavaMathBigInteger *max, id<ARRandomProvider> random);

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint length);

FOUNDATION_EXPORT void OrgBouncycastleUtilBigIntegers_init(OrgBouncycastleUtilBigIntegers *self);

FOUNDATION_EXPORT OrgBouncycastleUtilBigIntegers *new_OrgBouncycastleUtilBigIntegers_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilBigIntegers)


#pragma clang diagnostic pop
#endif // _OrgBouncycastleUtilBigIntegers_H_
